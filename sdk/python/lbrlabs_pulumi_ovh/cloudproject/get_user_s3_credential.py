# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetUserS3CredentialResult',
    'AwaitableGetUserS3CredentialResult',
    'get_user_s3_credential',
    'get_user_s3_credential_output',
]

@pulumi.output_type
class GetUserS3CredentialResult:
    """
    A collection of values returned by getUserS3Credential.
    """
    def __init__(__self__, access_key_id=None, id=None, secret_access_key=None, service_name=None, user_id=None):
        if access_key_id and not isinstance(access_key_id, str):
            raise TypeError("Expected argument 'access_key_id' to be a str")
        pulumi.set(__self__, "access_key_id", access_key_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if secret_access_key and not isinstance(secret_access_key, str):
            raise TypeError("Expected argument 'secret_access_key' to be a str")
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        """
        (Sensitive) the Secret Access Key
        """
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")


class AwaitableGetUserS3CredentialResult(GetUserS3CredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserS3CredentialResult(
            access_key_id=self.access_key_id,
            id=self.id,
            secret_access_key=self.secret_access_key,
            service_name=self.service_name,
            user_id=self.user_id)


def get_user_s3_credential(access_key_id: Optional[str] = None,
                           service_name: Optional[str] = None,
                           user_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserS3CredentialResult:
    """
    Use this data source to retrieve the Secret Access Key of an Access Key ID associated with a public cloud project's user.


    :param str access_key_id: the Access Key ID
    :param str service_name: The ID of the public cloud project. If omitted,
           the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
    :param str user_id: The ID of a public cloud project's user.
    """
    __args__ = dict()
    __args__['accessKeyId'] = access_key_id
    __args__['serviceName'] = service_name
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ovh:CloudProject/getUserS3Credential:getUserS3Credential', __args__, opts=opts, typ=GetUserS3CredentialResult).value

    return AwaitableGetUserS3CredentialResult(
        access_key_id=__ret__.access_key_id,
        id=__ret__.id,
        secret_access_key=__ret__.secret_access_key,
        service_name=__ret__.service_name,
        user_id=__ret__.user_id)


@_utilities.lift_output_func(get_user_s3_credential)
def get_user_s3_credential_output(access_key_id: Optional[pulumi.Input[str]] = None,
                                  service_name: Optional[pulumi.Input[str]] = None,
                                  user_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserS3CredentialResult]:
    """
    Use this data source to retrieve the Secret Access Key of an Access Key ID associated with a public cloud project's user.


    :param str access_key_id: the Access Key ID
    :param str service_name: The ID of the public cloud project. If omitted,
           the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
    :param str user_id: The ID of a public cloud project's user.
    """
    ...
