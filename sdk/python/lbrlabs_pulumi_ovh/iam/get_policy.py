# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPolicyResult',
    'AwaitableGetPolicyResult',
    'get_policy',
    'get_policy_output',
]

@pulumi.output_type
class GetPolicyResult:
    """
    A collection of values returned by getPolicy.
    """
    def __init__(__self__, allows=None, created_at=None, description=None, excepts=None, id=None, identities=None, name=None, owner=None, read_only=None, resources=None, updated_at=None):
        if allows and not isinstance(allows, list):
            raise TypeError("Expected argument 'allows' to be a list")
        pulumi.set(__self__, "allows", allows)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if excepts and not isinstance(excepts, list):
            raise TypeError("Expected argument 'excepts' to be a list")
        pulumi.set(__self__, "excepts", excepts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identities and not isinstance(identities, list):
            raise TypeError("Expected argument 'identities' to be a list")
        pulumi.set(__self__, "identities", identities)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if read_only and not isinstance(read_only, bool):
            raise TypeError("Expected argument 'read_only' to be a bool")
        pulumi.set(__self__, "read_only", read_only)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def allows(self) -> Optional[Sequence[str]]:
        """
        List of actions allowed by the policy.
        """
        return pulumi.get(self, "allows")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Creation date of this group.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Group description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def excepts(self) -> Optional[Sequence[str]]:
        """
        List of actions.
        """
        return pulumi.get(self, "excepts")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identities(self) -> Sequence[str]:
        """
        List of identities affected by the policy.
        """
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Owner of the policy.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Indicates that the policy is a default one.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def resources(self) -> Sequence[str]:
        """
        List of resources affected by the policy.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Date of the last update of this group.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetPolicyResult(GetPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyResult(
            allows=self.allows,
            created_at=self.created_at,
            description=self.description,
            excepts=self.excepts,
            id=self.id,
            identities=self.identities,
            name=self.name,
            owner=self.owner,
            read_only=self.read_only,
            resources=self.resources,
            updated_at=self.updated_at)


def get_policy(allows: Optional[Sequence[str]] = None,
               description: Optional[str] = None,
               excepts: Optional[Sequence[str]] = None,
               id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyResult:
    """
    Use this data source to retrieve am IAM policy.

    ## Important

    > Using this resource requires that the account is enrolled in the OVHcloud [IAM beta](https://labs.ovhcloud.com/en/iam/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    my_policy = ovh.Iam.get_policy(id="my_policy_id")
    ```


    :param Sequence[str] allows: List of actions allowed by the policy.
    :param str description: Group description.
    :param Sequence[str] excepts: List of actions.
    :param str id: UUID of the policy.
    """
    __args__ = dict()
    __args__['allows'] = allows
    __args__['description'] = description
    __args__['excepts'] = excepts
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ovh:Iam/getPolicy:getPolicy', __args__, opts=opts, typ=GetPolicyResult).value

    return AwaitableGetPolicyResult(
        allows=pulumi.get(__ret__, 'allows'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        excepts=pulumi.get(__ret__, 'excepts'),
        id=pulumi.get(__ret__, 'id'),
        identities=pulumi.get(__ret__, 'identities'),
        name=pulumi.get(__ret__, 'name'),
        owner=pulumi.get(__ret__, 'owner'),
        read_only=pulumi.get(__ret__, 'read_only'),
        resources=pulumi.get(__ret__, 'resources'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_policy)
def get_policy_output(allows: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                      description: Optional[pulumi.Input[Optional[str]]] = None,
                      excepts: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                      id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyResult]:
    """
    Use this data source to retrieve am IAM policy.

    ## Important

    > Using this resource requires that the account is enrolled in the OVHcloud [IAM beta](https://labs.ovhcloud.com/en/iam/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    my_policy = ovh.Iam.get_policy(id="my_policy_id")
    ```


    :param Sequence[str] allows: List of actions allowed by the policy.
    :param str description: Group description.
    :param Sequence[str] excepts: List of actions.
    :param str id: UUID of the policy.
    """
    ...
