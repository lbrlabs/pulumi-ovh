// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.Dedicated.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ovh.Dedicated.inputs.ServiceInstallTaskDetailsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceInstallTaskState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceInstallTaskState Empty = new ServiceInstallTaskState();

    /**
     * If set, reboot the server on the specified boot id during destroy phase.
     * 
     */
    @Import(name="bootidOnDestroy")
    private @Nullable Output<Integer> bootidOnDestroy;

    /**
     * @return If set, reboot the server on the specified boot id during destroy phase.
     * 
     */
    public Optional<Output<Integer>> bootidOnDestroy() {
        return Optional.ofNullable(this.bootidOnDestroy);
    }

    /**
     * Details of this task. (should be `Install asked`)
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Details of this task. (should be `Install asked`)
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * see `details` block below.
     * 
     */
    @Import(name="details")
    private @Nullable Output<ServiceInstallTaskDetailsArgs> details;

    /**
     * @return see `details` block below.
     * 
     */
    public Optional<Output<ServiceInstallTaskDetailsArgs>> details() {
        return Optional.ofNullable(this.details);
    }

    /**
     * Completion date in RFC3339 format.
     * 
     */
    @Import(name="doneDate")
    private @Nullable Output<String> doneDate;

    /**
     * @return Completion date in RFC3339 format.
     * 
     */
    public Optional<Output<String>> doneDate() {
        return Optional.ofNullable(this.doneDate);
    }

    /**
     * Function name (should be `hardInstall`).
     * 
     */
    @Import(name="function")
    private @Nullable Output<String> function;

    /**
     * @return Function name (should be `hardInstall`).
     * 
     */
    public Optional<Output<String>> function() {
        return Optional.ofNullable(this.function);
    }

    /**
     * Last update in RFC3339 format.
     * 
     */
    @Import(name="lastUpdate")
    private @Nullable Output<String> lastUpdate;

    /**
     * @return Last update in RFC3339 format.
     * 
     */
    public Optional<Output<String>> lastUpdate() {
        return Optional.ofNullable(this.lastUpdate);
    }

    /**
     * Partition scheme name.
     * 
     */
    @Import(name="partitionSchemeName")
    private @Nullable Output<String> partitionSchemeName;

    /**
     * @return Partition scheme name.
     * 
     */
    public Optional<Output<String>> partitionSchemeName() {
        return Optional.ofNullable(this.partitionSchemeName);
    }

    /**
     * The service_name of your dedicated server.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The service_name of your dedicated server.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Task creation date in RFC3339 format.
     * 
     */
    @Import(name="startDate")
    private @Nullable Output<String> startDate;

    /**
     * @return Task creation date in RFC3339 format.
     * 
     */
    public Optional<Output<String>> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * Task status (should be `done`)
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Task status (should be `done`)
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Template name.
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return Template name.
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    private ServiceInstallTaskState() {}

    private ServiceInstallTaskState(ServiceInstallTaskState $) {
        this.bootidOnDestroy = $.bootidOnDestroy;
        this.comment = $.comment;
        this.details = $.details;
        this.doneDate = $.doneDate;
        this.function = $.function;
        this.lastUpdate = $.lastUpdate;
        this.partitionSchemeName = $.partitionSchemeName;
        this.serviceName = $.serviceName;
        this.startDate = $.startDate;
        this.status = $.status;
        this.templateName = $.templateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceInstallTaskState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceInstallTaskState $;

        public Builder() {
            $ = new ServiceInstallTaskState();
        }

        public Builder(ServiceInstallTaskState defaults) {
            $ = new ServiceInstallTaskState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootidOnDestroy If set, reboot the server on the specified boot id during destroy phase.
         * 
         * @return builder
         * 
         */
        public Builder bootidOnDestroy(@Nullable Output<Integer> bootidOnDestroy) {
            $.bootidOnDestroy = bootidOnDestroy;
            return this;
        }

        /**
         * @param bootidOnDestroy If set, reboot the server on the specified boot id during destroy phase.
         * 
         * @return builder
         * 
         */
        public Builder bootidOnDestroy(Integer bootidOnDestroy) {
            return bootidOnDestroy(Output.of(bootidOnDestroy));
        }

        /**
         * @param comment Details of this task. (should be `Install asked`)
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Details of this task. (should be `Install asked`)
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param details see `details` block below.
         * 
         * @return builder
         * 
         */
        public Builder details(@Nullable Output<ServiceInstallTaskDetailsArgs> details) {
            $.details = details;
            return this;
        }

        /**
         * @param details see `details` block below.
         * 
         * @return builder
         * 
         */
        public Builder details(ServiceInstallTaskDetailsArgs details) {
            return details(Output.of(details));
        }

        /**
         * @param doneDate Completion date in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder doneDate(@Nullable Output<String> doneDate) {
            $.doneDate = doneDate;
            return this;
        }

        /**
         * @param doneDate Completion date in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder doneDate(String doneDate) {
            return doneDate(Output.of(doneDate));
        }

        /**
         * @param function Function name (should be `hardInstall`).
         * 
         * @return builder
         * 
         */
        public Builder function(@Nullable Output<String> function) {
            $.function = function;
            return this;
        }

        /**
         * @param function Function name (should be `hardInstall`).
         * 
         * @return builder
         * 
         */
        public Builder function(String function) {
            return function(Output.of(function));
        }

        /**
         * @param lastUpdate Last update in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdate(@Nullable Output<String> lastUpdate) {
            $.lastUpdate = lastUpdate;
            return this;
        }

        /**
         * @param lastUpdate Last update in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdate(String lastUpdate) {
            return lastUpdate(Output.of(lastUpdate));
        }

        /**
         * @param partitionSchemeName Partition scheme name.
         * 
         * @return builder
         * 
         */
        public Builder partitionSchemeName(@Nullable Output<String> partitionSchemeName) {
            $.partitionSchemeName = partitionSchemeName;
            return this;
        }

        /**
         * @param partitionSchemeName Partition scheme name.
         * 
         * @return builder
         * 
         */
        public Builder partitionSchemeName(String partitionSchemeName) {
            return partitionSchemeName(Output.of(partitionSchemeName));
        }

        /**
         * @param serviceName The service_name of your dedicated server.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The service_name of your dedicated server.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param startDate Task creation date in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder startDate(@Nullable Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate Task creation date in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param status Task status (should be `done`)
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Task status (should be `done`)
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param templateName Template name.
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName Template name.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        public ServiceInstallTaskState build() {
            return $;
        }
    }

}
