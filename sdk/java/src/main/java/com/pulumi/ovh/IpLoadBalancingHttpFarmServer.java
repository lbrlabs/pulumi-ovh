// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ovh.IpLoadBalancingHttpFarmServerArgs;
import com.pulumi.ovh.Utilities;
import com.pulumi.ovh.inputs.IpLoadBalancingHttpFarmServerState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates a backend server entry linked to http loadbalancing group (farm)
 * 
 */
@ResourceType(type="ovh:index/ipLoadBalancingHttpFarmServer:IpLoadBalancingHttpFarmServer")
public class IpLoadBalancingHttpFarmServer extends com.pulumi.resources.CustomResource {
    /**
     * Address of the backend server (IP from either internal or OVH network)
     * 
     */
    @Export(name="address", type=String.class, parameters={})
    private Output<String> address;

    /**
     * @return Address of the backend server (IP from either internal or OVH network)
     * 
     */
    public Output<String> address() {
        return this.address;
    }
    /**
     * is it a backup server used in case of failure of all the non-backup backends
     * 
     */
    @Export(name="backup", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> backup;

    /**
     * @return is it a backup server used in case of failure of all the non-backup backends
     * 
     */
    public Output<Optional<Boolean>> backup() {
        return Codegen.optional(this.backup);
    }
    @Export(name="chain", type=String.class, parameters={})
    private Output</* @Nullable */ String> chain;

    public Output<Optional<String>> chain() {
        return Codegen.optional(this.chain);
    }
    /**
     * Value of the stickiness cookie used for this backend.
     * 
     */
    @Export(name="cookie", type=String.class, parameters={})
    private Output<String> cookie;

    /**
     * @return Value of the stickiness cookie used for this backend.
     * 
     */
    public Output<String> cookie() {
        return this.cookie;
    }
    /**
     * Label for the server
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Label for the server
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * ID of the farm this server is attached to
     * 
     */
    @Export(name="farmId", type=Integer.class, parameters={})
    private Output<Integer> farmId;

    /**
     * @return ID of the farm this server is attached to
     * 
     */
    public Output<Integer> farmId() {
        return this.farmId;
    }
    /**
     * Port that backend will respond on
     * 
     */
    @Export(name="port", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> port;

    /**
     * @return Port that backend will respond on
     * 
     */
    public Output<Optional<Integer>> port() {
        return Codegen.optional(this.port);
    }
    /**
     * defines if backend will be probed to determine health and keep as active in farm if healthy
     * 
     */
    @Export(name="probe", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> probe;

    /**
     * @return defines if backend will be probed to determine health and keep as active in farm if healthy
     * 
     */
    public Output<Optional<Boolean>> probe() {
        return Codegen.optional(this.probe);
    }
    /**
     * version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
     * 
     */
    @Export(name="proxyProtocolVersion", type=String.class, parameters={})
    private Output</* @Nullable */ String> proxyProtocolVersion;

    /**
     * @return version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
     * 
     */
    public Output<Optional<String>> proxyProtocolVersion() {
        return Codegen.optional(this.proxyProtocolVersion);
    }
    /**
     * The internal name of your IP load balancing
     * 
     */
    @Export(name="serviceName", type=String.class, parameters={})
    private Output<String> serviceName;

    /**
     * @return The internal name of your IP load balancing
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }
    /**
     * is the connection ciphered with SSL (TLS)
     * 
     */
    @Export(name="ssl", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> ssl;

    /**
     * @return is the connection ciphered with SSL (TLS)
     * 
     */
    public Output<Optional<Boolean>> ssl() {
        return Codegen.optional(this.ssl);
    }
    /**
     * backend status - `active` or `inactive`
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return backend status - `active` or `inactive`
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * used in loadbalancing algorithm
     * 
     */
    @Export(name="weight", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> weight;

    /**
     * @return used in loadbalancing algorithm
     * 
     */
    public Output<Optional<Integer>> weight() {
        return Codegen.optional(this.weight);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public IpLoadBalancingHttpFarmServer(String name) {
        this(name, IpLoadBalancingHttpFarmServerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public IpLoadBalancingHttpFarmServer(String name, IpLoadBalancingHttpFarmServerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public IpLoadBalancingHttpFarmServer(String name, IpLoadBalancingHttpFarmServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ovh:index/ipLoadBalancingHttpFarmServer:IpLoadBalancingHttpFarmServer", name, args == null ? IpLoadBalancingHttpFarmServerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private IpLoadBalancingHttpFarmServer(String name, Output<String> id, @Nullable IpLoadBalancingHttpFarmServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ovh:index/ipLoadBalancingHttpFarmServer:IpLoadBalancingHttpFarmServer", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static IpLoadBalancingHttpFarmServer get(String name, Output<String> id, @Nullable IpLoadBalancingHttpFarmServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new IpLoadBalancingHttpFarmServer(name, id, state, options);
    }
}
