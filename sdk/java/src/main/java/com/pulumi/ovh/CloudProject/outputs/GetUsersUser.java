// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.CloudProject.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.ovh.CloudProject.outputs.GetUsersUserRole;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUsersUser {
    /**
     * @return the date the user was created.
     * 
     */
    private String creationDate;
    /**
     * @return description of the role
     * 
     */
    private String description;
    /**
     * @return A list of roles associated with the user.
     * 
     */
    private List<GetUsersUserRole> roles;
    /**
     * @return the status of the user. should be normally set to &#39;ok&#39;.
     * 
     */
    private String status;
    /**
     * @return The ID of a public cloud project&#39;s user.
     * 
     */
    private String userId;
    /**
     * @return the username generated for the user. This username can be used with
     * the Openstack API.
     * 
     */
    private String username;

    private GetUsersUser() {}
    /**
     * @return the date the user was created.
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return description of the role
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A list of roles associated with the user.
     * 
     */
    public List<GetUsersUserRole> roles() {
        return this.roles;
    }
    /**
     * @return the status of the user. should be normally set to &#39;ok&#39;.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The ID of a public cloud project&#39;s user.
     * 
     */
    public String userId() {
        return this.userId;
    }
    /**
     * @return the username generated for the user. This username can be used with
     * the Openstack API.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationDate;
        private String description;
        private List<GetUsersUserRole> roles;
        private String status;
        private String userId;
        private String username;
        public Builder() {}
        public Builder(GetUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationDate = defaults.creationDate;
    	      this.description = defaults.description;
    	      this.roles = defaults.roles;
    	      this.status = defaults.status;
    	      this.userId = defaults.userId;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder roles(List<GetUsersUserRole> roles) {
            this.roles = Objects.requireNonNull(roles);
            return this;
        }
        public Builder roles(GetUsersUserRole... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public GetUsersUser build() {
            final var o = new GetUsersUser();
            o.creationDate = creationDate;
            o.description = description;
            o.roles = roles;
            o.status = status;
            o.userId = userId;
            o.username = username;
            return o;
        }
    }
}
