// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DedicatedServerUpdateState extends com.pulumi.resources.ResourceArgs {

    public static final DedicatedServerUpdateState Empty = new DedicatedServerUpdateState();

    /**
     * boot id of the server
     * 
     */
    @Import(name="bootId")
    private @Nullable Output<Integer> bootId;

    /**
     * @return boot id of the server
     * 
     */
    public Optional<Output<Integer>> bootId() {
        return Optional.ofNullable(this.bootId);
    }

    /**
     * Icmp monitoring state
     * 
     */
    @Import(name="monitoring")
    private @Nullable Output<Boolean> monitoring;

    /**
     * @return Icmp monitoring state
     * 
     */
    public Optional<Output<Boolean>> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }

    /**
     * The service_name of your dedicated server.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The service_name of your dedicated server.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * error, hacked, hackedBlocked, ok
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return error, hacked, hackedBlocked, ok
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private DedicatedServerUpdateState() {}

    private DedicatedServerUpdateState(DedicatedServerUpdateState $) {
        this.bootId = $.bootId;
        this.monitoring = $.monitoring;
        this.serviceName = $.serviceName;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DedicatedServerUpdateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DedicatedServerUpdateState $;

        public Builder() {
            $ = new DedicatedServerUpdateState();
        }

        public Builder(DedicatedServerUpdateState defaults) {
            $ = new DedicatedServerUpdateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootId boot id of the server
         * 
         * @return builder
         * 
         */
        public Builder bootId(@Nullable Output<Integer> bootId) {
            $.bootId = bootId;
            return this;
        }

        /**
         * @param bootId boot id of the server
         * 
         * @return builder
         * 
         */
        public Builder bootId(Integer bootId) {
            return bootId(Output.of(bootId));
        }

        /**
         * @param monitoring Icmp monitoring state
         * 
         * @return builder
         * 
         */
        public Builder monitoring(@Nullable Output<Boolean> monitoring) {
            $.monitoring = monitoring;
            return this;
        }

        /**
         * @param monitoring Icmp monitoring state
         * 
         * @return builder
         * 
         */
        public Builder monitoring(Boolean monitoring) {
            return monitoring(Output.of(monitoring));
        }

        /**
         * @param serviceName The service_name of your dedicated server.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The service_name of your dedicated server.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param state error, hacked, hackedBlocked, ok
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state error, hacked, hackedBlocked, ok
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public DedicatedServerUpdateState build() {
            return $;
        }
    }

}
