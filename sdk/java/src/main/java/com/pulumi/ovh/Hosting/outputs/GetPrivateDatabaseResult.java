// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.Hosting.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPrivateDatabaseResult {
    /**
     * @return Number of CPU on your private database
     * 
     */
    private Integer cpu;
    /**
     * @return Datacenter where this private database is located
     * 
     */
    private String datacenter;
    /**
     * @return Name displayed in customer panel for your private database
     * 
     */
    private String displayName;
    /**
     * @return Private database hostname
     * 
     */
    private String hostname;
    /**
     * @return Private database FTP hostname
     * 
     */
    private String hostnameFtp;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Infrastructure where service was stored
     * 
     */
    private String infrastructure;
    /**
     * @return Type of the private database offer
     * 
     */
    private String offer;
    /**
     * @return Private database service port
     * 
     */
    private Integer port;
    /**
     * @return Private database FTP port
     * 
     */
    private Integer portFtp;
    /**
     * @return Space allowed (in MB) on your private database
     * 
     */
    private Integer quotaSize;
    /**
     * @return Sapce used (in MB) on your private database
     * 
     */
    private Integer quotaUsed;
    /**
     * @return Amount of ram (in MB) on your private database
     * 
     */
    private Integer ram;
    /**
     * @return Private database server name
     * 
     */
    private String server;
    private String serviceName;
    /**
     * @return Private database state
     * 
     */
    private String state;
    private String type;
    /**
     * @return URN of the private database
     * 
     */
    private String urn;
    /**
     * @return Private database available versions
     * 
     */
    private String version;
    /**
     * @return Private database version label
     * 
     */
    private String versionLabel;
    /**
     * @return Private database version number
     * 
     */
    private Double versionNumber;

    private GetPrivateDatabaseResult() {}
    /**
     * @return Number of CPU on your private database
     * 
     */
    public Integer cpu() {
        return this.cpu;
    }
    /**
     * @return Datacenter where this private database is located
     * 
     */
    public String datacenter() {
        return this.datacenter;
    }
    /**
     * @return Name displayed in customer panel for your private database
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Private database hostname
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Private database FTP hostname
     * 
     */
    public String hostnameFtp() {
        return this.hostnameFtp;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Infrastructure where service was stored
     * 
     */
    public String infrastructure() {
        return this.infrastructure;
    }
    /**
     * @return Type of the private database offer
     * 
     */
    public String offer() {
        return this.offer;
    }
    /**
     * @return Private database service port
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Private database FTP port
     * 
     */
    public Integer portFtp() {
        return this.portFtp;
    }
    /**
     * @return Space allowed (in MB) on your private database
     * 
     */
    public Integer quotaSize() {
        return this.quotaSize;
    }
    /**
     * @return Sapce used (in MB) on your private database
     * 
     */
    public Integer quotaUsed() {
        return this.quotaUsed;
    }
    /**
     * @return Amount of ram (in MB) on your private database
     * 
     */
    public Integer ram() {
        return this.ram;
    }
    /**
     * @return Private database server name
     * 
     */
    public String server() {
        return this.server;
    }
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Private database state
     * 
     */
    public String state() {
        return this.state;
    }
    public String type() {
        return this.type;
    }
    /**
     * @return URN of the private database
     * 
     */
    public String urn() {
        return this.urn;
    }
    /**
     * @return Private database available versions
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return Private database version label
     * 
     */
    public String versionLabel() {
        return this.versionLabel;
    }
    /**
     * @return Private database version number
     * 
     */
    public Double versionNumber() {
        return this.versionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrivateDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer cpu;
        private String datacenter;
        private String displayName;
        private String hostname;
        private String hostnameFtp;
        private String id;
        private String infrastructure;
        private String offer;
        private Integer port;
        private Integer portFtp;
        private Integer quotaSize;
        private Integer quotaUsed;
        private Integer ram;
        private String server;
        private String serviceName;
        private String state;
        private String type;
        private String urn;
        private String version;
        private String versionLabel;
        private Double versionNumber;
        public Builder() {}
        public Builder(GetPrivateDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpu = defaults.cpu;
    	      this.datacenter = defaults.datacenter;
    	      this.displayName = defaults.displayName;
    	      this.hostname = defaults.hostname;
    	      this.hostnameFtp = defaults.hostnameFtp;
    	      this.id = defaults.id;
    	      this.infrastructure = defaults.infrastructure;
    	      this.offer = defaults.offer;
    	      this.port = defaults.port;
    	      this.portFtp = defaults.portFtp;
    	      this.quotaSize = defaults.quotaSize;
    	      this.quotaUsed = defaults.quotaUsed;
    	      this.ram = defaults.ram;
    	      this.server = defaults.server;
    	      this.serviceName = defaults.serviceName;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.urn = defaults.urn;
    	      this.version = defaults.version;
    	      this.versionLabel = defaults.versionLabel;
    	      this.versionNumber = defaults.versionNumber;
        }

        @CustomType.Setter
        public Builder cpu(Integer cpu) {
            this.cpu = Objects.requireNonNull(cpu);
            return this;
        }
        @CustomType.Setter
        public Builder datacenter(String datacenter) {
            this.datacenter = Objects.requireNonNull(datacenter);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }
        @CustomType.Setter
        public Builder hostnameFtp(String hostnameFtp) {
            this.hostnameFtp = Objects.requireNonNull(hostnameFtp);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder infrastructure(String infrastructure) {
            this.infrastructure = Objects.requireNonNull(infrastructure);
            return this;
        }
        @CustomType.Setter
        public Builder offer(String offer) {
            this.offer = Objects.requireNonNull(offer);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder portFtp(Integer portFtp) {
            this.portFtp = Objects.requireNonNull(portFtp);
            return this;
        }
        @CustomType.Setter
        public Builder quotaSize(Integer quotaSize) {
            this.quotaSize = Objects.requireNonNull(quotaSize);
            return this;
        }
        @CustomType.Setter
        public Builder quotaUsed(Integer quotaUsed) {
            this.quotaUsed = Objects.requireNonNull(quotaUsed);
            return this;
        }
        @CustomType.Setter
        public Builder ram(Integer ram) {
            this.ram = Objects.requireNonNull(ram);
            return this;
        }
        @CustomType.Setter
        public Builder server(String server) {
            this.server = Objects.requireNonNull(server);
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder urn(String urn) {
            this.urn = Objects.requireNonNull(urn);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        @CustomType.Setter
        public Builder versionLabel(String versionLabel) {
            this.versionLabel = Objects.requireNonNull(versionLabel);
            return this;
        }
        @CustomType.Setter
        public Builder versionNumber(Double versionNumber) {
            this.versionNumber = Objects.requireNonNull(versionNumber);
            return this;
        }
        public GetPrivateDatabaseResult build() {
            final var o = new GetPrivateDatabaseResult();
            o.cpu = cpu;
            o.datacenter = datacenter;
            o.displayName = displayName;
            o.hostname = hostname;
            o.hostnameFtp = hostnameFtp;
            o.id = id;
            o.infrastructure = infrastructure;
            o.offer = offer;
            o.port = port;
            o.portFtp = portFtp;
            o.quotaSize = quotaSize;
            o.quotaUsed = quotaUsed;
            o.ram = ram;
            o.server = server;
            o.serviceName = serviceName;
            o.state = state;
            o.type = type;
            o.urn = urn;
            o.version = version;
            o.versionLabel = versionLabel;
            o.versionNumber = versionNumber;
            return o;
        }
    }
}
