// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpLoadBalancingRefreshState extends com.pulumi.resources.ResourceArgs {

    public static final IpLoadBalancingRefreshState Empty = new IpLoadBalancingRefreshState();

    /**
     * List of values traccked to trigger refresh, used also to form implicit dependencies
     * 
     */
    @Import(name="keepers")
    private @Nullable Output<List<String>> keepers;

    /**
     * @return List of values traccked to trigger refresh, used also to form implicit dependencies
     * 
     */
    public Optional<Output<List<String>>> keepers() {
        return Optional.ofNullable(this.keepers);
    }

    /**
     * The internal name of your IP load balancing
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The internal name of your IP load balancing
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    private IpLoadBalancingRefreshState() {}

    private IpLoadBalancingRefreshState(IpLoadBalancingRefreshState $) {
        this.keepers = $.keepers;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpLoadBalancingRefreshState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpLoadBalancingRefreshState $;

        public Builder() {
            $ = new IpLoadBalancingRefreshState();
        }

        public Builder(IpLoadBalancingRefreshState defaults) {
            $ = new IpLoadBalancingRefreshState(Objects.requireNonNull(defaults));
        }

        /**
         * @param keepers List of values traccked to trigger refresh, used also to form implicit dependencies
         * 
         * @return builder
         * 
         */
        public Builder keepers(@Nullable Output<List<String>> keepers) {
            $.keepers = keepers;
            return this;
        }

        /**
         * @param keepers List of values traccked to trigger refresh, used also to form implicit dependencies
         * 
         * @return builder
         * 
         */
        public Builder keepers(List<String> keepers) {
            return keepers(Output.of(keepers));
        }

        /**
         * @param keepers List of values traccked to trigger refresh, used also to form implicit dependencies
         * 
         * @return builder
         * 
         */
        public Builder keepers(String... keepers) {
            return keepers(List.of(keepers));
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public IpLoadBalancingRefreshState build() {
            return $;
        }
    }

}
