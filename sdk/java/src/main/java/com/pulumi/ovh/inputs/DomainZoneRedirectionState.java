// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainZoneRedirectionState extends com.pulumi.resources.ResourceArgs {

    public static final DomainZoneRedirectionState Empty = new DomainZoneRedirectionState();

    /**
     * A description of this redirection
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of this redirection
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Keywords to describe this redirection
     * 
     */
    @Import(name="keywords")
    private @Nullable Output<String> keywords;

    /**
     * @return Keywords to describe this redirection
     * 
     */
    public Optional<Output<String>> keywords() {
        return Optional.ofNullable(this.keywords);
    }

    /**
     * The name of the redirection
     * 
     */
    @Import(name="subdomain")
    private @Nullable Output<String> subdomain;

    /**
     * @return The name of the redirection
     * 
     */
    public Optional<Output<String>> subdomain() {
        return Optional.ofNullable(this.subdomain);
    }

    /**
     * The value of the redirection
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return The value of the redirection
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * Title of this redirection
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Title of this redirection
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The type of the redirection, with values:
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the redirection, with values:
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The domain to add the redirection to
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The domain to add the redirection to
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private DomainZoneRedirectionState() {}

    private DomainZoneRedirectionState(DomainZoneRedirectionState $) {
        this.description = $.description;
        this.keywords = $.keywords;
        this.subdomain = $.subdomain;
        this.target = $.target;
        this.title = $.title;
        this.type = $.type;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainZoneRedirectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainZoneRedirectionState $;

        public Builder() {
            $ = new DomainZoneRedirectionState();
        }

        public Builder(DomainZoneRedirectionState defaults) {
            $ = new DomainZoneRedirectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of this redirection
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of this redirection
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param keywords Keywords to describe this redirection
         * 
         * @return builder
         * 
         */
        public Builder keywords(@Nullable Output<String> keywords) {
            $.keywords = keywords;
            return this;
        }

        /**
         * @param keywords Keywords to describe this redirection
         * 
         * @return builder
         * 
         */
        public Builder keywords(String keywords) {
            return keywords(Output.of(keywords));
        }

        /**
         * @param subdomain The name of the redirection
         * 
         * @return builder
         * 
         */
        public Builder subdomain(@Nullable Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        /**
         * @param subdomain The name of the redirection
         * 
         * @return builder
         * 
         */
        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        /**
         * @param target The value of the redirection
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The value of the redirection
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param title Title of this redirection
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title of this redirection
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param type The type of the redirection, with values:
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the redirection, with values:
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zone The domain to add the redirection to
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The domain to add the redirection to
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public DomainZoneRedirectionState build() {
            return $;
        }
    }

}
