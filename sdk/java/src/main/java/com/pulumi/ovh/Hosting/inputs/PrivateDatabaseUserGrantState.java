// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.Hosting.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrivateDatabaseUserGrantState extends com.pulumi.resources.ResourceArgs {

    public static final PrivateDatabaseUserGrantState Empty = new PrivateDatabaseUserGrantState();

    /**
     * Database name where add grant.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return Database name where add grant.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * Database name where add grant. Values can be:
     * - admin
     * - none
     * - ro
     * - rw
     * 
     */
    @Import(name="grant")
    private @Nullable Output<String> grant;

    /**
     * @return Database name where add grant. Values can be:
     * - admin
     * - none
     * - ro
     * - rw
     * 
     */
    public Optional<Output<String>> grant() {
        return Optional.ofNullable(this.grant);
    }

    /**
     * The internal name of your private database.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The internal name of your private database.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * User name used to connect on your databases.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return User name used to connect on your databases.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private PrivateDatabaseUserGrantState() {}

    private PrivateDatabaseUserGrantState(PrivateDatabaseUserGrantState $) {
        this.databaseName = $.databaseName;
        this.grant = $.grant;
        this.serviceName = $.serviceName;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateDatabaseUserGrantState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateDatabaseUserGrantState $;

        public Builder() {
            $ = new PrivateDatabaseUserGrantState();
        }

        public Builder(PrivateDatabaseUserGrantState defaults) {
            $ = new PrivateDatabaseUserGrantState(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName Database name where add grant.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Database name where add grant.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param grant Database name where add grant. Values can be:
         * - admin
         * - none
         * - ro
         * - rw
         * 
         * @return builder
         * 
         */
        public Builder grant(@Nullable Output<String> grant) {
            $.grant = grant;
            return this;
        }

        /**
         * @param grant Database name where add grant. Values can be:
         * - admin
         * - none
         * - ro
         * - rw
         * 
         * @return builder
         * 
         */
        public Builder grant(String grant) {
            return grant(Output.of(grant));
        }

        /**
         * @param serviceName The internal name of your private database.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal name of your private database.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param userName User name used to connect on your databases.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName User name used to connect on your databases.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public PrivateDatabaseUserGrantState build() {
            return $;
        }
    }

}
