// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MeInstallationTemplatePartitionSchemeHardwareRaidState extends com.pulumi.resources.ResourceArgs {

    public static final MeInstallationTemplatePartitionSchemeHardwareRaidState Empty = new MeInstallationTemplatePartitionSchemeHardwareRaidState();

    /**
     * Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
     * 
     */
    @Import(name="disks")
    private @Nullable Output<List<String>> disks;

    /**
     * @return Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
     * 
     */
    public Optional<Output<List<String>>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Hardware RAID name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Hardware RAID name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * name of this partitioning scheme
     * 
     */
    @Import(name="schemeName")
    private @Nullable Output<String> schemeName;

    /**
     * @return name of this partitioning scheme
     * 
     */
    public Optional<Output<String>> schemeName() {
        return Optional.ofNullable(this.schemeName);
    }

    /**
     * Specifies the creation order of the hardware RAID
     * 
     */
    @Import(name="step")
    private @Nullable Output<Integer> step;

    /**
     * @return Specifies the creation order of the hardware RAID
     * 
     */
    public Optional<Output<Integer>> step() {
        return Optional.ofNullable(this.step);
    }

    /**
     * Template name
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return Template name
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    private MeInstallationTemplatePartitionSchemeHardwareRaidState() {}

    private MeInstallationTemplatePartitionSchemeHardwareRaidState(MeInstallationTemplatePartitionSchemeHardwareRaidState $) {
        this.disks = $.disks;
        this.mode = $.mode;
        this.name = $.name;
        this.schemeName = $.schemeName;
        this.step = $.step;
        this.templateName = $.templateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MeInstallationTemplatePartitionSchemeHardwareRaidState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MeInstallationTemplatePartitionSchemeHardwareRaidState $;

        public Builder() {
            $ = new MeInstallationTemplatePartitionSchemeHardwareRaidState();
        }

        public Builder(MeInstallationTemplatePartitionSchemeHardwareRaidState defaults) {
            $ = new MeInstallationTemplatePartitionSchemeHardwareRaidState(Objects.requireNonNull(defaults));
        }

        /**
         * @param disks Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<List<String>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
         * 
         * @return builder
         * 
         */
        public Builder disks(List<String> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param disks Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
         * 
         * @return builder
         * 
         */
        public Builder disks(String... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param mode RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name Hardware RAID name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Hardware RAID name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schemeName name of this partitioning scheme
         * 
         * @return builder
         * 
         */
        public Builder schemeName(@Nullable Output<String> schemeName) {
            $.schemeName = schemeName;
            return this;
        }

        /**
         * @param schemeName name of this partitioning scheme
         * 
         * @return builder
         * 
         */
        public Builder schemeName(String schemeName) {
            return schemeName(Output.of(schemeName));
        }

        /**
         * @param step Specifies the creation order of the hardware RAID
         * 
         * @return builder
         * 
         */
        public Builder step(@Nullable Output<Integer> step) {
            $.step = step;
            return this;
        }

        /**
         * @param step Specifies the creation order of the hardware RAID
         * 
         * @return builder
         * 
         */
        public Builder step(Integer step) {
            return step(Output.of(step));
        }

        /**
         * @param templateName Template name
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName Template name
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        public MeInstallationTemplatePartitionSchemeHardwareRaidState build() {
            return $;
        }
    }

}
