// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.Me;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstallationTemplatePartitionSchemeHardwareRaidArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstallationTemplatePartitionSchemeHardwareRaidArgs Empty = new InstallationTemplatePartitionSchemeHardwareRaidArgs();

    /**
     * Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
     * 
     */
    @Import(name="disks", required=true)
    private Output<List<String>> disks;

    /**
     * @return Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
     * 
     */
    public Output<List<String>> disks() {
        return this.disks;
    }

    /**
     * RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * Hardware RAID name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Hardware RAID name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * name of this partitioning scheme
     * 
     */
    @Import(name="schemeName", required=true)
    private Output<String> schemeName;

    /**
     * @return name of this partitioning scheme
     * 
     */
    public Output<String> schemeName() {
        return this.schemeName;
    }

    /**
     * Specifies the creation order of the hardware RAID
     * 
     */
    @Import(name="step", required=true)
    private Output<Integer> step;

    /**
     * @return Specifies the creation order of the hardware RAID
     * 
     */
    public Output<Integer> step() {
        return this.step;
    }

    /**
     * Template name
     * 
     */
    @Import(name="templateName", required=true)
    private Output<String> templateName;

    /**
     * @return Template name
     * 
     */
    public Output<String> templateName() {
        return this.templateName;
    }

    private InstallationTemplatePartitionSchemeHardwareRaidArgs() {}

    private InstallationTemplatePartitionSchemeHardwareRaidArgs(InstallationTemplatePartitionSchemeHardwareRaidArgs $) {
        this.disks = $.disks;
        this.mode = $.mode;
        this.name = $.name;
        this.schemeName = $.schemeName;
        this.step = $.step;
        this.templateName = $.templateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstallationTemplatePartitionSchemeHardwareRaidArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstallationTemplatePartitionSchemeHardwareRaidArgs $;

        public Builder() {
            $ = new InstallationTemplatePartitionSchemeHardwareRaidArgs();
        }

        public Builder(InstallationTemplatePartitionSchemeHardwareRaidArgs defaults) {
            $ = new InstallationTemplatePartitionSchemeHardwareRaidArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disks Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
         * 
         * @return builder
         * 
         */
        public Builder disks(Output<List<String>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
         * 
         * @return builder
         * 
         */
        public Builder disks(List<String> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param disks Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
         * 
         * @return builder
         * 
         */
        public Builder disks(String... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param mode RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name Hardware RAID name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Hardware RAID name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schemeName name of this partitioning scheme
         * 
         * @return builder
         * 
         */
        public Builder schemeName(Output<String> schemeName) {
            $.schemeName = schemeName;
            return this;
        }

        /**
         * @param schemeName name of this partitioning scheme
         * 
         * @return builder
         * 
         */
        public Builder schemeName(String schemeName) {
            return schemeName(Output.of(schemeName));
        }

        /**
         * @param step Specifies the creation order of the hardware RAID
         * 
         * @return builder
         * 
         */
        public Builder step(Output<Integer> step) {
            $.step = step;
            return this;
        }

        /**
         * @param step Specifies the creation order of the hardware RAID
         * 
         * @return builder
         * 
         */
        public Builder step(Integer step) {
            return step(Output.of(step));
        }

        /**
         * @param templateName Template name
         * 
         * @return builder
         * 
         */
        public Builder templateName(Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName Template name
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        public InstallationTemplatePartitionSchemeHardwareRaidArgs build() {
            $.disks = Objects.requireNonNull($.disks, "expected parameter 'disks' to be non-null");
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            $.schemeName = Objects.requireNonNull($.schemeName, "expected parameter 'schemeName' to be non-null");
            $.step = Objects.requireNonNull($.step, "expected parameter 'step' to be non-null");
            $.templateName = Objects.requireNonNull($.templateName, "expected parameter 'templateName' to be non-null");
            return $;
        }
    }

}
