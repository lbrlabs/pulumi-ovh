// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpLoadBalancingHttpFarmServerState extends com.pulumi.resources.ResourceArgs {

    public static final IpLoadBalancingHttpFarmServerState Empty = new IpLoadBalancingHttpFarmServerState();

    /**
     * Address of the backend server (IP from either internal or OVH network)
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return Address of the backend server (IP from either internal or OVH network)
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * is it a backup server used in case of failure of all the non-backup backends
     * 
     */
    @Import(name="backup")
    private @Nullable Output<Boolean> backup;

    /**
     * @return is it a backup server used in case of failure of all the non-backup backends
     * 
     */
    public Optional<Output<Boolean>> backup() {
        return Optional.ofNullable(this.backup);
    }

    @Import(name="chain")
    private @Nullable Output<String> chain;

    public Optional<Output<String>> chain() {
        return Optional.ofNullable(this.chain);
    }

    /**
     * Value of the stickiness cookie used for this backend.
     * 
     */
    @Import(name="cookie")
    private @Nullable Output<String> cookie;

    /**
     * @return Value of the stickiness cookie used for this backend.
     * 
     */
    public Optional<Output<String>> cookie() {
        return Optional.ofNullable(this.cookie);
    }

    /**
     * Label for the server
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Label for the server
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * ID of the farm this server is attached to
     * 
     */
    @Import(name="farmId")
    private @Nullable Output<Integer> farmId;

    /**
     * @return ID of the farm this server is attached to
     * 
     */
    public Optional<Output<Integer>> farmId() {
        return Optional.ofNullable(this.farmId);
    }

    /**
     * Port that backend will respond on
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port that backend will respond on
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * defines if backend will be probed to determine health and keep as active in farm if healthy
     * 
     */
    @Import(name="probe")
    private @Nullable Output<Boolean> probe;

    /**
     * @return defines if backend will be probed to determine health and keep as active in farm if healthy
     * 
     */
    public Optional<Output<Boolean>> probe() {
        return Optional.ofNullable(this.probe);
    }

    /**
     * version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
     * 
     */
    @Import(name="proxyProtocolVersion")
    private @Nullable Output<String> proxyProtocolVersion;

    /**
     * @return version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
     * 
     */
    public Optional<Output<String>> proxyProtocolVersion() {
        return Optional.ofNullable(this.proxyProtocolVersion);
    }

    /**
     * The internal name of your IP load balancing
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The internal name of your IP load balancing
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * is the connection ciphered with SSL (TLS)
     * 
     */
    @Import(name="ssl")
    private @Nullable Output<Boolean> ssl;

    /**
     * @return is the connection ciphered with SSL (TLS)
     * 
     */
    public Optional<Output<Boolean>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    /**
     * backend status - `active` or `inactive`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return backend status - `active` or `inactive`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * used in loadbalancing algorithm
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return used in loadbalancing algorithm
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private IpLoadBalancingHttpFarmServerState() {}

    private IpLoadBalancingHttpFarmServerState(IpLoadBalancingHttpFarmServerState $) {
        this.address = $.address;
        this.backup = $.backup;
        this.chain = $.chain;
        this.cookie = $.cookie;
        this.displayName = $.displayName;
        this.farmId = $.farmId;
        this.port = $.port;
        this.probe = $.probe;
        this.proxyProtocolVersion = $.proxyProtocolVersion;
        this.serviceName = $.serviceName;
        this.ssl = $.ssl;
        this.status = $.status;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpLoadBalancingHttpFarmServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpLoadBalancingHttpFarmServerState $;

        public Builder() {
            $ = new IpLoadBalancingHttpFarmServerState();
        }

        public Builder(IpLoadBalancingHttpFarmServerState defaults) {
            $ = new IpLoadBalancingHttpFarmServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Address of the backend server (IP from either internal or OVH network)
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Address of the backend server (IP from either internal or OVH network)
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param backup is it a backup server used in case of failure of all the non-backup backends
         * 
         * @return builder
         * 
         */
        public Builder backup(@Nullable Output<Boolean> backup) {
            $.backup = backup;
            return this;
        }

        /**
         * @param backup is it a backup server used in case of failure of all the non-backup backends
         * 
         * @return builder
         * 
         */
        public Builder backup(Boolean backup) {
            return backup(Output.of(backup));
        }

        public Builder chain(@Nullable Output<String> chain) {
            $.chain = chain;
            return this;
        }

        public Builder chain(String chain) {
            return chain(Output.of(chain));
        }

        /**
         * @param cookie Value of the stickiness cookie used for this backend.
         * 
         * @return builder
         * 
         */
        public Builder cookie(@Nullable Output<String> cookie) {
            $.cookie = cookie;
            return this;
        }

        /**
         * @param cookie Value of the stickiness cookie used for this backend.
         * 
         * @return builder
         * 
         */
        public Builder cookie(String cookie) {
            return cookie(Output.of(cookie));
        }

        /**
         * @param displayName Label for the server
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Label for the server
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param farmId ID of the farm this server is attached to
         * 
         * @return builder
         * 
         */
        public Builder farmId(@Nullable Output<Integer> farmId) {
            $.farmId = farmId;
            return this;
        }

        /**
         * @param farmId ID of the farm this server is attached to
         * 
         * @return builder
         * 
         */
        public Builder farmId(Integer farmId) {
            return farmId(Output.of(farmId));
        }

        /**
         * @param port Port that backend will respond on
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port that backend will respond on
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param probe defines if backend will be probed to determine health and keep as active in farm if healthy
         * 
         * @return builder
         * 
         */
        public Builder probe(@Nullable Output<Boolean> probe) {
            $.probe = probe;
            return this;
        }

        /**
         * @param probe defines if backend will be probed to determine health and keep as active in farm if healthy
         * 
         * @return builder
         * 
         */
        public Builder probe(Boolean probe) {
            return probe(Output.of(probe));
        }

        /**
         * @param proxyProtocolVersion version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocolVersion(@Nullable Output<String> proxyProtocolVersion) {
            $.proxyProtocolVersion = proxyProtocolVersion;
            return this;
        }

        /**
         * @param proxyProtocolVersion version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocolVersion(String proxyProtocolVersion) {
            return proxyProtocolVersion(Output.of(proxyProtocolVersion));
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param ssl is the connection ciphered with SSL (TLS)
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Output<Boolean> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl is the connection ciphered with SSL (TLS)
         * 
         * @return builder
         * 
         */
        public Builder ssl(Boolean ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @param status backend status - `active` or `inactive`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status backend status - `active` or `inactive`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param weight used in loadbalancing algorithm
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight used in loadbalancing algorithm
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public IpLoadBalancingHttpFarmServerState build() {
            return $;
        }
    }

}
