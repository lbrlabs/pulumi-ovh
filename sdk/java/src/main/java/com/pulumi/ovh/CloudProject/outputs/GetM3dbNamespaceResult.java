// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.CloudProject.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetM3dbNamespaceResult {
    /**
     * @return See Argument Reference above.
     * 
     */
    private String clusterId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String name;
    /**
     * @return Resolution for an aggregated namespace.
     * 
     */
    private String resolution;
    /**
     * @return Controls how long we wait before expiring stale data.
     * 
     */
    private String retentionBlockDataExpirationDuration;
    /**
     * @return Controls how long to keep a block in memory before flushing to a fileset on disk.
     * 
     */
    private String retentionBlockSizeDuration;
    /**
     * @return Controls how far into the future writes to the namespace will be accepted.
     * 
     */
    private String retentionBufferFutureDuration;
    /**
     * @return Controls how far into the past writes to the namespace will be accepted.
     * 
     */
    private String retentionBufferPastDuration;
    /**
     * @return Controls the duration of time that M3DB will retain data for the namespace.
     * 
     */
    private String retentionPeriodDuration;
    /**
     * @return See Argument Reference above.
     * * `snapshot_enabled`- SDefines whether M3db will create snapshot files for this namespace.
     * 
     */
    private String serviceName;
    private Boolean snapshotEnabled;
    /**
     * @return Type of namespace.
     * 
     */
    private String type;
    /**
     * @return Defines whether M3DB will include writes to this namespace in the commit log.
     * 
     */
    private Boolean writesToCommitLogEnabled;

    private GetM3dbNamespaceResult() {}
    /**
     * @return See Argument Reference above.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Resolution for an aggregated namespace.
     * 
     */
    public String resolution() {
        return this.resolution;
    }
    /**
     * @return Controls how long we wait before expiring stale data.
     * 
     */
    public String retentionBlockDataExpirationDuration() {
        return this.retentionBlockDataExpirationDuration;
    }
    /**
     * @return Controls how long to keep a block in memory before flushing to a fileset on disk.
     * 
     */
    public String retentionBlockSizeDuration() {
        return this.retentionBlockSizeDuration;
    }
    /**
     * @return Controls how far into the future writes to the namespace will be accepted.
     * 
     */
    public String retentionBufferFutureDuration() {
        return this.retentionBufferFutureDuration;
    }
    /**
     * @return Controls how far into the past writes to the namespace will be accepted.
     * 
     */
    public String retentionBufferPastDuration() {
        return this.retentionBufferPastDuration;
    }
    /**
     * @return Controls the duration of time that M3DB will retain data for the namespace.
     * 
     */
    public String retentionPeriodDuration() {
        return this.retentionPeriodDuration;
    }
    /**
     * @return See Argument Reference above.
     * * `snapshot_enabled`- SDefines whether M3db will create snapshot files for this namespace.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    public Boolean snapshotEnabled() {
        return this.snapshotEnabled;
    }
    /**
     * @return Type of namespace.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Defines whether M3DB will include writes to this namespace in the commit log.
     * 
     */
    public Boolean writesToCommitLogEnabled() {
        return this.writesToCommitLogEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetM3dbNamespaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterId;
        private String id;
        private String name;
        private String resolution;
        private String retentionBlockDataExpirationDuration;
        private String retentionBlockSizeDuration;
        private String retentionBufferFutureDuration;
        private String retentionBufferPastDuration;
        private String retentionPeriodDuration;
        private String serviceName;
        private Boolean snapshotEnabled;
        private String type;
        private Boolean writesToCommitLogEnabled;
        public Builder() {}
        public Builder(GetM3dbNamespaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.resolution = defaults.resolution;
    	      this.retentionBlockDataExpirationDuration = defaults.retentionBlockDataExpirationDuration;
    	      this.retentionBlockSizeDuration = defaults.retentionBlockSizeDuration;
    	      this.retentionBufferFutureDuration = defaults.retentionBufferFutureDuration;
    	      this.retentionBufferPastDuration = defaults.retentionBufferPastDuration;
    	      this.retentionPeriodDuration = defaults.retentionPeriodDuration;
    	      this.serviceName = defaults.serviceName;
    	      this.snapshotEnabled = defaults.snapshotEnabled;
    	      this.type = defaults.type;
    	      this.writesToCommitLogEnabled = defaults.writesToCommitLogEnabled;
        }

        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder resolution(String resolution) {
            this.resolution = Objects.requireNonNull(resolution);
            return this;
        }
        @CustomType.Setter
        public Builder retentionBlockDataExpirationDuration(String retentionBlockDataExpirationDuration) {
            this.retentionBlockDataExpirationDuration = Objects.requireNonNull(retentionBlockDataExpirationDuration);
            return this;
        }
        @CustomType.Setter
        public Builder retentionBlockSizeDuration(String retentionBlockSizeDuration) {
            this.retentionBlockSizeDuration = Objects.requireNonNull(retentionBlockSizeDuration);
            return this;
        }
        @CustomType.Setter
        public Builder retentionBufferFutureDuration(String retentionBufferFutureDuration) {
            this.retentionBufferFutureDuration = Objects.requireNonNull(retentionBufferFutureDuration);
            return this;
        }
        @CustomType.Setter
        public Builder retentionBufferPastDuration(String retentionBufferPastDuration) {
            this.retentionBufferPastDuration = Objects.requireNonNull(retentionBufferPastDuration);
            return this;
        }
        @CustomType.Setter
        public Builder retentionPeriodDuration(String retentionPeriodDuration) {
            this.retentionPeriodDuration = Objects.requireNonNull(retentionPeriodDuration);
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotEnabled(Boolean snapshotEnabled) {
            this.snapshotEnabled = Objects.requireNonNull(snapshotEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder writesToCommitLogEnabled(Boolean writesToCommitLogEnabled) {
            this.writesToCommitLogEnabled = Objects.requireNonNull(writesToCommitLogEnabled);
            return this;
        }
        public GetM3dbNamespaceResult build() {
            final var o = new GetM3dbNamespaceResult();
            o.clusterId = clusterId;
            o.id = id;
            o.name = name;
            o.resolution = resolution;
            o.retentionBlockDataExpirationDuration = retentionBlockDataExpirationDuration;
            o.retentionBlockSizeDuration = retentionBlockSizeDuration;
            o.retentionBufferFutureDuration = retentionBufferFutureDuration;
            o.retentionBufferPastDuration = retentionBufferPastDuration;
            o.retentionPeriodDuration = retentionPeriodDuration;
            o.serviceName = serviceName;
            o.snapshotEnabled = snapshotEnabled;
            o.type = type;
            o.writesToCommitLogEnabled = writesToCommitLogEnabled;
            return o;
        }
    }
}
