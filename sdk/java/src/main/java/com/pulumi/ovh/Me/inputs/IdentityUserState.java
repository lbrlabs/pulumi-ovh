// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.Me.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentityUserState extends com.pulumi.resources.ResourceArgs {

    public static final IdentityUserState Empty = new IdentityUserState();

    /**
     * Creation date of this user.
     * 
     */
    @Import(name="creation")
    private @Nullable Output<String> creation;

    /**
     * @return Creation date of this user.
     * 
     */
    public Optional<Output<String>> creation() {
        return Optional.ofNullable(this.creation);
    }

    /**
     * User description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User&#39;s email.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return User&#39;s email.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * User&#39;s group.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return User&#39;s group.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * Last update of this user.
     * 
     */
    @Import(name="lastUpdate")
    private @Nullable Output<String> lastUpdate;

    /**
     * @return Last update of this user.
     * 
     */
    public Optional<Output<String>> lastUpdate() {
        return Optional.ofNullable(this.lastUpdate);
    }

    /**
     * User&#39;s login suffix.
     * 
     */
    @Import(name="login")
    private @Nullable Output<String> login;

    /**
     * @return User&#39;s login suffix.
     * 
     */
    public Optional<Output<String>> login() {
        return Optional.ofNullable(this.login);
    }

    /**
     * User&#39;s password.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return User&#39;s password.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * When the user changed his password for the last time.
     * 
     */
    @Import(name="passwordLastUpdate")
    private @Nullable Output<String> passwordLastUpdate;

    /**
     * @return When the user changed his password for the last time.
     * 
     */
    public Optional<Output<String>> passwordLastUpdate() {
        return Optional.ofNullable(this.passwordLastUpdate);
    }

    /**
     * Current user&#39;s status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Current user&#39;s status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * URN of the user, used when writing IAM policies
     * 
     */
    @Import(name="urn")
    private @Nullable Output<String> urn;

    /**
     * @return URN of the user, used when writing IAM policies
     * 
     */
    public Optional<Output<String>> urn() {
        return Optional.ofNullable(this.urn);
    }

    private IdentityUserState() {}

    private IdentityUserState(IdentityUserState $) {
        this.creation = $.creation;
        this.description = $.description;
        this.email = $.email;
        this.group = $.group;
        this.lastUpdate = $.lastUpdate;
        this.login = $.login;
        this.password = $.password;
        this.passwordLastUpdate = $.passwordLastUpdate;
        this.status = $.status;
        this.urn = $.urn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentityUserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentityUserState $;

        public Builder() {
            $ = new IdentityUserState();
        }

        public Builder(IdentityUserState defaults) {
            $ = new IdentityUserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param creation Creation date of this user.
         * 
         * @return builder
         * 
         */
        public Builder creation(@Nullable Output<String> creation) {
            $.creation = creation;
            return this;
        }

        /**
         * @param creation Creation date of this user.
         * 
         * @return builder
         * 
         */
        public Builder creation(String creation) {
            return creation(Output.of(creation));
        }

        /**
         * @param description User description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param email User&#39;s email.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email User&#39;s email.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param group User&#39;s group.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group User&#39;s group.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param lastUpdate Last update of this user.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdate(@Nullable Output<String> lastUpdate) {
            $.lastUpdate = lastUpdate;
            return this;
        }

        /**
         * @param lastUpdate Last update of this user.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdate(String lastUpdate) {
            return lastUpdate(Output.of(lastUpdate));
        }

        /**
         * @param login User&#39;s login suffix.
         * 
         * @return builder
         * 
         */
        public Builder login(@Nullable Output<String> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login User&#39;s login suffix.
         * 
         * @return builder
         * 
         */
        public Builder login(String login) {
            return login(Output.of(login));
        }

        /**
         * @param password User&#39;s password.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password User&#39;s password.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordLastUpdate When the user changed his password for the last time.
         * 
         * @return builder
         * 
         */
        public Builder passwordLastUpdate(@Nullable Output<String> passwordLastUpdate) {
            $.passwordLastUpdate = passwordLastUpdate;
            return this;
        }

        /**
         * @param passwordLastUpdate When the user changed his password for the last time.
         * 
         * @return builder
         * 
         */
        public Builder passwordLastUpdate(String passwordLastUpdate) {
            return passwordLastUpdate(Output.of(passwordLastUpdate));
        }

        /**
         * @param status Current user&#39;s status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Current user&#39;s status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param urn URN of the user, used when writing IAM policies
         * 
         * @return builder
         * 
         */
        public Builder urn(@Nullable Output<String> urn) {
            $.urn = urn;
            return this;
        }

        /**
         * @param urn URN of the user, used when writing IAM policies
         * 
         * @return builder
         * 
         */
        public Builder urn(String urn) {
            return urn(Output.of(urn));
        }

        public IdentityUserState build() {
            return $;
        }
    }

}
