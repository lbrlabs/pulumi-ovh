// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.Dedicated.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNasHAResult {
    /**
     * @return True, if partition creation is allowed on this HA-NAS
     * 
     */
    private Boolean canCreatePartition;
    /**
     * @return The name you give to the HA-NAS
     * 
     */
    private String customName;
    /**
     * @return area of HA-NAS
     * 
     */
    private String datacenter;
    /**
     * @return the disk type of the HA-NAS. Possible values are: `hdd`, `ssd`, `nvme`
     * 
     */
    private String diskType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Access IP of HA-NAS
     * 
     */
    private String ip;
    /**
     * @return Send an email to customer if any issue is detected
     * 
     */
    private Boolean monitored;
    /**
     * @return The storage service name
     * 
     */
    private String serviceName;
    /**
     * @return percentage of HA-NAS space used in %
     * 
     */
    private Double zpoolCapacity;
    /**
     * @return the size of the HA-NAS in GB
     * 
     */
    private Double zpoolSize;

    private GetNasHAResult() {}
    /**
     * @return True, if partition creation is allowed on this HA-NAS
     * 
     */
    public Boolean canCreatePartition() {
        return this.canCreatePartition;
    }
    /**
     * @return The name you give to the HA-NAS
     * 
     */
    public String customName() {
        return this.customName;
    }
    /**
     * @return area of HA-NAS
     * 
     */
    public String datacenter() {
        return this.datacenter;
    }
    /**
     * @return the disk type of the HA-NAS. Possible values are: `hdd`, `ssd`, `nvme`
     * 
     */
    public String diskType() {
        return this.diskType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Access IP of HA-NAS
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return Send an email to customer if any issue is detected
     * 
     */
    public Boolean monitored() {
        return this.monitored;
    }
    /**
     * @return The storage service name
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return percentage of HA-NAS space used in %
     * 
     */
    public Double zpoolCapacity() {
        return this.zpoolCapacity;
    }
    /**
     * @return the size of the HA-NAS in GB
     * 
     */
    public Double zpoolSize() {
        return this.zpoolSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNasHAResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean canCreatePartition;
        private String customName;
        private String datacenter;
        private String diskType;
        private String id;
        private String ip;
        private Boolean monitored;
        private String serviceName;
        private Double zpoolCapacity;
        private Double zpoolSize;
        public Builder() {}
        public Builder(GetNasHAResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canCreatePartition = defaults.canCreatePartition;
    	      this.customName = defaults.customName;
    	      this.datacenter = defaults.datacenter;
    	      this.diskType = defaults.diskType;
    	      this.id = defaults.id;
    	      this.ip = defaults.ip;
    	      this.monitored = defaults.monitored;
    	      this.serviceName = defaults.serviceName;
    	      this.zpoolCapacity = defaults.zpoolCapacity;
    	      this.zpoolSize = defaults.zpoolSize;
        }

        @CustomType.Setter
        public Builder canCreatePartition(Boolean canCreatePartition) {
            this.canCreatePartition = Objects.requireNonNull(canCreatePartition);
            return this;
        }
        @CustomType.Setter
        public Builder customName(String customName) {
            this.customName = Objects.requireNonNull(customName);
            return this;
        }
        @CustomType.Setter
        public Builder datacenter(String datacenter) {
            this.datacenter = Objects.requireNonNull(datacenter);
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            this.diskType = Objects.requireNonNull(diskType);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            this.ip = Objects.requireNonNull(ip);
            return this;
        }
        @CustomType.Setter
        public Builder monitored(Boolean monitored) {
            this.monitored = Objects.requireNonNull(monitored);
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        @CustomType.Setter
        public Builder zpoolCapacity(Double zpoolCapacity) {
            this.zpoolCapacity = Objects.requireNonNull(zpoolCapacity);
            return this;
        }
        @CustomType.Setter
        public Builder zpoolSize(Double zpoolSize) {
            this.zpoolSize = Objects.requireNonNull(zpoolSize);
            return this;
        }
        public GetNasHAResult build() {
            final var o = new GetNasHAResult();
            o.canCreatePartition = canCreatePartition;
            o.customName = customName;
            o.datacenter = datacenter;
            o.diskType = diskType;
            o.id = id;
            o.ip = ip;
            o.monitored = monitored;
            o.serviceName = serviceName;
            o.zpoolCapacity = zpoolCapacity;
            o.zpoolSize = zpoolSize;
            return o;
        }
    }
}
