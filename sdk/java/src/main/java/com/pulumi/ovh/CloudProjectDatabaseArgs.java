// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ovh.inputs.CloudProjectDatabaseNodeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudProjectDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudProjectDatabaseArgs Empty = new CloudProjectDatabaseArgs();

    /**
     * Small description of the database service.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Small description of the database service.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The database engine you want to deploy. To get a full list of available engine visit.
     * [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
     * 
     */
    @Import(name="engine", required=true)
    private Output<String> engine;

    /**
     * @return The database engine you want to deploy. To get a full list of available engine visit.
     * [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
     * 
     */
    public Output<String> engine() {
        return this.engine;
    }

    /**
     * a valid OVH public cloud database flavor name in which the nodes will be started.
     * Ex: &#34;db1-7&#34;. Changing this value upgrade the nodes with the new flavor.
     * You can find the list of flavor names: https://www.ovhcloud.com/fr/public-cloud/prices/
     * 
     */
    @Import(name="flavor", required=true)
    private Output<String> flavor;

    /**
     * @return a valid OVH public cloud database flavor name in which the nodes will be started.
     * Ex: &#34;db1-7&#34;. Changing this value upgrade the nodes with the new flavor.
     * You can find the list of flavor names: https://www.ovhcloud.com/fr/public-cloud/prices/
     * 
     */
    public Output<String> flavor() {
        return this.flavor;
    }

    /**
     * List of nodes object.
     * Multi region cluster are not yet available, all node should be identical.
     * 
     */
    @Import(name="nodes", required=true)
    private Output<List<CloudProjectDatabaseNodeArgs>> nodes;

    /**
     * @return List of nodes object.
     * Multi region cluster are not yet available, all node should be identical.
     * 
     */
    public Output<List<CloudProjectDatabaseNodeArgs>> nodes() {
        return this.nodes;
    }

    /**
     * List of nodes object.
     * Enum: &#34;esential&#34;, &#34;business&#34;, &#34;enterprise&#34;.
     * 
     */
    @Import(name="plan", required=true)
    private Output<String> plan;

    /**
     * @return List of nodes object.
     * Enum: &#34;esential&#34;, &#34;business&#34;, &#34;enterprise&#34;.
     * 
     */
    public Output<String> plan() {
        return this.plan;
    }

    /**
     * The id of the public cloud project. If omitted,
     * the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The id of the public cloud project. If omitted,
     * the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * The version of the engine in which the service should be deployed
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return The version of the engine in which the service should be deployed
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private CloudProjectDatabaseArgs() {}

    private CloudProjectDatabaseArgs(CloudProjectDatabaseArgs $) {
        this.description = $.description;
        this.engine = $.engine;
        this.flavor = $.flavor;
        this.nodes = $.nodes;
        this.plan = $.plan;
        this.serviceName = $.serviceName;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudProjectDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudProjectDatabaseArgs $;

        public Builder() {
            $ = new CloudProjectDatabaseArgs();
        }

        public Builder(CloudProjectDatabaseArgs defaults) {
            $ = new CloudProjectDatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Small description of the database service.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Small description of the database service.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param engine The database engine you want to deploy. To get a full list of available engine visit.
         * [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
         * 
         * @return builder
         * 
         */
        public Builder engine(Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine The database engine you want to deploy. To get a full list of available engine visit.
         * [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param flavor a valid OVH public cloud database flavor name in which the nodes will be started.
         * Ex: &#34;db1-7&#34;. Changing this value upgrade the nodes with the new flavor.
         * You can find the list of flavor names: https://www.ovhcloud.com/fr/public-cloud/prices/
         * 
         * @return builder
         * 
         */
        public Builder flavor(Output<String> flavor) {
            $.flavor = flavor;
            return this;
        }

        /**
         * @param flavor a valid OVH public cloud database flavor name in which the nodes will be started.
         * Ex: &#34;db1-7&#34;. Changing this value upgrade the nodes with the new flavor.
         * You can find the list of flavor names: https://www.ovhcloud.com/fr/public-cloud/prices/
         * 
         * @return builder
         * 
         */
        public Builder flavor(String flavor) {
            return flavor(Output.of(flavor));
        }

        /**
         * @param nodes List of nodes object.
         * Multi region cluster are not yet available, all node should be identical.
         * 
         * @return builder
         * 
         */
        public Builder nodes(Output<List<CloudProjectDatabaseNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes List of nodes object.
         * Multi region cluster are not yet available, all node should be identical.
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<CloudProjectDatabaseNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes List of nodes object.
         * Multi region cluster are not yet available, all node should be identical.
         * 
         * @return builder
         * 
         */
        public Builder nodes(CloudProjectDatabaseNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param plan List of nodes object.
         * Enum: &#34;esential&#34;, &#34;business&#34;, &#34;enterprise&#34;.
         * 
         * @return builder
         * 
         */
        public Builder plan(Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan List of nodes object.
         * Enum: &#34;esential&#34;, &#34;business&#34;, &#34;enterprise&#34;.
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted,
         * the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted,
         * the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param version The version of the engine in which the service should be deployed
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the engine in which the service should be deployed
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public CloudProjectDatabaseArgs build() {
            $.engine = Objects.requireNonNull($.engine, "expected parameter 'engine' to be non-null");
            $.flavor = Objects.requireNonNull($.flavor, "expected parameter 'flavor' to be non-null");
            $.nodes = Objects.requireNonNull($.nodes, "expected parameter 'nodes' to be non-null");
            $.plan = Objects.requireNonNull($.plan, "expected parameter 'plan' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
