// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MeIpxeScriptState extends com.pulumi.resources.ResourceArgs {

    public static final MeIpxeScriptState Empty = new MeIpxeScriptState();

    /**
     * For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a fake description (&#39;$name auto description&#39;) is passed at creation time.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a fake description (&#39;$name auto description&#39;) is passed at creation time.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the IPXE Script.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the IPXE Script.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The content of the script.
     * 
     */
    @Import(name="script")
    private @Nullable Output<String> script;

    /**
     * @return The content of the script.
     * 
     */
    public Optional<Output<String>> script() {
        return Optional.ofNullable(this.script);
    }

    private MeIpxeScriptState() {}

    private MeIpxeScriptState(MeIpxeScriptState $) {
        this.description = $.description;
        this.name = $.name;
        this.script = $.script;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MeIpxeScriptState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MeIpxeScriptState $;

        public Builder() {
            $ = new MeIpxeScriptState();
        }

        public Builder(MeIpxeScriptState defaults) {
            $ = new MeIpxeScriptState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a fake description (&#39;$name auto description&#39;) is passed at creation time.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a fake description (&#39;$name auto description&#39;) is passed at creation time.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the IPXE Script.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the IPXE Script.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param script The content of the script.
         * 
         * @return builder
         * 
         */
        public Builder script(@Nullable Output<String> script) {
            $.script = script;
            return this;
        }

        /**
         * @param script The content of the script.
         * 
         * @return builder
         * 
         */
        public Builder script(String script) {
            return script(Output.of(script));
        }

        public MeIpxeScriptState build() {
            return $;
        }
    }

}
