// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.Hosting;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrivateDatabaseAllowlistArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrivateDatabaseAllowlistArgs Empty = new PrivateDatabaseAllowlistArgs();

    /**
     * The whitelisted IP in your instance.
     * 
     */
    @Import(name="ip", required=true)
    private Output<String> ip;

    /**
     * @return The whitelisted IP in your instance.
     * 
     */
    public Output<String> ip() {
        return this.ip;
    }

    /**
     * Custom name for your Whitelisted IP.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Custom name for your Whitelisted IP.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Authorize this IP to access service port. Values can be `true` or `false`
     * 
     */
    @Import(name="service", required=true)
    private Output<Boolean> service;

    /**
     * @return Authorize this IP to access service port. Values can be `true` or `false`
     * 
     */
    public Output<Boolean> service() {
        return this.service;
    }

    /**
     * The internal name of your private database.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The internal name of your private database.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Authorize this IP to access SFTP port. Values can be `true` or `false`
     * 
     */
    @Import(name="sftp", required=true)
    private Output<Boolean> sftp;

    /**
     * @return Authorize this IP to access SFTP port. Values can be `true` or `false`
     * 
     */
    public Output<Boolean> sftp() {
        return this.sftp;
    }

    private PrivateDatabaseAllowlistArgs() {}

    private PrivateDatabaseAllowlistArgs(PrivateDatabaseAllowlistArgs $) {
        this.ip = $.ip;
        this.name = $.name;
        this.service = $.service;
        this.serviceName = $.serviceName;
        this.sftp = $.sftp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateDatabaseAllowlistArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateDatabaseAllowlistArgs $;

        public Builder() {
            $ = new PrivateDatabaseAllowlistArgs();
        }

        public Builder(PrivateDatabaseAllowlistArgs defaults) {
            $ = new PrivateDatabaseAllowlistArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ip The whitelisted IP in your instance.
         * 
         * @return builder
         * 
         */
        public Builder ip(Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip The whitelisted IP in your instance.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param name Custom name for your Whitelisted IP.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Custom name for your Whitelisted IP.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param service Authorize this IP to access service port. Values can be `true` or `false`
         * 
         * @return builder
         * 
         */
        public Builder service(Output<Boolean> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Authorize this IP to access service port. Values can be `true` or `false`
         * 
         * @return builder
         * 
         */
        public Builder service(Boolean service) {
            return service(Output.of(service));
        }

        /**
         * @param serviceName The internal name of your private database.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal name of your private database.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param sftp Authorize this IP to access SFTP port. Values can be `true` or `false`
         * 
         * @return builder
         * 
         */
        public Builder sftp(Output<Boolean> sftp) {
            $.sftp = sftp;
            return this;
        }

        /**
         * @param sftp Authorize this IP to access SFTP port. Values can be `true` or `false`
         * 
         * @return builder
         * 
         */
        public Builder sftp(Boolean sftp) {
            return sftp(Output.of(sftp));
        }

        public PrivateDatabaseAllowlistArgs build() {
            $.ip = Objects.requireNonNull($.ip, "expected parameter 'ip' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.sftp = Objects.requireNonNull($.sftp, "expected parameter 'sftp' to be non-null");
            return $;
        }
    }

}
