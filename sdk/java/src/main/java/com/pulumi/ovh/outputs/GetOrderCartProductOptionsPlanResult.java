// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.ovh.outputs.GetOrderCartProductOptionsPlanPrice;
import com.pulumi.ovh.outputs.GetOrderCartProductOptionsPlanSelectedPrice;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOrderCartProductOptionsPlanResult {
    private String cartId;
    private @Nullable String catalogName;
    /**
     * @return Define if options of this family are exclusive with each other
     * 
     */
    private Boolean exclusive;
    /**
     * @return Option family
     * 
     */
    private String family;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Define if an option of this family is mandatory
     * 
     */
    private Boolean mandatory;
    private String optionsPlanCode;
    /**
     * @return Product offer identifier
     * 
     */
    private String planCode;
    private String priceCapacity;
    /**
     * @return Prices of the product offer
     * 
     */
    private List<GetOrderCartProductOptionsPlanPrice> prices;
    private String product;
    /**
     * @return Name of the product
     * 
     */
    private String productName;
    /**
     * @return Product type
     * 
     */
    private String productType;
    /**
     * @return Selected Price according to capacity
     * 
     */
    private List<GetOrderCartProductOptionsPlanSelectedPrice> selectedPrices;

    private GetOrderCartProductOptionsPlanResult() {}
    public String cartId() {
        return this.cartId;
    }
    public Optional<String> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }
    /**
     * @return Define if options of this family are exclusive with each other
     * 
     */
    public Boolean exclusive() {
        return this.exclusive;
    }
    /**
     * @return Option family
     * 
     */
    public String family() {
        return this.family;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Define if an option of this family is mandatory
     * 
     */
    public Boolean mandatory() {
        return this.mandatory;
    }
    public String optionsPlanCode() {
        return this.optionsPlanCode;
    }
    /**
     * @return Product offer identifier
     * 
     */
    public String planCode() {
        return this.planCode;
    }
    public String priceCapacity() {
        return this.priceCapacity;
    }
    /**
     * @return Prices of the product offer
     * 
     */
    public List<GetOrderCartProductOptionsPlanPrice> prices() {
        return this.prices;
    }
    public String product() {
        return this.product;
    }
    /**
     * @return Name of the product
     * 
     */
    public String productName() {
        return this.productName;
    }
    /**
     * @return Product type
     * 
     */
    public String productType() {
        return this.productType;
    }
    /**
     * @return Selected Price according to capacity
     * 
     */
    public List<GetOrderCartProductOptionsPlanSelectedPrice> selectedPrices() {
        return this.selectedPrices;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrderCartProductOptionsPlanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cartId;
        private @Nullable String catalogName;
        private Boolean exclusive;
        private String family;
        private String id;
        private Boolean mandatory;
        private String optionsPlanCode;
        private String planCode;
        private String priceCapacity;
        private List<GetOrderCartProductOptionsPlanPrice> prices;
        private String product;
        private String productName;
        private String productType;
        private List<GetOrderCartProductOptionsPlanSelectedPrice> selectedPrices;
        public Builder() {}
        public Builder(GetOrderCartProductOptionsPlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cartId = defaults.cartId;
    	      this.catalogName = defaults.catalogName;
    	      this.exclusive = defaults.exclusive;
    	      this.family = defaults.family;
    	      this.id = defaults.id;
    	      this.mandatory = defaults.mandatory;
    	      this.optionsPlanCode = defaults.optionsPlanCode;
    	      this.planCode = defaults.planCode;
    	      this.priceCapacity = defaults.priceCapacity;
    	      this.prices = defaults.prices;
    	      this.product = defaults.product;
    	      this.productName = defaults.productName;
    	      this.productType = defaults.productType;
    	      this.selectedPrices = defaults.selectedPrices;
        }

        @CustomType.Setter
        public Builder cartId(String cartId) {
            this.cartId = Objects.requireNonNull(cartId);
            return this;
        }
        @CustomType.Setter
        public Builder catalogName(@Nullable String catalogName) {
            this.catalogName = catalogName;
            return this;
        }
        @CustomType.Setter
        public Builder exclusive(Boolean exclusive) {
            this.exclusive = Objects.requireNonNull(exclusive);
            return this;
        }
        @CustomType.Setter
        public Builder family(String family) {
            this.family = Objects.requireNonNull(family);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder mandatory(Boolean mandatory) {
            this.mandatory = Objects.requireNonNull(mandatory);
            return this;
        }
        @CustomType.Setter
        public Builder optionsPlanCode(String optionsPlanCode) {
            this.optionsPlanCode = Objects.requireNonNull(optionsPlanCode);
            return this;
        }
        @CustomType.Setter
        public Builder planCode(String planCode) {
            this.planCode = Objects.requireNonNull(planCode);
            return this;
        }
        @CustomType.Setter
        public Builder priceCapacity(String priceCapacity) {
            this.priceCapacity = Objects.requireNonNull(priceCapacity);
            return this;
        }
        @CustomType.Setter
        public Builder prices(List<GetOrderCartProductOptionsPlanPrice> prices) {
            this.prices = Objects.requireNonNull(prices);
            return this;
        }
        public Builder prices(GetOrderCartProductOptionsPlanPrice... prices) {
            return prices(List.of(prices));
        }
        @CustomType.Setter
        public Builder product(String product) {
            this.product = Objects.requireNonNull(product);
            return this;
        }
        @CustomType.Setter
        public Builder productName(String productName) {
            this.productName = Objects.requireNonNull(productName);
            return this;
        }
        @CustomType.Setter
        public Builder productType(String productType) {
            this.productType = Objects.requireNonNull(productType);
            return this;
        }
        @CustomType.Setter
        public Builder selectedPrices(List<GetOrderCartProductOptionsPlanSelectedPrice> selectedPrices) {
            this.selectedPrices = Objects.requireNonNull(selectedPrices);
            return this;
        }
        public Builder selectedPrices(GetOrderCartProductOptionsPlanSelectedPrice... selectedPrices) {
            return selectedPrices(List.of(selectedPrices));
        }
        public GetOrderCartProductOptionsPlanResult build() {
            final var o = new GetOrderCartProductOptionsPlanResult();
            o.cartId = cartId;
            o.catalogName = catalogName;
            o.exclusive = exclusive;
            o.family = family;
            o.id = id;
            o.mandatory = mandatory;
            o.optionsPlanCode = optionsPlanCode;
            o.planCode = planCode;
            o.priceCapacity = priceCapacity;
            o.prices = prices;
            o.product = product;
            o.productName = productName;
            o.productType = productType;
            o.selectedPrices = selectedPrices;
            return o;
        }
    }
}
