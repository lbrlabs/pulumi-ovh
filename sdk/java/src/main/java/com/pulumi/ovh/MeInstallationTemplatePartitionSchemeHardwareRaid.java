// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ovh.MeInstallationTemplatePartitionSchemeHardwareRaidArgs;
import com.pulumi.ovh.Utilities;
import com.pulumi.ovh.inputs.MeInstallationTemplatePartitionSchemeHardwareRaidState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Use this resource to create a hardware raid group in the partition scheme of a custom installation template available for dedicated servers.
 * 
 * ## Import
 * 
 * Use the fake id format to import the resource `template_name/scheme_name/name`.
 * 
 */
@ResourceType(type="ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid")
public class MeInstallationTemplatePartitionSchemeHardwareRaid extends com.pulumi.resources.CustomResource {
    /**
     * Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
     * 
     */
    @Export(name="disks", type=List.class, parameters={String.class})
    private Output<List<String>> disks;

    /**
     * @return Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
     * 
     */
    public Output<List<String>> disks() {
        return this.disks;
    }
    /**
     * RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
     * 
     */
    @Export(name="mode", type=String.class, parameters={})
    private Output<String> mode;

    /**
     * @return RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }
    /**
     * Hardware RAID name
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Hardware RAID name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * name of this partitioning scheme
     * 
     */
    @Export(name="schemeName", type=String.class, parameters={})
    private Output<String> schemeName;

    /**
     * @return name of this partitioning scheme
     * 
     */
    public Output<String> schemeName() {
        return this.schemeName;
    }
    /**
     * Specifies the creation order of the hardware RAID
     * 
     */
    @Export(name="step", type=Integer.class, parameters={})
    private Output<Integer> step;

    /**
     * @return Specifies the creation order of the hardware RAID
     * 
     */
    public Output<Integer> step() {
        return this.step;
    }
    /**
     * Template name
     * 
     */
    @Export(name="templateName", type=String.class, parameters={})
    private Output<String> templateName;

    /**
     * @return Template name
     * 
     */
    public Output<String> templateName() {
        return this.templateName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MeInstallationTemplatePartitionSchemeHardwareRaid(String name) {
        this(name, MeInstallationTemplatePartitionSchemeHardwareRaidArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MeInstallationTemplatePartitionSchemeHardwareRaid(String name, MeInstallationTemplatePartitionSchemeHardwareRaidArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MeInstallationTemplatePartitionSchemeHardwareRaid(String name, MeInstallationTemplatePartitionSchemeHardwareRaidArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid", name, args == null ? MeInstallationTemplatePartitionSchemeHardwareRaidArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MeInstallationTemplatePartitionSchemeHardwareRaid(String name, Output<String> id, @Nullable MeInstallationTemplatePartitionSchemeHardwareRaidState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MeInstallationTemplatePartitionSchemeHardwareRaid get(String name, Output<String> id, @Nullable MeInstallationTemplatePartitionSchemeHardwareRaidState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MeInstallationTemplatePartitionSchemeHardwareRaid(name, id, state, options);
    }
}
