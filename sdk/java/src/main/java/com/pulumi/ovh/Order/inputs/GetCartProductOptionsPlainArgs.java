// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.Order.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCartProductOptionsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCartProductOptionsPlainArgs Empty = new GetCartProductOptionsPlainArgs();

    /**
     * Cart identifier
     * 
     */
    @Import(name="cartId", required=true)
    private String cartId;

    /**
     * @return Cart identifier
     * 
     */
    public String cartId() {
        return this.cartId;
    }

    /**
     * Catalog name
     * 
     */
    @Import(name="catalogName")
    private @Nullable String catalogName;

    /**
     * @return Catalog name
     * 
     */
    public Optional<String> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }

    /**
     * Product offer identifier
     * 
     */
    @Import(name="planCode", required=true)
    private String planCode;

    /**
     * @return Product offer identifier
     * 
     */
    public String planCode() {
        return this.planCode;
    }

    /**
     * Product
     * 
     */
    @Import(name="product", required=true)
    private String product;

    /**
     * @return Product
     * 
     */
    public String product() {
        return this.product;
    }

    private GetCartProductOptionsPlainArgs() {}

    private GetCartProductOptionsPlainArgs(GetCartProductOptionsPlainArgs $) {
        this.cartId = $.cartId;
        this.catalogName = $.catalogName;
        this.planCode = $.planCode;
        this.product = $.product;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCartProductOptionsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCartProductOptionsPlainArgs $;

        public Builder() {
            $ = new GetCartProductOptionsPlainArgs();
        }

        public Builder(GetCartProductOptionsPlainArgs defaults) {
            $ = new GetCartProductOptionsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cartId Cart identifier
         * 
         * @return builder
         * 
         */
        public Builder cartId(String cartId) {
            $.cartId = cartId;
            return this;
        }

        /**
         * @param catalogName Catalog name
         * 
         * @return builder
         * 
         */
        public Builder catalogName(@Nullable String catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        /**
         * @param planCode Product offer identifier
         * 
         * @return builder
         * 
         */
        public Builder planCode(String planCode) {
            $.planCode = planCode;
            return this;
        }

        /**
         * @param product Product
         * 
         * @return builder
         * 
         */
        public Builder product(String product) {
            $.product = product;
            return this;
        }

        public GetCartProductOptionsPlainArgs build() {
            $.cartId = Objects.requireNonNull($.cartId, "expected parameter 'cartId' to be non-null");
            $.planCode = Objects.requireNonNull($.planCode, "expected parameter 'planCode' to be non-null");
            $.product = Objects.requireNonNull($.product, "expected parameter 'product' to be non-null");
            return $;
        }
    }

}
