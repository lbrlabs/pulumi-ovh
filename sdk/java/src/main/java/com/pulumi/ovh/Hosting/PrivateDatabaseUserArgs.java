// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.Hosting;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class PrivateDatabaseUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrivateDatabaseUserArgs Empty = new PrivateDatabaseUserArgs();

    /**
     * Password for the new user (alphanumeric, minimum one number and 8 characters minimum)
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Password for the new user (alphanumeric, minimum one number and 8 characters minimum)
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The internal name of your private database.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The internal name of your private database.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * User name used to connect on your databases
     * 
     */
    @Import(name="userName", required=true)
    private Output<String> userName;

    /**
     * @return User name used to connect on your databases
     * 
     */
    public Output<String> userName() {
        return this.userName;
    }

    private PrivateDatabaseUserArgs() {}

    private PrivateDatabaseUserArgs(PrivateDatabaseUserArgs $) {
        this.password = $.password;
        this.serviceName = $.serviceName;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateDatabaseUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateDatabaseUserArgs $;

        public Builder() {
            $ = new PrivateDatabaseUserArgs();
        }

        public Builder(PrivateDatabaseUserArgs defaults) {
            $ = new PrivateDatabaseUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password Password for the new user (alphanumeric, minimum one number and 8 characters minimum)
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for the new user (alphanumeric, minimum one number and 8 characters minimum)
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param serviceName The internal name of your private database.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal name of your private database.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param userName User name used to connect on your databases
         * 
         * @return builder
         * 
         */
        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName User name used to connect on your databases
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public PrivateDatabaseUserArgs build() {
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            return $;
        }
    }

}
