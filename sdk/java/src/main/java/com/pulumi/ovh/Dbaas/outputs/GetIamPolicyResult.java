// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh.Dbaas.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetIamPolicyResult {
    /**
     * @return List of actions allowed by the policy.
     * 
     */
    private @Nullable List<String> allows;
    /**
     * @return Creation date of this group.
     * 
     */
    private String createdAt;
    /**
     * @return Group description.
     * 
     */
    private @Nullable String description;
    /**
     * @return List of actions.
     * 
     */
    private @Nullable List<String> excepts;
    private String id;
    /**
     * @return List of identities affected by the policy.
     * 
     */
    private List<String> identities;
    /**
     * @return Name of the policy.
     * 
     */
    private String name;
    /**
     * @return Owner of the policy.
     * 
     */
    private String owner;
    /**
     * @return Indicates that the policy is a default one.
     * 
     */
    private Boolean readOnly;
    /**
     * @return List of resources affected by the policy.
     * 
     */
    private List<String> resources;
    /**
     * @return Date of the last update of this group.
     * 
     */
    private String updatedAt;

    private GetIamPolicyResult() {}
    /**
     * @return List of actions allowed by the policy.
     * 
     */
    public List<String> allows() {
        return this.allows == null ? List.of() : this.allows;
    }
    /**
     * @return Creation date of this group.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Group description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return List of actions.
     * 
     */
    public List<String> excepts() {
        return this.excepts == null ? List.of() : this.excepts;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return List of identities affected by the policy.
     * 
     */
    public List<String> identities() {
        return this.identities;
    }
    /**
     * @return Name of the policy.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Owner of the policy.
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return Indicates that the policy is a default one.
     * 
     */
    public Boolean readOnly() {
        return this.readOnly;
    }
    /**
     * @return List of resources affected by the policy.
     * 
     */
    public List<String> resources() {
        return this.resources;
    }
    /**
     * @return Date of the last update of this group.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIamPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allows;
        private String createdAt;
        private @Nullable String description;
        private @Nullable List<String> excepts;
        private String id;
        private List<String> identities;
        private String name;
        private String owner;
        private Boolean readOnly;
        private List<String> resources;
        private String updatedAt;
        public Builder() {}
        public Builder(GetIamPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allows = defaults.allows;
    	      this.createdAt = defaults.createdAt;
    	      this.description = defaults.description;
    	      this.excepts = defaults.excepts;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.readOnly = defaults.readOnly;
    	      this.resources = defaults.resources;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder allows(@Nullable List<String> allows) {
            this.allows = allows;
            return this;
        }
        public Builder allows(String... allows) {
            return allows(List.of(allows));
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder excepts(@Nullable List<String> excepts) {
            this.excepts = excepts;
            return this;
        }
        public Builder excepts(String... excepts) {
            return excepts(List.of(excepts));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<String> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(String... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            this.owner = Objects.requireNonNull(owner);
            return this;
        }
        @CustomType.Setter
        public Builder readOnly(Boolean readOnly) {
            this.readOnly = Objects.requireNonNull(readOnly);
            return this;
        }
        @CustomType.Setter
        public Builder resources(List<String> resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }
        public Builder resources(String... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        public GetIamPolicyResult build() {
            final var o = new GetIamPolicyResult();
            o.allows = allows;
            o.createdAt = createdAt;
            o.description = description;
            o.excepts = excepts;
            o.id = id;
            o.identities = identities;
            o.name = name;
            o.owner = owner;
            o.readOnly = readOnly;
            o.resources = resources;
            o.updatedAt = updatedAt;
            return o;
        }
    }
}
