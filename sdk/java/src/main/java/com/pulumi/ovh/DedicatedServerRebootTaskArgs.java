// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ovh;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DedicatedServerRebootTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final DedicatedServerRebootTaskArgs Empty = new DedicatedServerRebootTaskArgs();

    /**
     * List of values traccked to trigger reboot, used also to form implicit dependencies
     * 
     */
    @Import(name="keepers", required=true)
    private Output<List<String>> keepers;

    /**
     * @return List of values traccked to trigger reboot, used also to form implicit dependencies
     * 
     */
    public Output<List<String>> keepers() {
        return this.keepers;
    }

    /**
     * The service_name of your dedicated server.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The service_name of your dedicated server.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    private DedicatedServerRebootTaskArgs() {}

    private DedicatedServerRebootTaskArgs(DedicatedServerRebootTaskArgs $) {
        this.keepers = $.keepers;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DedicatedServerRebootTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DedicatedServerRebootTaskArgs $;

        public Builder() {
            $ = new DedicatedServerRebootTaskArgs();
        }

        public Builder(DedicatedServerRebootTaskArgs defaults) {
            $ = new DedicatedServerRebootTaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keepers List of values traccked to trigger reboot, used also to form implicit dependencies
         * 
         * @return builder
         * 
         */
        public Builder keepers(Output<List<String>> keepers) {
            $.keepers = keepers;
            return this;
        }

        /**
         * @param keepers List of values traccked to trigger reboot, used also to form implicit dependencies
         * 
         * @return builder
         * 
         */
        public Builder keepers(List<String> keepers) {
            return keepers(Output.of(keepers));
        }

        /**
         * @param keepers List of values traccked to trigger reboot, used also to form implicit dependencies
         * 
         * @return builder
         * 
         */
        public Builder keepers(String... keepers) {
            return keepers(List.of(keepers));
        }

        /**
         * @param serviceName The service_name of your dedicated server.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The service_name of your dedicated server.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public DedicatedServerRebootTaskArgs build() {
            $.keepers = Objects.requireNonNull($.keepers, "expected parameter 'keepers' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
