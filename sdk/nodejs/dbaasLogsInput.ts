// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Creates a dbaas logs input.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@pulumi/ovh";
 *
 * const logstash = ovh.getDbaasLogsInputEngine({
 *     name: "logstash",
 *     version: "7.x",
 * });
 * const stream = new ovh.DbaasLogsOutputGraylogStream("stream", {
 *     serviceName: "....",
 *     title: "my stream",
 *     description: "my graylog stream",
 * });
 * const input = new ovh.DbaasLogsInput("input", {
 *     serviceName: stream.serviceName,
 *     description: stream.description,
 *     title: stream.title,
 *     engineId: logstash.then(logstash => logstash.id),
 *     streamId: stream.id,
 *     allowedNetworks: ["10.0.0.0/16"],
 *     exposedPort: "6154",
 *     nbInstance: 2,
 *     configuration: {
 *         logstash: {
 *             inputSection: `beats {
 *   port => 6514
 *   ssl => true
 *   ssl_certificate => "/etc/ssl/private/server.crt"
 *   ssl_key => "/etc/ssl/private/server.key"
 * }
 * `,
 *         },
 *     },
 * });
 * ```
 */
export class DbaasLogsInput extends pulumi.CustomResource {
    /**
     * Get an existing DbaasLogsInput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbaasLogsInputState, opts?: pulumi.CustomResourceOptions): DbaasLogsInput {
        return new DbaasLogsInput(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/dbaasLogsInput:DbaasLogsInput';

    /**
     * Returns true if the given object is an instance of DbaasLogsInput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbaasLogsInput {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbaasLogsInput.__pulumiType;
    }

    /**
     * List of IP blocks
     */
    public readonly allowedNetworks!: pulumi.Output<string[]>;
    /**
     * Input configuration
     */
    public readonly configuration!: pulumi.Output<outputs.DbaasLogsInputConfiguration>;
    /**
     * Input creation
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Input description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Input engine ID
     */
    public readonly engineId!: pulumi.Output<string>;
    /**
     * Port
     */
    public readonly exposedPort!: pulumi.Output<string>;
    /**
     * Hostname
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * Input ID
     */
    public /*out*/ readonly inputId!: pulumi.Output<string>;
    /**
     * Indicate if input need to be restarted
     */
    public /*out*/ readonly isRestartRequired!: pulumi.Output<boolean>;
    /**
     * Number of instance running
     */
    public readonly nbInstance!: pulumi.Output<number>;
    /**
     * Input IP address
     */
    public /*out*/ readonly publicAddress!: pulumi.Output<string>;
    /**
     * service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Input SSL certificate
     */
    public /*out*/ readonly sslCertificate!: pulumi.Output<string>;
    /**
     * init: configuration required, pending: ready to start, running: available
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Associated Graylog stream
     */
    public readonly streamId!: pulumi.Output<string>;
    /**
     * Input title
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Input last update
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a DbaasLogsInput resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbaasLogsInputArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbaasLogsInputArgs | DbaasLogsInputState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbaasLogsInputState | undefined;
            resourceInputs["allowedNetworks"] = state ? state.allowedNetworks : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["engineId"] = state ? state.engineId : undefined;
            resourceInputs["exposedPort"] = state ? state.exposedPort : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["inputId"] = state ? state.inputId : undefined;
            resourceInputs["isRestartRequired"] = state ? state.isRestartRequired : undefined;
            resourceInputs["nbInstance"] = state ? state.nbInstance : undefined;
            resourceInputs["publicAddress"] = state ? state.publicAddress : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["sslCertificate"] = state ? state.sslCertificate : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["streamId"] = state ? state.streamId : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as DbaasLogsInputArgs | undefined;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.engineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.streamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamId'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["allowedNetworks"] = args ? args.allowedNetworks : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engineId"] = args ? args.engineId : undefined;
            resourceInputs["exposedPort"] = args ? args.exposedPort : undefined;
            resourceInputs["nbInstance"] = args ? args.nbInstance : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["streamId"] = args ? args.streamId : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["inputId"] = undefined /*out*/;
            resourceInputs["isRestartRequired"] = undefined /*out*/;
            resourceInputs["publicAddress"] = undefined /*out*/;
            resourceInputs["sslCertificate"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbaasLogsInput.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbaasLogsInput resources.
 */
export interface DbaasLogsInputState {
    /**
     * List of IP blocks
     */
    allowedNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Input configuration
     */
    configuration?: pulumi.Input<inputs.DbaasLogsInputConfiguration>;
    /**
     * Input creation
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Input description
     */
    description?: pulumi.Input<string>;
    /**
     * Input engine ID
     */
    engineId?: pulumi.Input<string>;
    /**
     * Port
     */
    exposedPort?: pulumi.Input<string>;
    /**
     * Hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Input ID
     */
    inputId?: pulumi.Input<string>;
    /**
     * Indicate if input need to be restarted
     */
    isRestartRequired?: pulumi.Input<boolean>;
    /**
     * Number of instance running
     */
    nbInstance?: pulumi.Input<number>;
    /**
     * Input IP address
     */
    publicAddress?: pulumi.Input<string>;
    /**
     * service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Input SSL certificate
     */
    sslCertificate?: pulumi.Input<string>;
    /**
     * init: configuration required, pending: ready to start, running: available
     */
    status?: pulumi.Input<string>;
    /**
     * Associated Graylog stream
     */
    streamId?: pulumi.Input<string>;
    /**
     * Input title
     */
    title?: pulumi.Input<string>;
    /**
     * Input last update
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbaasLogsInput resource.
 */
export interface DbaasLogsInputArgs {
    /**
     * List of IP blocks
     */
    allowedNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Input configuration
     */
    configuration: pulumi.Input<inputs.DbaasLogsInputConfiguration>;
    /**
     * Input description
     */
    description: pulumi.Input<string>;
    /**
     * Input engine ID
     */
    engineId: pulumi.Input<string>;
    /**
     * Port
     */
    exposedPort?: pulumi.Input<string>;
    /**
     * Number of instance running
     */
    nbInstance?: pulumi.Input<number>;
    /**
     * service name
     */
    serviceName: pulumi.Input<string>;
    /**
     * Associated Graylog stream
     */
    streamId: pulumi.Input<string>;
    /**
     * Input title
     */
    title: pulumi.Input<string>;
}
