// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ContainerRegistryArgs, ContainerRegistryState } from "./containerRegistry";
export type ContainerRegistry = import("./containerRegistry").ContainerRegistry;
export const ContainerRegistry: typeof import("./containerRegistry").ContainerRegistry = null as any;
utilities.lazyLoad(exports, ["ContainerRegistry"], () => require("./containerRegistry"));

export { ContainerRegistryUserArgs, ContainerRegistryUserState } from "./containerRegistryUser";
export type ContainerRegistryUser = import("./containerRegistryUser").ContainerRegistryUser;
export const ContainerRegistryUser: typeof import("./containerRegistryUser").ContainerRegistryUser = null as any;
utilities.lazyLoad(exports, ["ContainerRegistryUser"], () => require("./containerRegistryUser"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { FailoverIpAttachArgs, FailoverIpAttachState } from "./failoverIpAttach";
export type FailoverIpAttach = import("./failoverIpAttach").FailoverIpAttach;
export const FailoverIpAttach: typeof import("./failoverIpAttach").FailoverIpAttach = null as any;
utilities.lazyLoad(exports, ["FailoverIpAttach"], () => require("./failoverIpAttach"));

export { GetCapabilitiesContainerFilterArgs, GetCapabilitiesContainerFilterResult, GetCapabilitiesContainerFilterOutputArgs } from "./getCapabilitiesContainerFilter";
export const getCapabilitiesContainerFilter: typeof import("./getCapabilitiesContainerFilter").getCapabilitiesContainerFilter = null as any;
export const getCapabilitiesContainerFilterOutput: typeof import("./getCapabilitiesContainerFilter").getCapabilitiesContainerFilterOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilitiesContainerFilter","getCapabilitiesContainerFilterOutput"], () => require("./getCapabilitiesContainerFilter"));

export { GetCapabilitiesContainerRegistryArgs, GetCapabilitiesContainerRegistryResult, GetCapabilitiesContainerRegistryOutputArgs } from "./getCapabilitiesContainerRegistry";
export const getCapabilitiesContainerRegistry: typeof import("./getCapabilitiesContainerRegistry").getCapabilitiesContainerRegistry = null as any;
export const getCapabilitiesContainerRegistryOutput: typeof import("./getCapabilitiesContainerRegistry").getCapabilitiesContainerRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilitiesContainerRegistry","getCapabilitiesContainerRegistryOutput"], () => require("./getCapabilitiesContainerRegistry"));

export { GetContainerRegistriesArgs, GetContainerRegistriesResult, GetContainerRegistriesOutputArgs } from "./getContainerRegistries";
export const getContainerRegistries: typeof import("./getContainerRegistries").getContainerRegistries = null as any;
export const getContainerRegistriesOutput: typeof import("./getContainerRegistries").getContainerRegistriesOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistries","getContainerRegistriesOutput"], () => require("./getContainerRegistries"));

export { GetContainerRegistryArgs, GetContainerRegistryResult, GetContainerRegistryOutputArgs } from "./getContainerRegistry";
export const getContainerRegistry: typeof import("./getContainerRegistry").getContainerRegistry = null as any;
export const getContainerRegistryOutput: typeof import("./getContainerRegistry").getContainerRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistry","getContainerRegistryOutput"], () => require("./getContainerRegistry"));

export { GetContainerRegistryUsersArgs, GetContainerRegistryUsersResult, GetContainerRegistryUsersOutputArgs } from "./getContainerRegistryUsers";
export const getContainerRegistryUsers: typeof import("./getContainerRegistryUsers").getContainerRegistryUsers = null as any;
export const getContainerRegistryUsersOutput: typeof import("./getContainerRegistryUsers").getContainerRegistryUsersOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistryUsers","getContainerRegistryUsersOutput"], () => require("./getContainerRegistryUsers"));

export { GetFailoverIpAttachArgs, GetFailoverIpAttachResult, GetFailoverIpAttachOutputArgs } from "./getFailoverIpAttach";
export const getFailoverIpAttach: typeof import("./getFailoverIpAttach").getFailoverIpAttach = null as any;
export const getFailoverIpAttachOutput: typeof import("./getFailoverIpAttach").getFailoverIpAttachOutput = null as any;
utilities.lazyLoad(exports, ["getFailoverIpAttach","getFailoverIpAttachOutput"], () => require("./getFailoverIpAttach"));

export { GetKubeArgs, GetKubeResult, GetKubeOutputArgs } from "./getKube";
export const getKube: typeof import("./getKube").getKube = null as any;
export const getKubeOutput: typeof import("./getKube").getKubeOutput = null as any;
utilities.lazyLoad(exports, ["getKube","getKubeOutput"], () => require("./getKube"));

export { GetKubeIpRestrictionsArgs, GetKubeIpRestrictionsResult, GetKubeIpRestrictionsOutputArgs } from "./getKubeIpRestrictions";
export const getKubeIpRestrictions: typeof import("./getKubeIpRestrictions").getKubeIpRestrictions = null as any;
export const getKubeIpRestrictionsOutput: typeof import("./getKubeIpRestrictions").getKubeIpRestrictionsOutput = null as any;
utilities.lazyLoad(exports, ["getKubeIpRestrictions","getKubeIpRestrictionsOutput"], () => require("./getKubeIpRestrictions"));

export { GetKubeNodePoolArgs, GetKubeNodePoolResult, GetKubeNodePoolOutputArgs } from "./getKubeNodePool";
export const getKubeNodePool: typeof import("./getKubeNodePool").getKubeNodePool = null as any;
export const getKubeNodePoolOutput: typeof import("./getKubeNodePool").getKubeNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getKubeNodePool","getKubeNodePoolOutput"], () => require("./getKubeNodePool"));

export { GetKubeNodePoolNodesArgs, GetKubeNodePoolNodesResult, GetKubeNodePoolNodesOutputArgs } from "./getKubeNodePoolNodes";
export const getKubeNodePoolNodes: typeof import("./getKubeNodePoolNodes").getKubeNodePoolNodes = null as any;
export const getKubeNodePoolNodesOutput: typeof import("./getKubeNodePoolNodes").getKubeNodePoolNodesOutput = null as any;
utilities.lazyLoad(exports, ["getKubeNodePoolNodes","getKubeNodePoolNodesOutput"], () => require("./getKubeNodePoolNodes"));

export { GetKubeNodesArgs, GetKubeNodesResult, GetKubeNodesOutputArgs } from "./getKubeNodes";
export const getKubeNodes: typeof import("./getKubeNodes").getKubeNodes = null as any;
export const getKubeNodesOutput: typeof import("./getKubeNodes").getKubeNodesOutput = null as any;
utilities.lazyLoad(exports, ["getKubeNodes","getKubeNodesOutput"], () => require("./getKubeNodes"));

export { GetKubeOidcArgs, GetKubeOidcResult, GetKubeOidcOutputArgs } from "./getKubeOidc";
export const getKubeOidc: typeof import("./getKubeOidc").getKubeOidc = null as any;
export const getKubeOidcOutput: typeof import("./getKubeOidc").getKubeOidcOutput = null as any;
utilities.lazyLoad(exports, ["getKubeOidc","getKubeOidcOutput"], () => require("./getKubeOidc"));

export { GetM3dbNamespaceArgs, GetM3dbNamespaceResult, GetM3dbNamespaceOutputArgs } from "./getM3dbNamespace";
export const getM3dbNamespace: typeof import("./getM3dbNamespace").getM3dbNamespace = null as any;
export const getM3dbNamespaceOutput: typeof import("./getM3dbNamespace").getM3dbNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getM3dbNamespace","getM3dbNamespaceOutput"], () => require("./getM3dbNamespace"));

export { GetM3dbNamespacesArgs, GetM3dbNamespacesResult, GetM3dbNamespacesOutputArgs } from "./getM3dbNamespaces";
export const getM3dbNamespaces: typeof import("./getM3dbNamespaces").getM3dbNamespaces = null as any;
export const getM3dbNamespacesOutput: typeof import("./getM3dbNamespaces").getM3dbNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getM3dbNamespaces","getM3dbNamespacesOutput"], () => require("./getM3dbNamespaces"));

export { GetM3dbUserArgs, GetM3dbUserResult, GetM3dbUserOutputArgs } from "./getM3dbUser";
export const getM3dbUser: typeof import("./getM3dbUser").getM3dbUser = null as any;
export const getM3dbUserOutput: typeof import("./getM3dbUser").getM3dbUserOutput = null as any;
utilities.lazyLoad(exports, ["getM3dbUser","getM3dbUserOutput"], () => require("./getM3dbUser"));

export { GetMongoDbUserArgs, GetMongoDbUserResult, GetMongoDbUserOutputArgs } from "./getMongoDbUser";
export const getMongoDbUser: typeof import("./getMongoDbUser").getMongoDbUser = null as any;
export const getMongoDbUserOutput: typeof import("./getMongoDbUser").getMongoDbUserOutput = null as any;
utilities.lazyLoad(exports, ["getMongoDbUser","getMongoDbUserOutput"], () => require("./getMongoDbUser"));

export { GetOpenSearchPatternArgs, GetOpenSearchPatternResult, GetOpenSearchPatternOutputArgs } from "./getOpenSearchPattern";
export const getOpenSearchPattern: typeof import("./getOpenSearchPattern").getOpenSearchPattern = null as any;
export const getOpenSearchPatternOutput: typeof import("./getOpenSearchPattern").getOpenSearchPatternOutput = null as any;
utilities.lazyLoad(exports, ["getOpenSearchPattern","getOpenSearchPatternOutput"], () => require("./getOpenSearchPattern"));

export { GetOpenSearchPatternsArgs, GetOpenSearchPatternsResult, GetOpenSearchPatternsOutputArgs } from "./getOpenSearchPatterns";
export const getOpenSearchPatterns: typeof import("./getOpenSearchPatterns").getOpenSearchPatterns = null as any;
export const getOpenSearchPatternsOutput: typeof import("./getOpenSearchPatterns").getOpenSearchPatternsOutput = null as any;
utilities.lazyLoad(exports, ["getOpenSearchPatterns","getOpenSearchPatternsOutput"], () => require("./getOpenSearchPatterns"));

export { GetOpenSearchUserArgs, GetOpenSearchUserResult, GetOpenSearchUserOutputArgs } from "./getOpenSearchUser";
export const getOpenSearchUser: typeof import("./getOpenSearchUser").getOpenSearchUser = null as any;
export const getOpenSearchUserOutput: typeof import("./getOpenSearchUser").getOpenSearchUserOutput = null as any;
utilities.lazyLoad(exports, ["getOpenSearchUser","getOpenSearchUserOutput"], () => require("./getOpenSearchUser"));

export { GetRedisUserArgs, GetRedisUserResult, GetRedisUserOutputArgs } from "./getRedisUser";
export const getRedisUser: typeof import("./getRedisUser").getRedisUser = null as any;
export const getRedisUserOutput: typeof import("./getRedisUser").getRedisUserOutput = null as any;
utilities.lazyLoad(exports, ["getRedisUser","getRedisUserOutput"], () => require("./getRedisUser"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserS3CredentialArgs, GetUserS3CredentialResult, GetUserS3CredentialOutputArgs } from "./getUserS3Credential";
export const getUserS3Credential: typeof import("./getUserS3Credential").getUserS3Credential = null as any;
export const getUserS3CredentialOutput: typeof import("./getUserS3Credential").getUserS3CredentialOutput = null as any;
utilities.lazyLoad(exports, ["getUserS3Credential","getUserS3CredentialOutput"], () => require("./getUserS3Credential"));

export { GetUserS3CredentialsArgs, GetUserS3CredentialsResult, GetUserS3CredentialsOutputArgs } from "./getUserS3Credentials";
export const getUserS3Credentials: typeof import("./getUserS3Credentials").getUserS3Credentials = null as any;
export const getUserS3CredentialsOutput: typeof import("./getUserS3Credentials").getUserS3CredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getUserS3Credentials","getUserS3CredentialsOutput"], () => require("./getUserS3Credentials"));

export { GetUserS3PolicyArgs, GetUserS3PolicyResult, GetUserS3PolicyOutputArgs } from "./getUserS3Policy";
export const getUserS3Policy: typeof import("./getUserS3Policy").getUserS3Policy = null as any;
export const getUserS3PolicyOutput: typeof import("./getUserS3Policy").getUserS3PolicyOutput = null as any;
utilities.lazyLoad(exports, ["getUserS3Policy","getUserS3PolicyOutput"], () => require("./getUserS3Policy"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { KubeArgs, KubeState } from "./kube";
export type Kube = import("./kube").Kube;
export const Kube: typeof import("./kube").Kube = null as any;
utilities.lazyLoad(exports, ["Kube"], () => require("./kube"));

export { KubeIpRestrictionsArgs, KubeIpRestrictionsState } from "./kubeIpRestrictions";
export type KubeIpRestrictions = import("./kubeIpRestrictions").KubeIpRestrictions;
export const KubeIpRestrictions: typeof import("./kubeIpRestrictions").KubeIpRestrictions = null as any;
utilities.lazyLoad(exports, ["KubeIpRestrictions"], () => require("./kubeIpRestrictions"));

export { KubeNodePoolArgs, KubeNodePoolState } from "./kubeNodePool";
export type KubeNodePool = import("./kubeNodePool").KubeNodePool;
export const KubeNodePool: typeof import("./kubeNodePool").KubeNodePool = null as any;
utilities.lazyLoad(exports, ["KubeNodePool"], () => require("./kubeNodePool"));

export { KubeOidcArgs, KubeOidcState } from "./kubeOidc";
export type KubeOidc = import("./kubeOidc").KubeOidc;
export const KubeOidc: typeof import("./kubeOidc").KubeOidc = null as any;
utilities.lazyLoad(exports, ["KubeOidc"], () => require("./kubeOidc"));

export { NetworkPrivateArgs, NetworkPrivateState } from "./networkPrivate";
export type NetworkPrivate = import("./networkPrivate").NetworkPrivate;
export const NetworkPrivate: typeof import("./networkPrivate").NetworkPrivate = null as any;
utilities.lazyLoad(exports, ["NetworkPrivate"], () => require("./networkPrivate"));

export { NetworkPrivateSubnetArgs, NetworkPrivateSubnetState } from "./networkPrivateSubnet";
export type NetworkPrivateSubnet = import("./networkPrivateSubnet").NetworkPrivateSubnet;
export const NetworkPrivateSubnet: typeof import("./networkPrivateSubnet").NetworkPrivateSubnet = null as any;
utilities.lazyLoad(exports, ["NetworkPrivateSubnet"], () => require("./networkPrivateSubnet"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { RegionStoragePresignArgs, RegionStoragePresignState } from "./regionStoragePresign";
export type RegionStoragePresign = import("./regionStoragePresign").RegionStoragePresign;
export const RegionStoragePresign: typeof import("./regionStoragePresign").RegionStoragePresign = null as any;
utilities.lazyLoad(exports, ["RegionStoragePresign"], () => require("./regionStoragePresign"));

export { S3CredentialArgs, S3CredentialState } from "./s3credential";
export type S3Credential = import("./s3credential").S3Credential;
export const S3Credential: typeof import("./s3credential").S3Credential = null as any;
utilities.lazyLoad(exports, ["S3Credential"], () => require("./s3credential"));

export { S3PolicyArgs, S3PolicyState } from "./s3policy";
export type S3Policy = import("./s3policy").S3Policy;
export const S3Policy: typeof import("./s3policy").S3Policy = null as any;
utilities.lazyLoad(exports, ["S3Policy"], () => require("./s3policy"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:CloudProject/containerRegistry:ContainerRegistry":
                return new ContainerRegistry(name, <any>undefined, { urn })
            case "ovh:CloudProject/containerRegistryUser:ContainerRegistryUser":
                return new ContainerRegistryUser(name, <any>undefined, { urn })
            case "ovh:CloudProject/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "ovh:CloudProject/failoverIpAttach:FailoverIpAttach":
                return new FailoverIpAttach(name, <any>undefined, { urn })
            case "ovh:CloudProject/kube:Kube":
                return new Kube(name, <any>undefined, { urn })
            case "ovh:CloudProject/kubeIpRestrictions:KubeIpRestrictions":
                return new KubeIpRestrictions(name, <any>undefined, { urn })
            case "ovh:CloudProject/kubeNodePool:KubeNodePool":
                return new KubeNodePool(name, <any>undefined, { urn })
            case "ovh:CloudProject/kubeOidc:KubeOidc":
                return new KubeOidc(name, <any>undefined, { urn })
            case "ovh:CloudProject/networkPrivate:NetworkPrivate":
                return new NetworkPrivate(name, <any>undefined, { urn })
            case "ovh:CloudProject/networkPrivateSubnet:NetworkPrivateSubnet":
                return new NetworkPrivateSubnet(name, <any>undefined, { urn })
            case "ovh:CloudProject/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "ovh:CloudProject/regionStoragePresign:RegionStoragePresign":
                return new RegionStoragePresign(name, <any>undefined, { urn })
            case "ovh:CloudProject/s3Credential:S3Credential":
                return new S3Credential(name, <any>undefined, { urn })
            case "ovh:CloudProject/s3Policy:S3Policy":
                return new S3Policy(name, <any>undefined, { urn })
            case "ovh:CloudProject/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "CloudProject/containerRegistry", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/containerRegistryUser", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/database", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/failoverIpAttach", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/kube", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/kubeIpRestrictions", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/kubeNodePool", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/kubeOidc", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/networkPrivate", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/networkPrivateSubnet", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/project", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/regionStoragePresign", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/s3Credential", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/s3Policy", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProject/user", _module)
