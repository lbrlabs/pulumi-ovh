// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this resource to create partition scheme for a custom installation template available for dedicated servers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@lbrlabs/pulumi-ovh";
 *
 * const mytemplate = new ovh.me.InstallationTemplate("mytemplate", {
 *     baseTemplateName: "centos7_64",
 *     templateName: "mytemplate",
 *     defaultLanguage: "fr",
 * });
 * const scheme = new ovh.me.InstallationTemplatePartitionScheme("scheme", {
 *     templateName: mytemplate.templateName,
 *     priority: 1,
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported using the `template_name`, `name` of the cluster, separated by "/" E.g., bash
 *
 * ```sh
 *  $ pulumi import ovh:Me/installationTemplatePartitionScheme:InstallationTemplatePartitionScheme scheme template_name/name
 * ```
 */
export class InstallationTemplatePartitionScheme extends pulumi.CustomResource {
    /**
     * Get an existing InstallationTemplatePartitionScheme resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstallationTemplatePartitionSchemeState, opts?: pulumi.CustomResourceOptions): InstallationTemplatePartitionScheme {
        return new InstallationTemplatePartitionScheme(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Me/installationTemplatePartitionScheme:InstallationTemplatePartitionScheme';

    /**
     * Returns true if the given object is an instance of InstallationTemplatePartitionScheme.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstallationTemplatePartitionScheme {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstallationTemplatePartitionScheme.__pulumiType;
    }

    /**
     * (Required) This partition scheme name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications).
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * The template name of the partition scheme.
     */
    public readonly templateName!: pulumi.Output<string>;

    /**
     * Create a InstallationTemplatePartitionScheme resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstallationTemplatePartitionSchemeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstallationTemplatePartitionSchemeArgs | InstallationTemplatePartitionSchemeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstallationTemplatePartitionSchemeState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
        } else {
            const args = argsOrState as InstallationTemplatePartitionSchemeArgs | undefined;
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstallationTemplatePartitionScheme.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstallationTemplatePartitionScheme resources.
 */
export interface InstallationTemplatePartitionSchemeState {
    /**
     * (Required) This partition scheme name.
     */
    name?: pulumi.Input<string>;
    /**
     * on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications).
     */
    priority?: pulumi.Input<number>;
    /**
     * The template name of the partition scheme.
     */
    templateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstallationTemplatePartitionScheme resource.
 */
export interface InstallationTemplatePartitionSchemeArgs {
    /**
     * (Required) This partition scheme name.
     */
    name?: pulumi.Input<string>;
    /**
     * on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications).
     */
    priority: pulumi.Input<number>;
    /**
     * The template name of the partition scheme.
     */
    templateName: pulumi.Input<string>;
}
