// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetIdentityGroupArgs, GetIdentityGroupResult, GetIdentityGroupOutputArgs } from "./getIdentityGroup";
export const getIdentityGroup: typeof import("./getIdentityGroup").getIdentityGroup = null as any;
export const getIdentityGroupOutput: typeof import("./getIdentityGroup").getIdentityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityGroup","getIdentityGroupOutput"], () => require("./getIdentityGroup"));

export { GetIdentityGroupsResult } from "./getIdentityGroups";
export const getIdentityGroups: typeof import("./getIdentityGroups").getIdentityGroups = null as any;
utilities.lazyLoad(exports, ["getIdentityGroups"], () => require("./getIdentityGroups"));

export { GetIdentityUserArgs, GetIdentityUserResult, GetIdentityUserOutputArgs } from "./getIdentityUser";
export const getIdentityUser: typeof import("./getIdentityUser").getIdentityUser = null as any;
export const getIdentityUserOutput: typeof import("./getIdentityUser").getIdentityUserOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityUser","getIdentityUserOutput"], () => require("./getIdentityUser"));

export { GetIdentityUsersResult } from "./getIdentityUsers";
export const getIdentityUsers: typeof import("./getIdentityUsers").getIdentityUsers = null as any;
utilities.lazyLoad(exports, ["getIdentityUsers"], () => require("./getIdentityUsers"));

export { GetInstallationTemplateArgs, GetInstallationTemplateResult, GetInstallationTemplateOutputArgs } from "./getInstallationTemplate";
export const getInstallationTemplate: typeof import("./getInstallationTemplate").getInstallationTemplate = null as any;
export const getInstallationTemplateOutput: typeof import("./getInstallationTemplate").getInstallationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getInstallationTemplate","getInstallationTemplateOutput"], () => require("./getInstallationTemplate"));

export { GetInstallationTemplatesResult } from "./getInstallationTemplates";
export const getInstallationTemplates: typeof import("./getInstallationTemplates").getInstallationTemplates = null as any;
utilities.lazyLoad(exports, ["getInstallationTemplates"], () => require("./getInstallationTemplates"));

export { GetIpxeScriptArgs, GetIpxeScriptResult, GetIpxeScriptOutputArgs } from "./getIpxeScript";
export const getIpxeScript: typeof import("./getIpxeScript").getIpxeScript = null as any;
export const getIpxeScriptOutput: typeof import("./getIpxeScript").getIpxeScriptOutput = null as any;
utilities.lazyLoad(exports, ["getIpxeScript","getIpxeScriptOutput"], () => require("./getIpxeScript"));

export { GetIpxeScriptsResult } from "./getIpxeScripts";
export const getIpxeScripts: typeof import("./getIpxeScripts").getIpxeScripts = null as any;
utilities.lazyLoad(exports, ["getIpxeScripts"], () => require("./getIpxeScripts"));

export { GetMeResult } from "./getMe";
export const getMe: typeof import("./getMe").getMe = null as any;
utilities.lazyLoad(exports, ["getMe"], () => require("./getMe"));

export { GetPaymentmeanBankAccountArgs, GetPaymentmeanBankAccountResult, GetPaymentmeanBankAccountOutputArgs } from "./getPaymentmeanBankAccount";
export const getPaymentmeanBankAccount: typeof import("./getPaymentmeanBankAccount").getPaymentmeanBankAccount = null as any;
export const getPaymentmeanBankAccountOutput: typeof import("./getPaymentmeanBankAccount").getPaymentmeanBankAccountOutput = null as any;
utilities.lazyLoad(exports, ["getPaymentmeanBankAccount","getPaymentmeanBankAccountOutput"], () => require("./getPaymentmeanBankAccount"));

export { GetPaymentmeanCreditCardArgs, GetPaymentmeanCreditCardResult, GetPaymentmeanCreditCardOutputArgs } from "./getPaymentmeanCreditCard";
export const getPaymentmeanCreditCard: typeof import("./getPaymentmeanCreditCard").getPaymentmeanCreditCard = null as any;
export const getPaymentmeanCreditCardOutput: typeof import("./getPaymentmeanCreditCard").getPaymentmeanCreditCardOutput = null as any;
utilities.lazyLoad(exports, ["getPaymentmeanCreditCard","getPaymentmeanCreditCardOutput"], () => require("./getPaymentmeanCreditCard"));

export { GetSshKeyArgs, GetSshKeyResult, GetSshKeyOutputArgs } from "./getSshKey";
export const getSshKey: typeof import("./getSshKey").getSshKey = null as any;
export const getSshKeyOutput: typeof import("./getSshKey").getSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshKey","getSshKeyOutput"], () => require("./getSshKey"));

export { GetSshKeysResult } from "./getSshKeys";
export const getSshKeys: typeof import("./getSshKeys").getSshKeys = null as any;
utilities.lazyLoad(exports, ["getSshKeys"], () => require("./getSshKeys"));

export { IdentityGroupArgs, IdentityGroupState } from "./identityGroup";
export type IdentityGroup = import("./identityGroup").IdentityGroup;
export const IdentityGroup: typeof import("./identityGroup").IdentityGroup = null as any;
utilities.lazyLoad(exports, ["IdentityGroup"], () => require("./identityGroup"));

export { IdentityUserArgs, IdentityUserState } from "./identityUser";
export type IdentityUser = import("./identityUser").IdentityUser;
export const IdentityUser: typeof import("./identityUser").IdentityUser = null as any;
utilities.lazyLoad(exports, ["IdentityUser"], () => require("./identityUser"));

export { InstallationTemplateArgs, InstallationTemplateState } from "./installationTemplate";
export type InstallationTemplate = import("./installationTemplate").InstallationTemplate;
export const InstallationTemplate: typeof import("./installationTemplate").InstallationTemplate = null as any;
utilities.lazyLoad(exports, ["InstallationTemplate"], () => require("./installationTemplate"));

export { InstallationTemplatePartitionSchemeArgs, InstallationTemplatePartitionSchemeState } from "./installationTemplatePartitionScheme";
export type InstallationTemplatePartitionScheme = import("./installationTemplatePartitionScheme").InstallationTemplatePartitionScheme;
export const InstallationTemplatePartitionScheme: typeof import("./installationTemplatePartitionScheme").InstallationTemplatePartitionScheme = null as any;
utilities.lazyLoad(exports, ["InstallationTemplatePartitionScheme"], () => require("./installationTemplatePartitionScheme"));

export { InstallationTemplatePartitionSchemeHardwareRaidArgs, InstallationTemplatePartitionSchemeHardwareRaidState } from "./installationTemplatePartitionSchemeHardwareRaid";
export type InstallationTemplatePartitionSchemeHardwareRaid = import("./installationTemplatePartitionSchemeHardwareRaid").InstallationTemplatePartitionSchemeHardwareRaid;
export const InstallationTemplatePartitionSchemeHardwareRaid: typeof import("./installationTemplatePartitionSchemeHardwareRaid").InstallationTemplatePartitionSchemeHardwareRaid = null as any;
utilities.lazyLoad(exports, ["InstallationTemplatePartitionSchemeHardwareRaid"], () => require("./installationTemplatePartitionSchemeHardwareRaid"));

export { InstallationTemplatePartitionSchemePartitionArgs, InstallationTemplatePartitionSchemePartitionState } from "./installationTemplatePartitionSchemePartition";
export type InstallationTemplatePartitionSchemePartition = import("./installationTemplatePartitionSchemePartition").InstallationTemplatePartitionSchemePartition;
export const InstallationTemplatePartitionSchemePartition: typeof import("./installationTemplatePartitionSchemePartition").InstallationTemplatePartitionSchemePartition = null as any;
utilities.lazyLoad(exports, ["InstallationTemplatePartitionSchemePartition"], () => require("./installationTemplatePartitionSchemePartition"));

export { IpxeScriptArgs, IpxeScriptState } from "./ipxeScript";
export type IpxeScript = import("./ipxeScript").IpxeScript;
export const IpxeScript: typeof import("./ipxeScript").IpxeScript = null as any;
utilities.lazyLoad(exports, ["IpxeScript"], () => require("./ipxeScript"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:Me/identityGroup:IdentityGroup":
                return new IdentityGroup(name, <any>undefined, { urn })
            case "ovh:Me/identityUser:IdentityUser":
                return new IdentityUser(name, <any>undefined, { urn })
            case "ovh:Me/installationTemplate:InstallationTemplate":
                return new InstallationTemplate(name, <any>undefined, { urn })
            case "ovh:Me/installationTemplatePartitionScheme:InstallationTemplatePartitionScheme":
                return new InstallationTemplatePartitionScheme(name, <any>undefined, { urn })
            case "ovh:Me/installationTemplatePartitionSchemeHardwareRaid:InstallationTemplatePartitionSchemeHardwareRaid":
                return new InstallationTemplatePartitionSchemeHardwareRaid(name, <any>undefined, { urn })
            case "ovh:Me/installationTemplatePartitionSchemePartition:InstallationTemplatePartitionSchemePartition":
                return new InstallationTemplatePartitionSchemePartition(name, <any>undefined, { urn })
            case "ovh:Me/ipxeScript:IpxeScript":
                return new IpxeScript(name, <any>undefined, { urn })
            case "ovh:Me/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "Me/identityGroup", _module)
pulumi.runtime.registerResourceModule("ovh", "Me/identityUser", _module)
pulumi.runtime.registerResourceModule("ovh", "Me/installationTemplate", _module)
pulumi.runtime.registerResourceModule("ovh", "Me/installationTemplatePartitionScheme", _module)
pulumi.runtime.registerResourceModule("ovh", "Me/installationTemplatePartitionSchemeHardwareRaid", _module)
pulumi.runtime.registerResourceModule("ovh", "Me/installationTemplatePartitionSchemePartition", _module)
pulumi.runtime.registerResourceModule("ovh", "Me/ipxeScript", _module)
pulumi.runtime.registerResourceModule("ovh", "Me/sshKey", _module)
