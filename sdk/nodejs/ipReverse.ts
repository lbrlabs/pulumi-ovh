// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a OVH IP reverse.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@pulumi/ovh";
 *
 * // Set the reverse of an IP
 * const test = new ovh.IpReverse("test", {
 *     ip: "192.0.2.0/24",
 *     ipReverse: "192.0.2.1",
 *     reverse: "example.com",
 * });
 * ```
 */
export class IpReverse extends pulumi.CustomResource {
    /**
     * Get an existing IpReverse resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpReverseState, opts?: pulumi.CustomResourceOptions): IpReverse {
        return new IpReverse(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/ipReverse:IpReverse';

    /**
     * Returns true if the given object is an instance of IpReverse.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpReverse {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpReverse.__pulumiType;
    }

    /**
     * The IP block to which the IP belongs
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * The IP to set the reverse of
     */
    public readonly ipReverse!: pulumi.Output<string>;
    /**
     * The value of the reverse
     */
    public readonly reverse!: pulumi.Output<string>;

    /**
     * Create a IpReverse resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpReverseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpReverseArgs | IpReverseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpReverseState | undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipReverse"] = state ? state.ipReverse : undefined;
            resourceInputs["reverse"] = state ? state.reverse : undefined;
        } else {
            const args = argsOrState as IpReverseArgs | undefined;
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.ipReverse === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipReverse'");
            }
            if ((!args || args.reverse === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reverse'");
            }
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipReverse"] = args ? args.ipReverse : undefined;
            resourceInputs["reverse"] = args ? args.reverse : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpReverse.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpReverse resources.
 */
export interface IpReverseState {
    /**
     * The IP block to which the IP belongs
     */
    ip?: pulumi.Input<string>;
    /**
     * The IP to set the reverse of
     */
    ipReverse?: pulumi.Input<string>;
    /**
     * The value of the reverse
     */
    reverse?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpReverse resource.
 */
export interface IpReverseArgs {
    /**
     * The IP block to which the IP belongs
     */
    ip: pulumi.Input<string>;
    /**
     * The IP to set the reverse of
     */
    ipReverse: pulumi.Input<string>;
    /**
     * The value of the reverse
     */
    reverse: pulumi.Input<string>;
}
