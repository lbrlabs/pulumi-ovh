// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Ovh.Me
{
    public static class GetInstallationTemplate
    {
        /// <summary>
        /// Use this data source to get a custom installation template available for dedicated servers.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mytemplate = Ovh.Me.GetInstallationTemplate.Invoke(new()
        ///     {
        ///         TemplateName = "mytemplate",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetInstallationTemplateResult> InvokeAsync(GetInstallationTemplateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstallationTemplateResult>("ovh:Me/getInstallationTemplate:getInstallationTemplate", args ?? new GetInstallationTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get a custom installation template available for dedicated servers.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mytemplate = Ovh.Me.GetInstallationTemplate.Invoke(new()
        ///     {
        ///         TemplateName = "mytemplate",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetInstallationTemplateResult> Invoke(GetInstallationTemplateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstallationTemplateResult>("ovh:Me/getInstallationTemplate:getInstallationTemplate", args ?? new GetInstallationTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstallationTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// This template name
        /// </summary>
        [Input("templateName", required: true)]
        public string TemplateName { get; set; } = null!;

        public GetInstallationTemplateArgs()
        {
        }
        public static new GetInstallationTemplateArgs Empty => new GetInstallationTemplateArgs();
    }

    public sealed class GetInstallationTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// This template name
        /// </summary>
        [Input("templateName", required: true)]
        public Input<string> TemplateName { get; set; } = null!;

        public GetInstallationTemplateInvokeArgs()
        {
        }
        public static new GetInstallationTemplateInvokeArgs Empty => new GetInstallationTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstallationTemplateResult
    {
        /// <summary>
        /// List of all language available for this template.
        /// </summary>
        public readonly ImmutableArray<string> AvailableLanguages;
        /// <summary>
        /// This distribution is new and, although tested and functional, may still display odd behaviour.
        /// </summary>
        public readonly bool Beta;
        /// <summary>
        /// This template bit format (32 or 64).
        /// </summary>
        public readonly int BitFormat;
        /// <summary>
        /// Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation).
        /// </summary>
        public readonly string Category;
        public readonly ImmutableArray<Outputs.GetInstallationTemplateCustomizationResult> Customizations;
        /// <summary>
        /// The default language of this template.
        /// </summary>
        public readonly string DefaultLanguage;
        /// <summary>
        /// is this distribution deprecated.
        /// </summary>
        public readonly bool Deprecated;
        /// <summary>
        /// information about this template.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// the distribution this template is based on.
        /// </summary>
        public readonly string Distribution;
        /// <summary>
        /// this template family type (bsd,linux,solaris,windows).
        /// </summary>
        public readonly string Family;
        /// <summary>
        /// Filesystems available (btrfs,ext3,ext4,ntfs,reiserfs,swap,ufs,xfs,zfs).
        /// </summary>
        public readonly ImmutableArray<string> Filesystems;
        /// <summary>
        /// This distribution supports hardware raid configuration through the OVHcloud API.
        /// </summary>
        public readonly bool HardRaidConfiguration;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Date of last modification of the base image.
        /// </summary>
        public readonly string LastModification;
        public readonly bool LvmReady;
        public readonly ImmutableArray<Outputs.GetInstallationTemplatePartitionSchemeResult> PartitionSchemes;
        /// <summary>
        /// This distribution supports installation using the distribution's native kernel instead of the recommended OVHcloud kernel.
        /// </summary>
        public readonly bool SupportsDistributionKernel;
        /// <summary>
        /// This distribution supports RTM software.
        /// </summary>
        public readonly bool SupportsRtm;
        /// <summary>
        /// This distribution supports the microsoft SQL server.
        /// </summary>
        public readonly bool SupportsSqlServer;
        public readonly string TemplateName;

        [OutputConstructor]
        private GetInstallationTemplateResult(
            ImmutableArray<string> availableLanguages,

            bool beta,

            int bitFormat,

            string category,

            ImmutableArray<Outputs.GetInstallationTemplateCustomizationResult> customizations,

            string defaultLanguage,

            bool deprecated,

            string description,

            string distribution,

            string family,

            ImmutableArray<string> filesystems,

            bool hardRaidConfiguration,

            string id,

            string lastModification,

            bool lvmReady,

            ImmutableArray<Outputs.GetInstallationTemplatePartitionSchemeResult> partitionSchemes,

            bool supportsDistributionKernel,

            bool supportsRtm,

            bool supportsSqlServer,

            string templateName)
        {
            AvailableLanguages = availableLanguages;
            Beta = beta;
            BitFormat = bitFormat;
            Category = category;
            Customizations = customizations;
            DefaultLanguage = defaultLanguage;
            Deprecated = deprecated;
            Description = description;
            Distribution = distribution;
            Family = family;
            Filesystems = filesystems;
            HardRaidConfiguration = hardRaidConfiguration;
            Id = id;
            LastModification = lastModification;
            LvmReady = lvmReady;
            PartitionSchemes = partitionSchemes;
            SupportsDistributionKernel = supportsDistributionKernel;
            SupportsRtm = supportsRtm;
            SupportsSqlServer = supportsSqlServer;
            TemplateName = templateName;
        }
    }
}
