// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs_Pulumi.Ovh
{
    public static class GetDomainZone
    {
        /// <summary>
        /// Use this data source to retrieve information about a domain zone.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rootzone = Ovh.GetDomainZone.Invoke(new()
        ///     {
        ///         Name = "mysite.ovh",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDomainZoneResult> InvokeAsync(GetDomainZoneArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainZoneResult>("ovh:index/getDomainZone:getDomainZone", args ?? new GetDomainZoneArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a domain zone.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rootzone = Ovh.GetDomainZone.Invoke(new()
        ///     {
        ///         Name = "mysite.ovh",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDomainZoneResult> Invoke(GetDomainZoneInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainZoneResult>("ovh:index/getDomainZone:getDomainZone", args ?? new GetDomainZoneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainZoneArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the domain zone.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetDomainZoneArgs()
        {
        }
        public static new GetDomainZoneArgs Empty => new GetDomainZoneArgs();
    }

    public sealed class GetDomainZoneInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the domain zone.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetDomainZoneInvokeArgs()
        {
        }
        public static new GetDomainZoneInvokeArgs Empty => new GetDomainZoneInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainZoneResult
    {
        /// <summary>
        /// Is DNSSEC supported by this zone
        /// </summary>
        public readonly bool DnssecSupported;
        /// <summary>
        /// hasDnsAnycast flag of the DNS zone
        /// </summary>
        public readonly bool HasDnsAnycast;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Last update date of the DNS zone
        /// </summary>
        public readonly string LastUpdate;
        public readonly string Name;
        /// <summary>
        /// Name servers that host the DNS zone
        /// </summary>
        public readonly ImmutableArray<string> NameServers;

        [OutputConstructor]
        private GetDomainZoneResult(
            bool dnssecSupported,

            bool hasDnsAnycast,

            string id,

            string lastUpdate,

            string name,

            ImmutableArray<string> nameServers)
        {
            DnssecSupported = dnssecSupported;
            HasDnsAnycast = hasDnsAnycast;
            Id = id;
            LastUpdate = lastUpdate;
            Name = name;
            NameServers = nameServers;
        }
    }
}
