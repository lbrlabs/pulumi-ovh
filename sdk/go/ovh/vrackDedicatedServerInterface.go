// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a Dedicated Server Network Interface to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ovh.NewVrackDedicatedServerInterface(ctx, "vdsi", &ovh.VrackDedicatedServerInterfaceArgs{
//				InterfaceId: pulumi.String("67890"),
//				ServiceName: pulumi.String("12345"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VrackDedicatedServerInterface struct {
	pulumi.CustomResourceState

	// The id of dedicated server network interface.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVrackDedicatedServerInterface registers a new resource with the given unique name, arguments, and options.
func NewVrackDedicatedServerInterface(ctx *pulumi.Context,
	name string, args *VrackDedicatedServerInterfaceArgs, opts ...pulumi.ResourceOption) (*VrackDedicatedServerInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VrackDedicatedServerInterface
	err := ctx.RegisterResource("ovh:index/vrackDedicatedServerInterface:VrackDedicatedServerInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackDedicatedServerInterface gets an existing VrackDedicatedServerInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackDedicatedServerInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackDedicatedServerInterfaceState, opts ...pulumi.ResourceOption) (*VrackDedicatedServerInterface, error) {
	var resource VrackDedicatedServerInterface
	err := ctx.ReadResource("ovh:index/vrackDedicatedServerInterface:VrackDedicatedServerInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackDedicatedServerInterface resources.
type vrackDedicatedServerInterfaceState struct {
	// The id of dedicated server network interface.
	InterfaceId *string `pulumi:"interfaceId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName *string `pulumi:"serviceName"`
}

type VrackDedicatedServerInterfaceState struct {
	// The id of dedicated server network interface.
	InterfaceId pulumi.StringPtrInput
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringPtrInput
}

func (VrackDedicatedServerInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackDedicatedServerInterfaceState)(nil)).Elem()
}

type vrackDedicatedServerInterfaceArgs struct {
	// The id of dedicated server network interface.
	InterfaceId string `pulumi:"interfaceId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackDedicatedServerInterface resource.
type VrackDedicatedServerInterfaceArgs struct {
	// The id of dedicated server network interface.
	InterfaceId pulumi.StringInput
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput
}

func (VrackDedicatedServerInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackDedicatedServerInterfaceArgs)(nil)).Elem()
}

type VrackDedicatedServerInterfaceInput interface {
	pulumi.Input

	ToVrackDedicatedServerInterfaceOutput() VrackDedicatedServerInterfaceOutput
	ToVrackDedicatedServerInterfaceOutputWithContext(ctx context.Context) VrackDedicatedServerInterfaceOutput
}

func (*VrackDedicatedServerInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackDedicatedServerInterface)(nil)).Elem()
}

func (i *VrackDedicatedServerInterface) ToVrackDedicatedServerInterfaceOutput() VrackDedicatedServerInterfaceOutput {
	return i.ToVrackDedicatedServerInterfaceOutputWithContext(context.Background())
}

func (i *VrackDedicatedServerInterface) ToVrackDedicatedServerInterfaceOutputWithContext(ctx context.Context) VrackDedicatedServerInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerInterfaceOutput)
}

// VrackDedicatedServerInterfaceArrayInput is an input type that accepts VrackDedicatedServerInterfaceArray and VrackDedicatedServerInterfaceArrayOutput values.
// You can construct a concrete instance of `VrackDedicatedServerInterfaceArrayInput` via:
//
//	VrackDedicatedServerInterfaceArray{ VrackDedicatedServerInterfaceArgs{...} }
type VrackDedicatedServerInterfaceArrayInput interface {
	pulumi.Input

	ToVrackDedicatedServerInterfaceArrayOutput() VrackDedicatedServerInterfaceArrayOutput
	ToVrackDedicatedServerInterfaceArrayOutputWithContext(context.Context) VrackDedicatedServerInterfaceArrayOutput
}

type VrackDedicatedServerInterfaceArray []VrackDedicatedServerInterfaceInput

func (VrackDedicatedServerInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrackDedicatedServerInterface)(nil)).Elem()
}

func (i VrackDedicatedServerInterfaceArray) ToVrackDedicatedServerInterfaceArrayOutput() VrackDedicatedServerInterfaceArrayOutput {
	return i.ToVrackDedicatedServerInterfaceArrayOutputWithContext(context.Background())
}

func (i VrackDedicatedServerInterfaceArray) ToVrackDedicatedServerInterfaceArrayOutputWithContext(ctx context.Context) VrackDedicatedServerInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerInterfaceArrayOutput)
}

// VrackDedicatedServerInterfaceMapInput is an input type that accepts VrackDedicatedServerInterfaceMap and VrackDedicatedServerInterfaceMapOutput values.
// You can construct a concrete instance of `VrackDedicatedServerInterfaceMapInput` via:
//
//	VrackDedicatedServerInterfaceMap{ "key": VrackDedicatedServerInterfaceArgs{...} }
type VrackDedicatedServerInterfaceMapInput interface {
	pulumi.Input

	ToVrackDedicatedServerInterfaceMapOutput() VrackDedicatedServerInterfaceMapOutput
	ToVrackDedicatedServerInterfaceMapOutputWithContext(context.Context) VrackDedicatedServerInterfaceMapOutput
}

type VrackDedicatedServerInterfaceMap map[string]VrackDedicatedServerInterfaceInput

func (VrackDedicatedServerInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrackDedicatedServerInterface)(nil)).Elem()
}

func (i VrackDedicatedServerInterfaceMap) ToVrackDedicatedServerInterfaceMapOutput() VrackDedicatedServerInterfaceMapOutput {
	return i.ToVrackDedicatedServerInterfaceMapOutputWithContext(context.Background())
}

func (i VrackDedicatedServerInterfaceMap) ToVrackDedicatedServerInterfaceMapOutputWithContext(ctx context.Context) VrackDedicatedServerInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerInterfaceMapOutput)
}

type VrackDedicatedServerInterfaceOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackDedicatedServerInterface)(nil)).Elem()
}

func (o VrackDedicatedServerInterfaceOutput) ToVrackDedicatedServerInterfaceOutput() VrackDedicatedServerInterfaceOutput {
	return o
}

func (o VrackDedicatedServerInterfaceOutput) ToVrackDedicatedServerInterfaceOutputWithContext(ctx context.Context) VrackDedicatedServerInterfaceOutput {
	return o
}

// The id of dedicated server network interface.
func (o VrackDedicatedServerInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackDedicatedServerInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// The id of the vrack. If omitted,
// the `OVH_VRACK_SERVICE` environment variable is used.
func (o VrackDedicatedServerInterfaceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackDedicatedServerInterface) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type VrackDedicatedServerInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrackDedicatedServerInterface)(nil)).Elem()
}

func (o VrackDedicatedServerInterfaceArrayOutput) ToVrackDedicatedServerInterfaceArrayOutput() VrackDedicatedServerInterfaceArrayOutput {
	return o
}

func (o VrackDedicatedServerInterfaceArrayOutput) ToVrackDedicatedServerInterfaceArrayOutputWithContext(ctx context.Context) VrackDedicatedServerInterfaceArrayOutput {
	return o
}

func (o VrackDedicatedServerInterfaceArrayOutput) Index(i pulumi.IntInput) VrackDedicatedServerInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VrackDedicatedServerInterface {
		return vs[0].([]*VrackDedicatedServerInterface)[vs[1].(int)]
	}).(VrackDedicatedServerInterfaceOutput)
}

type VrackDedicatedServerInterfaceMapOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrackDedicatedServerInterface)(nil)).Elem()
}

func (o VrackDedicatedServerInterfaceMapOutput) ToVrackDedicatedServerInterfaceMapOutput() VrackDedicatedServerInterfaceMapOutput {
	return o
}

func (o VrackDedicatedServerInterfaceMapOutput) ToVrackDedicatedServerInterfaceMapOutputWithContext(ctx context.Context) VrackDedicatedServerInterfaceMapOutput {
	return o
}

func (o VrackDedicatedServerInterfaceMapOutput) MapIndex(k pulumi.StringInput) VrackDedicatedServerInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VrackDedicatedServerInterface {
		return vs[0].(map[string]*VrackDedicatedServerInterface)[vs[1].(string)]
	}).(VrackDedicatedServerInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrackDedicatedServerInterfaceInput)(nil)).Elem(), &VrackDedicatedServerInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrackDedicatedServerInterfaceArrayInput)(nil)).Elem(), VrackDedicatedServerInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrackDedicatedServerInterfaceMapInput)(nil)).Elem(), VrackDedicatedServerInterfaceMap{})
	pulumi.RegisterOutputType(VrackDedicatedServerInterfaceOutput{})
	pulumi.RegisterOutputType(VrackDedicatedServerInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VrackDedicatedServerInterfaceMapOutput{})
}
