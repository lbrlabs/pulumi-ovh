// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DedicatedServerUpdate struct {
	pulumi.CustomResourceState

	// boot id of the server
	BootId pulumi.IntOutput `pulumi:"bootId"`
	// Icmp monitoring state
	Monitoring pulumi.BoolOutput `pulumi:"monitoring"`
	// The serviceName of your dedicated server.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// error, hacked, hackedBlocked, ok
	State pulumi.StringOutput `pulumi:"state"`
}

// NewDedicatedServerUpdate registers a new resource with the given unique name, arguments, and options.
func NewDedicatedServerUpdate(ctx *pulumi.Context,
	name string, args *DedicatedServerUpdateArgs, opts ...pulumi.ResourceOption) (*DedicatedServerUpdate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DedicatedServerUpdate
	err := ctx.RegisterResource("ovh:index/dedicatedServerUpdate:DedicatedServerUpdate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedServerUpdate gets an existing DedicatedServerUpdate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedServerUpdate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedServerUpdateState, opts ...pulumi.ResourceOption) (*DedicatedServerUpdate, error) {
	var resource DedicatedServerUpdate
	err := ctx.ReadResource("ovh:index/dedicatedServerUpdate:DedicatedServerUpdate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedServerUpdate resources.
type dedicatedServerUpdateState struct {
	// boot id of the server
	BootId *int `pulumi:"bootId"`
	// Icmp monitoring state
	Monitoring *bool `pulumi:"monitoring"`
	// The serviceName of your dedicated server.
	ServiceName *string `pulumi:"serviceName"`
	// error, hacked, hackedBlocked, ok
	State *string `pulumi:"state"`
}

type DedicatedServerUpdateState struct {
	// boot id of the server
	BootId pulumi.IntPtrInput
	// Icmp monitoring state
	Monitoring pulumi.BoolPtrInput
	// The serviceName of your dedicated server.
	ServiceName pulumi.StringPtrInput
	// error, hacked, hackedBlocked, ok
	State pulumi.StringPtrInput
}

func (DedicatedServerUpdateState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedServerUpdateState)(nil)).Elem()
}

type dedicatedServerUpdateArgs struct {
	// boot id of the server
	BootId *int `pulumi:"bootId"`
	// Icmp monitoring state
	Monitoring *bool `pulumi:"monitoring"`
	// The serviceName of your dedicated server.
	ServiceName string `pulumi:"serviceName"`
	// error, hacked, hackedBlocked, ok
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a DedicatedServerUpdate resource.
type DedicatedServerUpdateArgs struct {
	// boot id of the server
	BootId pulumi.IntPtrInput
	// Icmp monitoring state
	Monitoring pulumi.BoolPtrInput
	// The serviceName of your dedicated server.
	ServiceName pulumi.StringInput
	// error, hacked, hackedBlocked, ok
	State pulumi.StringPtrInput
}

func (DedicatedServerUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedServerUpdateArgs)(nil)).Elem()
}

type DedicatedServerUpdateInput interface {
	pulumi.Input

	ToDedicatedServerUpdateOutput() DedicatedServerUpdateOutput
	ToDedicatedServerUpdateOutputWithContext(ctx context.Context) DedicatedServerUpdateOutput
}

func (*DedicatedServerUpdate) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedServerUpdate)(nil)).Elem()
}

func (i *DedicatedServerUpdate) ToDedicatedServerUpdateOutput() DedicatedServerUpdateOutput {
	return i.ToDedicatedServerUpdateOutputWithContext(context.Background())
}

func (i *DedicatedServerUpdate) ToDedicatedServerUpdateOutputWithContext(ctx context.Context) DedicatedServerUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerUpdateOutput)
}

// DedicatedServerUpdateArrayInput is an input type that accepts DedicatedServerUpdateArray and DedicatedServerUpdateArrayOutput values.
// You can construct a concrete instance of `DedicatedServerUpdateArrayInput` via:
//
//	DedicatedServerUpdateArray{ DedicatedServerUpdateArgs{...} }
type DedicatedServerUpdateArrayInput interface {
	pulumi.Input

	ToDedicatedServerUpdateArrayOutput() DedicatedServerUpdateArrayOutput
	ToDedicatedServerUpdateArrayOutputWithContext(context.Context) DedicatedServerUpdateArrayOutput
}

type DedicatedServerUpdateArray []DedicatedServerUpdateInput

func (DedicatedServerUpdateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedServerUpdate)(nil)).Elem()
}

func (i DedicatedServerUpdateArray) ToDedicatedServerUpdateArrayOutput() DedicatedServerUpdateArrayOutput {
	return i.ToDedicatedServerUpdateArrayOutputWithContext(context.Background())
}

func (i DedicatedServerUpdateArray) ToDedicatedServerUpdateArrayOutputWithContext(ctx context.Context) DedicatedServerUpdateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerUpdateArrayOutput)
}

// DedicatedServerUpdateMapInput is an input type that accepts DedicatedServerUpdateMap and DedicatedServerUpdateMapOutput values.
// You can construct a concrete instance of `DedicatedServerUpdateMapInput` via:
//
//	DedicatedServerUpdateMap{ "key": DedicatedServerUpdateArgs{...} }
type DedicatedServerUpdateMapInput interface {
	pulumi.Input

	ToDedicatedServerUpdateMapOutput() DedicatedServerUpdateMapOutput
	ToDedicatedServerUpdateMapOutputWithContext(context.Context) DedicatedServerUpdateMapOutput
}

type DedicatedServerUpdateMap map[string]DedicatedServerUpdateInput

func (DedicatedServerUpdateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedServerUpdate)(nil)).Elem()
}

func (i DedicatedServerUpdateMap) ToDedicatedServerUpdateMapOutput() DedicatedServerUpdateMapOutput {
	return i.ToDedicatedServerUpdateMapOutputWithContext(context.Background())
}

func (i DedicatedServerUpdateMap) ToDedicatedServerUpdateMapOutputWithContext(ctx context.Context) DedicatedServerUpdateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerUpdateMapOutput)
}

type DedicatedServerUpdateOutput struct{ *pulumi.OutputState }

func (DedicatedServerUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedServerUpdate)(nil)).Elem()
}

func (o DedicatedServerUpdateOutput) ToDedicatedServerUpdateOutput() DedicatedServerUpdateOutput {
	return o
}

func (o DedicatedServerUpdateOutput) ToDedicatedServerUpdateOutputWithContext(ctx context.Context) DedicatedServerUpdateOutput {
	return o
}

// boot id of the server
func (o DedicatedServerUpdateOutput) BootId() pulumi.IntOutput {
	return o.ApplyT(func(v *DedicatedServerUpdate) pulumi.IntOutput { return v.BootId }).(pulumi.IntOutput)
}

// Icmp monitoring state
func (o DedicatedServerUpdateOutput) Monitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v *DedicatedServerUpdate) pulumi.BoolOutput { return v.Monitoring }).(pulumi.BoolOutput)
}

// The serviceName of your dedicated server.
func (o DedicatedServerUpdateOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedServerUpdate) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// error, hacked, hackedBlocked, ok
func (o DedicatedServerUpdateOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedServerUpdate) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type DedicatedServerUpdateArrayOutput struct{ *pulumi.OutputState }

func (DedicatedServerUpdateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedServerUpdate)(nil)).Elem()
}

func (o DedicatedServerUpdateArrayOutput) ToDedicatedServerUpdateArrayOutput() DedicatedServerUpdateArrayOutput {
	return o
}

func (o DedicatedServerUpdateArrayOutput) ToDedicatedServerUpdateArrayOutputWithContext(ctx context.Context) DedicatedServerUpdateArrayOutput {
	return o
}

func (o DedicatedServerUpdateArrayOutput) Index(i pulumi.IntInput) DedicatedServerUpdateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DedicatedServerUpdate {
		return vs[0].([]*DedicatedServerUpdate)[vs[1].(int)]
	}).(DedicatedServerUpdateOutput)
}

type DedicatedServerUpdateMapOutput struct{ *pulumi.OutputState }

func (DedicatedServerUpdateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedServerUpdate)(nil)).Elem()
}

func (o DedicatedServerUpdateMapOutput) ToDedicatedServerUpdateMapOutput() DedicatedServerUpdateMapOutput {
	return o
}

func (o DedicatedServerUpdateMapOutput) ToDedicatedServerUpdateMapOutputWithContext(ctx context.Context) DedicatedServerUpdateMapOutput {
	return o
}

func (o DedicatedServerUpdateMapOutput) MapIndex(k pulumi.StringInput) DedicatedServerUpdateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DedicatedServerUpdate {
		return vs[0].(map[string]*DedicatedServerUpdate)[vs[1].(string)]
	}).(DedicatedServerUpdateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedServerUpdateInput)(nil)).Elem(), &DedicatedServerUpdate{})
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedServerUpdateArrayInput)(nil)).Elem(), DedicatedServerUpdateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedServerUpdateMapInput)(nil)).Elem(), DedicatedServerUpdateMap{})
	pulumi.RegisterOutputType(DedicatedServerUpdateOutput{})
	pulumi.RegisterOutputType(DedicatedServerUpdateArrayOutput{})
	pulumi.RegisterOutputType(DedicatedServerUpdateMapOutput{})
}
