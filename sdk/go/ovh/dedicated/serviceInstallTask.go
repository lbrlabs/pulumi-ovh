// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicated

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/Dedicated"
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/Me"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			rescue, err := Dedicated.GetServerBoots(ctx, &dedicated.GetServerBootsArgs{
//				ServiceName: "ns00000.ip-1-2-3.eu",
//				BootType:    pulumi.StringRef("rescue"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			key, err := Me.NewSshKey(ctx, "key", &Me.SshKeyArgs{
//				KeyName: pulumi.String("mykey"),
//				Key:     pulumi.String("ssh-ed25519 AAAAC3..."),
//			})
//			if err != nil {
//				return err
//			}
//			debian, err := Me.NewInstallationTemplate(ctx, "debian", &Me.InstallationTemplateArgs{
//				BaseTemplateName: pulumi.String("debian10_64"),
//				TemplateName:     pulumi.String("mydebian10"),
//				DefaultLanguage:  pulumi.String("en"),
//				Customization: &me.InstallationTemplateCustomizationArgs{
//					ChangeLog:      pulumi.String("v1"),
//					CustomHostname: pulumi.String("mytest"),
//					SshKeyName:     key.KeyName,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Dedicated.NewServiceInstallTask(ctx, "serverInstall", &Dedicated.ServiceInstallTaskArgs{
//				ServiceName:     pulumi.String("ns00000.ip-1-2-3.eu"),
//				TemplateName:    debian.TemplateName,
//				BootidOnDestroy: pulumi.Int(rescue.Results[0]),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ServiceInstallTask struct {
	pulumi.CustomResourceState

	// If set, reboot the server on the specified boot id during destroy phase.
	BootidOnDestroy pulumi.IntPtrOutput `pulumi:"bootidOnDestroy"`
	// Details of this task. (should be `Install asked`)
	Comment pulumi.StringOutput `pulumi:"comment"`
	// see `details` block below.
	Details ServiceInstallTaskDetailsPtrOutput `pulumi:"details"`
	// Completion date in RFC3339 format.
	DoneDate pulumi.StringOutput `pulumi:"doneDate"`
	// Function name (should be `hardInstall`).
	Function pulumi.StringOutput `pulumi:"function"`
	// Last update in RFC3339 format.
	LastUpdate pulumi.StringOutput `pulumi:"lastUpdate"`
	// Partition scheme name.
	PartitionSchemeName pulumi.StringPtrOutput `pulumi:"partitionSchemeName"`
	// The serviceName of your dedicated server.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Task creation date in RFC3339 format.
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// Task status (should be `done`)
	Status pulumi.StringOutput `pulumi:"status"`
	// Template name.
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewServiceInstallTask registers a new resource with the given unique name, arguments, and options.
func NewServiceInstallTask(ctx *pulumi.Context,
	name string, args *ServiceInstallTaskArgs, opts ...pulumi.ResourceOption) (*ServiceInstallTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ServiceInstallTask
	err := ctx.RegisterResource("ovh:Dedicated/serviceInstallTask:ServiceInstallTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceInstallTask gets an existing ServiceInstallTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceInstallTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceInstallTaskState, opts ...pulumi.ResourceOption) (*ServiceInstallTask, error) {
	var resource ServiceInstallTask
	err := ctx.ReadResource("ovh:Dedicated/serviceInstallTask:ServiceInstallTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceInstallTask resources.
type serviceInstallTaskState struct {
	// If set, reboot the server on the specified boot id during destroy phase.
	BootidOnDestroy *int `pulumi:"bootidOnDestroy"`
	// Details of this task. (should be `Install asked`)
	Comment *string `pulumi:"comment"`
	// see `details` block below.
	Details *ServiceInstallTaskDetails `pulumi:"details"`
	// Completion date in RFC3339 format.
	DoneDate *string `pulumi:"doneDate"`
	// Function name (should be `hardInstall`).
	Function *string `pulumi:"function"`
	// Last update in RFC3339 format.
	LastUpdate *string `pulumi:"lastUpdate"`
	// Partition scheme name.
	PartitionSchemeName *string `pulumi:"partitionSchemeName"`
	// The serviceName of your dedicated server.
	ServiceName *string `pulumi:"serviceName"`
	// Task creation date in RFC3339 format.
	StartDate *string `pulumi:"startDate"`
	// Task status (should be `done`)
	Status *string `pulumi:"status"`
	// Template name.
	TemplateName *string `pulumi:"templateName"`
}

type ServiceInstallTaskState struct {
	// If set, reboot the server on the specified boot id during destroy phase.
	BootidOnDestroy pulumi.IntPtrInput
	// Details of this task. (should be `Install asked`)
	Comment pulumi.StringPtrInput
	// see `details` block below.
	Details ServiceInstallTaskDetailsPtrInput
	// Completion date in RFC3339 format.
	DoneDate pulumi.StringPtrInput
	// Function name (should be `hardInstall`).
	Function pulumi.StringPtrInput
	// Last update in RFC3339 format.
	LastUpdate pulumi.StringPtrInput
	// Partition scheme name.
	PartitionSchemeName pulumi.StringPtrInput
	// The serviceName of your dedicated server.
	ServiceName pulumi.StringPtrInput
	// Task creation date in RFC3339 format.
	StartDate pulumi.StringPtrInput
	// Task status (should be `done`)
	Status pulumi.StringPtrInput
	// Template name.
	TemplateName pulumi.StringPtrInput
}

func (ServiceInstallTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceInstallTaskState)(nil)).Elem()
}

type serviceInstallTaskArgs struct {
	// If set, reboot the server on the specified boot id during destroy phase.
	BootidOnDestroy *int `pulumi:"bootidOnDestroy"`
	// see `details` block below.
	Details *ServiceInstallTaskDetails `pulumi:"details"`
	// Partition scheme name.
	PartitionSchemeName *string `pulumi:"partitionSchemeName"`
	// The serviceName of your dedicated server.
	ServiceName string `pulumi:"serviceName"`
	// Template name.
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a ServiceInstallTask resource.
type ServiceInstallTaskArgs struct {
	// If set, reboot the server on the specified boot id during destroy phase.
	BootidOnDestroy pulumi.IntPtrInput
	// see `details` block below.
	Details ServiceInstallTaskDetailsPtrInput
	// Partition scheme name.
	PartitionSchemeName pulumi.StringPtrInput
	// The serviceName of your dedicated server.
	ServiceName pulumi.StringInput
	// Template name.
	TemplateName pulumi.StringInput
}

func (ServiceInstallTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceInstallTaskArgs)(nil)).Elem()
}

type ServiceInstallTaskInput interface {
	pulumi.Input

	ToServiceInstallTaskOutput() ServiceInstallTaskOutput
	ToServiceInstallTaskOutputWithContext(ctx context.Context) ServiceInstallTaskOutput
}

func (*ServiceInstallTask) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceInstallTask)(nil)).Elem()
}

func (i *ServiceInstallTask) ToServiceInstallTaskOutput() ServiceInstallTaskOutput {
	return i.ToServiceInstallTaskOutputWithContext(context.Background())
}

func (i *ServiceInstallTask) ToServiceInstallTaskOutputWithContext(ctx context.Context) ServiceInstallTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceInstallTaskOutput)
}

// ServiceInstallTaskArrayInput is an input type that accepts ServiceInstallTaskArray and ServiceInstallTaskArrayOutput values.
// You can construct a concrete instance of `ServiceInstallTaskArrayInput` via:
//
//	ServiceInstallTaskArray{ ServiceInstallTaskArgs{...} }
type ServiceInstallTaskArrayInput interface {
	pulumi.Input

	ToServiceInstallTaskArrayOutput() ServiceInstallTaskArrayOutput
	ToServiceInstallTaskArrayOutputWithContext(context.Context) ServiceInstallTaskArrayOutput
}

type ServiceInstallTaskArray []ServiceInstallTaskInput

func (ServiceInstallTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceInstallTask)(nil)).Elem()
}

func (i ServiceInstallTaskArray) ToServiceInstallTaskArrayOutput() ServiceInstallTaskArrayOutput {
	return i.ToServiceInstallTaskArrayOutputWithContext(context.Background())
}

func (i ServiceInstallTaskArray) ToServiceInstallTaskArrayOutputWithContext(ctx context.Context) ServiceInstallTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceInstallTaskArrayOutput)
}

// ServiceInstallTaskMapInput is an input type that accepts ServiceInstallTaskMap and ServiceInstallTaskMapOutput values.
// You can construct a concrete instance of `ServiceInstallTaskMapInput` via:
//
//	ServiceInstallTaskMap{ "key": ServiceInstallTaskArgs{...} }
type ServiceInstallTaskMapInput interface {
	pulumi.Input

	ToServiceInstallTaskMapOutput() ServiceInstallTaskMapOutput
	ToServiceInstallTaskMapOutputWithContext(context.Context) ServiceInstallTaskMapOutput
}

type ServiceInstallTaskMap map[string]ServiceInstallTaskInput

func (ServiceInstallTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceInstallTask)(nil)).Elem()
}

func (i ServiceInstallTaskMap) ToServiceInstallTaskMapOutput() ServiceInstallTaskMapOutput {
	return i.ToServiceInstallTaskMapOutputWithContext(context.Background())
}

func (i ServiceInstallTaskMap) ToServiceInstallTaskMapOutputWithContext(ctx context.Context) ServiceInstallTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceInstallTaskMapOutput)
}

type ServiceInstallTaskOutput struct{ *pulumi.OutputState }

func (ServiceInstallTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceInstallTask)(nil)).Elem()
}

func (o ServiceInstallTaskOutput) ToServiceInstallTaskOutput() ServiceInstallTaskOutput {
	return o
}

func (o ServiceInstallTaskOutput) ToServiceInstallTaskOutputWithContext(ctx context.Context) ServiceInstallTaskOutput {
	return o
}

// If set, reboot the server on the specified boot id during destroy phase.
func (o ServiceInstallTaskOutput) BootidOnDestroy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceInstallTask) pulumi.IntPtrOutput { return v.BootidOnDestroy }).(pulumi.IntPtrOutput)
}

// Details of this task. (should be `Install asked`)
func (o ServiceInstallTaskOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceInstallTask) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// see `details` block below.
func (o ServiceInstallTaskOutput) Details() ServiceInstallTaskDetailsPtrOutput {
	return o.ApplyT(func(v *ServiceInstallTask) ServiceInstallTaskDetailsPtrOutput { return v.Details }).(ServiceInstallTaskDetailsPtrOutput)
}

// Completion date in RFC3339 format.
func (o ServiceInstallTaskOutput) DoneDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceInstallTask) pulumi.StringOutput { return v.DoneDate }).(pulumi.StringOutput)
}

// Function name (should be `hardInstall`).
func (o ServiceInstallTaskOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceInstallTask) pulumi.StringOutput { return v.Function }).(pulumi.StringOutput)
}

// Last update in RFC3339 format.
func (o ServiceInstallTaskOutput) LastUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceInstallTask) pulumi.StringOutput { return v.LastUpdate }).(pulumi.StringOutput)
}

// Partition scheme name.
func (o ServiceInstallTaskOutput) PartitionSchemeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInstallTask) pulumi.StringPtrOutput { return v.PartitionSchemeName }).(pulumi.StringPtrOutput)
}

// The serviceName of your dedicated server.
func (o ServiceInstallTaskOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceInstallTask) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Task creation date in RFC3339 format.
func (o ServiceInstallTaskOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceInstallTask) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// Task status (should be `done`)
func (o ServiceInstallTaskOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceInstallTask) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Template name.
func (o ServiceInstallTaskOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceInstallTask) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

type ServiceInstallTaskArrayOutput struct{ *pulumi.OutputState }

func (ServiceInstallTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceInstallTask)(nil)).Elem()
}

func (o ServiceInstallTaskArrayOutput) ToServiceInstallTaskArrayOutput() ServiceInstallTaskArrayOutput {
	return o
}

func (o ServiceInstallTaskArrayOutput) ToServiceInstallTaskArrayOutputWithContext(ctx context.Context) ServiceInstallTaskArrayOutput {
	return o
}

func (o ServiceInstallTaskArrayOutput) Index(i pulumi.IntInput) ServiceInstallTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceInstallTask {
		return vs[0].([]*ServiceInstallTask)[vs[1].(int)]
	}).(ServiceInstallTaskOutput)
}

type ServiceInstallTaskMapOutput struct{ *pulumi.OutputState }

func (ServiceInstallTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceInstallTask)(nil)).Elem()
}

func (o ServiceInstallTaskMapOutput) ToServiceInstallTaskMapOutput() ServiceInstallTaskMapOutput {
	return o
}

func (o ServiceInstallTaskMapOutput) ToServiceInstallTaskMapOutputWithContext(ctx context.Context) ServiceInstallTaskMapOutput {
	return o
}

func (o ServiceInstallTaskMapOutput) MapIndex(k pulumi.StringInput) ServiceInstallTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceInstallTask {
		return vs[0].(map[string]*ServiceInstallTask)[vs[1].(string)]
	}).(ServiceInstallTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInstallTaskInput)(nil)).Elem(), &ServiceInstallTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInstallTaskArrayInput)(nil)).Elem(), ServiceInstallTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInstallTaskMapInput)(nil)).Elem(), ServiceInstallTaskMap{})
	pulumi.RegisterOutputType(ServiceInstallTaskOutput{})
	pulumi.RegisterOutputType(ServiceInstallTaskArrayOutput{})
	pulumi.RegisterOutputType(ServiceInstallTaskMapOutput{})
}
