// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a http backend server group (farm) to be used by loadbalancing frontend(s)
type IpLoadBalancingHttpFarm struct {
	pulumi.CustomResourceState

	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance pulumi.StringPtrOutput `pulumi:"balance"`
	// Readable label for loadbalancer farm
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Port for backends to recieve traffic on.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// define a backend healthcheck probe
	Probe IpLoadBalancingHttpFarmProbePtrOutput `pulumi:"probe"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
	Stickiness pulumi.StringPtrOutput `pulumi:"stickiness"`
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId pulumi.IntPtrOutput `pulumi:"vrackNetworkId"`
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIpLoadBalancingHttpFarm registers a new resource with the given unique name, arguments, and options.
func NewIpLoadBalancingHttpFarm(ctx *pulumi.Context,
	name string, args *IpLoadBalancingHttpFarmArgs, opts ...pulumi.ResourceOption) (*IpLoadBalancingHttpFarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IpLoadBalancingHttpFarm
	err := ctx.RegisterResource("ovh:index/ipLoadBalancingHttpFarm:IpLoadBalancingHttpFarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpLoadBalancingHttpFarm gets an existing IpLoadBalancingHttpFarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpLoadBalancingHttpFarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpLoadBalancingHttpFarmState, opts ...pulumi.ResourceOption) (*IpLoadBalancingHttpFarm, error) {
	var resource IpLoadBalancingHttpFarm
	err := ctx.ReadResource("ovh:index/ipLoadBalancingHttpFarm:IpLoadBalancingHttpFarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpLoadBalancingHttpFarm resources.
type ipLoadBalancingHttpFarmState struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance *string `pulumi:"balance"`
	// Readable label for loadbalancer farm
	DisplayName *string `pulumi:"displayName"`
	// Port for backends to recieve traffic on.
	Port *int `pulumi:"port"`
	// define a backend healthcheck probe
	Probe *IpLoadBalancingHttpFarmProbe `pulumi:"probe"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
	Stickiness *string `pulumi:"stickiness"`
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId *int `pulumi:"vrackNetworkId"`
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone *string `pulumi:"zone"`
}

type IpLoadBalancingHttpFarmState struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance pulumi.StringPtrInput
	// Readable label for loadbalancer farm
	DisplayName pulumi.StringPtrInput
	// Port for backends to recieve traffic on.
	Port pulumi.IntPtrInput
	// define a backend healthcheck probe
	Probe IpLoadBalancingHttpFarmProbePtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
	Stickiness pulumi.StringPtrInput
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId pulumi.IntPtrInput
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone pulumi.StringPtrInput
}

func (IpLoadBalancingHttpFarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipLoadBalancingHttpFarmState)(nil)).Elem()
}

type ipLoadBalancingHttpFarmArgs struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance *string `pulumi:"balance"`
	// Readable label for loadbalancer farm
	DisplayName *string `pulumi:"displayName"`
	// Port for backends to recieve traffic on.
	Port *int `pulumi:"port"`
	// define a backend healthcheck probe
	Probe *IpLoadBalancingHttpFarmProbe `pulumi:"probe"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
	Stickiness *string `pulumi:"stickiness"`
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId *int `pulumi:"vrackNetworkId"`
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a IpLoadBalancingHttpFarm resource.
type IpLoadBalancingHttpFarmArgs struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance pulumi.StringPtrInput
	// Readable label for loadbalancer farm
	DisplayName pulumi.StringPtrInput
	// Port for backends to recieve traffic on.
	Port pulumi.IntPtrInput
	// define a backend healthcheck probe
	Probe IpLoadBalancingHttpFarmProbePtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
	Stickiness pulumi.StringPtrInput
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId pulumi.IntPtrInput
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone pulumi.StringInput
}

func (IpLoadBalancingHttpFarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipLoadBalancingHttpFarmArgs)(nil)).Elem()
}

type IpLoadBalancingHttpFarmInput interface {
	pulumi.Input

	ToIpLoadBalancingHttpFarmOutput() IpLoadBalancingHttpFarmOutput
	ToIpLoadBalancingHttpFarmOutputWithContext(ctx context.Context) IpLoadBalancingHttpFarmOutput
}

func (*IpLoadBalancingHttpFarm) ElementType() reflect.Type {
	return reflect.TypeOf((**IpLoadBalancingHttpFarm)(nil)).Elem()
}

func (i *IpLoadBalancingHttpFarm) ToIpLoadBalancingHttpFarmOutput() IpLoadBalancingHttpFarmOutput {
	return i.ToIpLoadBalancingHttpFarmOutputWithContext(context.Background())
}

func (i *IpLoadBalancingHttpFarm) ToIpLoadBalancingHttpFarmOutputWithContext(ctx context.Context) IpLoadBalancingHttpFarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingHttpFarmOutput)
}

// IpLoadBalancingHttpFarmArrayInput is an input type that accepts IpLoadBalancingHttpFarmArray and IpLoadBalancingHttpFarmArrayOutput values.
// You can construct a concrete instance of `IpLoadBalancingHttpFarmArrayInput` via:
//
//	IpLoadBalancingHttpFarmArray{ IpLoadBalancingHttpFarmArgs{...} }
type IpLoadBalancingHttpFarmArrayInput interface {
	pulumi.Input

	ToIpLoadBalancingHttpFarmArrayOutput() IpLoadBalancingHttpFarmArrayOutput
	ToIpLoadBalancingHttpFarmArrayOutputWithContext(context.Context) IpLoadBalancingHttpFarmArrayOutput
}

type IpLoadBalancingHttpFarmArray []IpLoadBalancingHttpFarmInput

func (IpLoadBalancingHttpFarmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpLoadBalancingHttpFarm)(nil)).Elem()
}

func (i IpLoadBalancingHttpFarmArray) ToIpLoadBalancingHttpFarmArrayOutput() IpLoadBalancingHttpFarmArrayOutput {
	return i.ToIpLoadBalancingHttpFarmArrayOutputWithContext(context.Background())
}

func (i IpLoadBalancingHttpFarmArray) ToIpLoadBalancingHttpFarmArrayOutputWithContext(ctx context.Context) IpLoadBalancingHttpFarmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingHttpFarmArrayOutput)
}

// IpLoadBalancingHttpFarmMapInput is an input type that accepts IpLoadBalancingHttpFarmMap and IpLoadBalancingHttpFarmMapOutput values.
// You can construct a concrete instance of `IpLoadBalancingHttpFarmMapInput` via:
//
//	IpLoadBalancingHttpFarmMap{ "key": IpLoadBalancingHttpFarmArgs{...} }
type IpLoadBalancingHttpFarmMapInput interface {
	pulumi.Input

	ToIpLoadBalancingHttpFarmMapOutput() IpLoadBalancingHttpFarmMapOutput
	ToIpLoadBalancingHttpFarmMapOutputWithContext(context.Context) IpLoadBalancingHttpFarmMapOutput
}

type IpLoadBalancingHttpFarmMap map[string]IpLoadBalancingHttpFarmInput

func (IpLoadBalancingHttpFarmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpLoadBalancingHttpFarm)(nil)).Elem()
}

func (i IpLoadBalancingHttpFarmMap) ToIpLoadBalancingHttpFarmMapOutput() IpLoadBalancingHttpFarmMapOutput {
	return i.ToIpLoadBalancingHttpFarmMapOutputWithContext(context.Background())
}

func (i IpLoadBalancingHttpFarmMap) ToIpLoadBalancingHttpFarmMapOutputWithContext(ctx context.Context) IpLoadBalancingHttpFarmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingHttpFarmMapOutput)
}

type IpLoadBalancingHttpFarmOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingHttpFarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpLoadBalancingHttpFarm)(nil)).Elem()
}

func (o IpLoadBalancingHttpFarmOutput) ToIpLoadBalancingHttpFarmOutput() IpLoadBalancingHttpFarmOutput {
	return o
}

func (o IpLoadBalancingHttpFarmOutput) ToIpLoadBalancingHttpFarmOutputWithContext(ctx context.Context) IpLoadBalancingHttpFarmOutput {
	return o
}

// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
func (o IpLoadBalancingHttpFarmOutput) Balance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpFarm) pulumi.StringPtrOutput { return v.Balance }).(pulumi.StringPtrOutput)
}

// Readable label for loadbalancer farm
func (o IpLoadBalancingHttpFarmOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpFarm) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Port for backends to recieve traffic on.
func (o IpLoadBalancingHttpFarmOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpFarm) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// define a backend healthcheck probe
func (o IpLoadBalancingHttpFarmOutput) Probe() IpLoadBalancingHttpFarmProbePtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpFarm) IpLoadBalancingHttpFarmProbePtrOutput { return v.Probe }).(IpLoadBalancingHttpFarmProbePtrOutput)
}

// The internal name of your IP load balancing
func (o IpLoadBalancingHttpFarmOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpFarm) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
func (o IpLoadBalancingHttpFarmOutput) Stickiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpFarm) pulumi.StringPtrOutput { return v.Stickiness }).(pulumi.StringPtrOutput)
}

// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
func (o IpLoadBalancingHttpFarmOutput) VrackNetworkId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpFarm) pulumi.IntPtrOutput { return v.VrackNetworkId }).(pulumi.IntPtrOutput)
}

// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
func (o IpLoadBalancingHttpFarmOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpFarm) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type IpLoadBalancingHttpFarmArrayOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingHttpFarmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpLoadBalancingHttpFarm)(nil)).Elem()
}

func (o IpLoadBalancingHttpFarmArrayOutput) ToIpLoadBalancingHttpFarmArrayOutput() IpLoadBalancingHttpFarmArrayOutput {
	return o
}

func (o IpLoadBalancingHttpFarmArrayOutput) ToIpLoadBalancingHttpFarmArrayOutputWithContext(ctx context.Context) IpLoadBalancingHttpFarmArrayOutput {
	return o
}

func (o IpLoadBalancingHttpFarmArrayOutput) Index(i pulumi.IntInput) IpLoadBalancingHttpFarmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpLoadBalancingHttpFarm {
		return vs[0].([]*IpLoadBalancingHttpFarm)[vs[1].(int)]
	}).(IpLoadBalancingHttpFarmOutput)
}

type IpLoadBalancingHttpFarmMapOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingHttpFarmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpLoadBalancingHttpFarm)(nil)).Elem()
}

func (o IpLoadBalancingHttpFarmMapOutput) ToIpLoadBalancingHttpFarmMapOutput() IpLoadBalancingHttpFarmMapOutput {
	return o
}

func (o IpLoadBalancingHttpFarmMapOutput) ToIpLoadBalancingHttpFarmMapOutputWithContext(ctx context.Context) IpLoadBalancingHttpFarmMapOutput {
	return o
}

func (o IpLoadBalancingHttpFarmMapOutput) MapIndex(k pulumi.StringInput) IpLoadBalancingHttpFarmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpLoadBalancingHttpFarm {
		return vs[0].(map[string]*IpLoadBalancingHttpFarm)[vs[1].(string)]
	}).(IpLoadBalancingHttpFarmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingHttpFarmInput)(nil)).Elem(), &IpLoadBalancingHttpFarm{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingHttpFarmArrayInput)(nil)).Elem(), IpLoadBalancingHttpFarmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingHttpFarmMapInput)(nil)).Elem(), IpLoadBalancingHttpFarmMap{})
	pulumi.RegisterOutputType(IpLoadBalancingHttpFarmOutput{})
	pulumi.RegisterOutputType(IpLoadBalancingHttpFarmArrayOutput{})
	pulumi.RegisterOutputType(IpLoadBalancingHttpFarmMapOutput{})
}
