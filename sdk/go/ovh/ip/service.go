// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ip

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Orders an ip service.
//
// ## Important
//
// This resource orders an OVHcloud product for a long period of time and may generate heavy costs !
// Use with caution.
//
// __NOTE__ 1: the "default-payment-mean" will scan your registered bank accounts, credit card and paypal payment means to find your default payment mean.
//
// __NOTE__ 2: this resource is in beta state. Use with caution.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/Ip"
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/Order"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mycart, err := Order.GetCart(ctx, &order.GetCartArgs{
//				OvhSubsidiary: "fr",
//				Description:   pulumi.StringRef("order ip block"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ipblockCartProductPlan, err := Order.GetCartProductPlan(ctx, &order.GetCartProductPlanArgs{
//				CartId:        mycart.Id,
//				PriceCapacity: "renew",
//				Product:       "ip",
//				PlanCode:      "ip-v4-s30-ripe",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ip.NewService(ctx, "ipblockService", &Ip.ServiceArgs{
//				OvhSubsidiary: pulumi.String(mycart.OvhSubsidiary),
//				PaymentMean:   pulumi.String("ovh-account"),
//				Description:   pulumi.String("my ip block"),
//				Plan: &ip.ServicePlanArgs{
//					Duration:    pulumi.String(ipblockCartProductPlan.SelectedPrices[0].Duration),
//					PlanCode:    pulumi.String(ipblockCartProductPlan.PlanCode),
//					PricingMode: pulumi.String(ipblockCartProductPlan.SelectedPrices[0].PricingMode),
//					Configurations: ip.ServicePlanConfigurationArray{
//						&ip.ServicePlanConfigurationArgs{
//							Label: pulumi.String("country"),
//							Value: pulumi.String("FR"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Service struct {
	pulumi.CustomResourceState

	// can be terminated
	CanBeTerminated pulumi.BoolOutput `pulumi:"canBeTerminated"`
	// country
	Country pulumi.StringOutput `pulumi:"country"`
	// Custom description on your ip.
	Description pulumi.StringOutput `pulumi:"description"`
	// ip block
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Details about an Order
	Orders ServiceOrderArrayOutput `pulumi:"orders"`
	// IP block organisation Id
	OrganisationId pulumi.StringOutput `pulumi:"organisationId"`
	// OVHcloud Subsidiary
	OvhSubsidiary pulumi.StringOutput `pulumi:"ovhSubsidiary"`
	// OVHcloud payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean pulumi.StringOutput `pulumi:"paymentMean"`
	// Product Plan to order
	Plan ServicePlanOutput `pulumi:"plan"`
	// Product Plan to order
	PlanOptions ServicePlanOptionArrayOutput `pulumi:"planOptions"`
	// Routage information
	RoutedTos ServiceRoutedToArrayOutput `pulumi:"routedTos"`
	// Service where ip is routed to
	// * `serviceName`: service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Possible values for ip type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OvhSubsidiary == nil {
		return nil, errors.New("invalid value for required argument 'OvhSubsidiary'")
	}
	if args.PaymentMean == nil {
		return nil, errors.New("invalid value for required argument 'PaymentMean'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("ovh:Ip/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("ovh:Ip/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// can be terminated
	CanBeTerminated *bool `pulumi:"canBeTerminated"`
	// country
	Country *string `pulumi:"country"`
	// Custom description on your ip.
	Description *string `pulumi:"description"`
	// ip block
	Ip *string `pulumi:"ip"`
	// Details about an Order
	Orders []ServiceOrder `pulumi:"orders"`
	// IP block organisation Id
	OrganisationId *string `pulumi:"organisationId"`
	// OVHcloud Subsidiary
	OvhSubsidiary *string `pulumi:"ovhSubsidiary"`
	// OVHcloud payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean *string `pulumi:"paymentMean"`
	// Product Plan to order
	Plan *ServicePlan `pulumi:"plan"`
	// Product Plan to order
	PlanOptions []ServicePlanOption `pulumi:"planOptions"`
	// Routage information
	RoutedTos []ServiceRoutedTo `pulumi:"routedTos"`
	// Service where ip is routed to
	// * `serviceName`: service name
	ServiceName *string `pulumi:"serviceName"`
	// Possible values for ip type
	Type *string `pulumi:"type"`
}

type ServiceState struct {
	// can be terminated
	CanBeTerminated pulumi.BoolPtrInput
	// country
	Country pulumi.StringPtrInput
	// Custom description on your ip.
	Description pulumi.StringPtrInput
	// ip block
	Ip pulumi.StringPtrInput
	// Details about an Order
	Orders ServiceOrderArrayInput
	// IP block organisation Id
	OrganisationId pulumi.StringPtrInput
	// OVHcloud Subsidiary
	OvhSubsidiary pulumi.StringPtrInput
	// OVHcloud payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean pulumi.StringPtrInput
	// Product Plan to order
	Plan ServicePlanPtrInput
	// Product Plan to order
	PlanOptions ServicePlanOptionArrayInput
	// Routage information
	RoutedTos ServiceRoutedToArrayInput
	// Service where ip is routed to
	// * `serviceName`: service name
	ServiceName pulumi.StringPtrInput
	// Possible values for ip type
	Type pulumi.StringPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// Custom description on your ip.
	Description *string `pulumi:"description"`
	// OVHcloud Subsidiary
	OvhSubsidiary string `pulumi:"ovhSubsidiary"`
	// OVHcloud payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean string `pulumi:"paymentMean"`
	// Product Plan to order
	Plan ServicePlan `pulumi:"plan"`
	// Product Plan to order
	PlanOptions []ServicePlanOption `pulumi:"planOptions"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Custom description on your ip.
	Description pulumi.StringPtrInput
	// OVHcloud Subsidiary
	OvhSubsidiary pulumi.StringInput
	// OVHcloud payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean pulumi.StringInput
	// Product Plan to order
	Plan ServicePlanInput
	// Product Plan to order
	PlanOptions ServicePlanOptionArrayInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// can be terminated
func (o ServiceOutput) CanBeTerminated() pulumi.BoolOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolOutput { return v.CanBeTerminated }).(pulumi.BoolOutput)
}

// country
func (o ServiceOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Country }).(pulumi.StringOutput)
}

// Custom description on your ip.
func (o ServiceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// ip block
func (o ServiceOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Details about an Order
func (o ServiceOutput) Orders() ServiceOrderArrayOutput {
	return o.ApplyT(func(v *Service) ServiceOrderArrayOutput { return v.Orders }).(ServiceOrderArrayOutput)
}

// IP block organisation Id
func (o ServiceOutput) OrganisationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.OrganisationId }).(pulumi.StringOutput)
}

// OVHcloud Subsidiary
func (o ServiceOutput) OvhSubsidiary() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.OvhSubsidiary }).(pulumi.StringOutput)
}

// OVHcloud payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
func (o ServiceOutput) PaymentMean() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.PaymentMean }).(pulumi.StringOutput)
}

// Product Plan to order
func (o ServiceOutput) Plan() ServicePlanOutput {
	return o.ApplyT(func(v *Service) ServicePlanOutput { return v.Plan }).(ServicePlanOutput)
}

// Product Plan to order
func (o ServiceOutput) PlanOptions() ServicePlanOptionArrayOutput {
	return o.ApplyT(func(v *Service) ServicePlanOptionArrayOutput { return v.PlanOptions }).(ServicePlanOptionArrayOutput)
}

// Routage information
func (o ServiceOutput) RoutedTos() ServiceRoutedToArrayOutput {
	return o.ApplyT(func(v *Service) ServiceRoutedToArrayOutput { return v.RoutedTos }).(ServiceRoutedToArrayOutput)
}

// Service where ip is routed to
// * `serviceName`: service name
func (o ServiceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Possible values for ip type
func (o ServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
