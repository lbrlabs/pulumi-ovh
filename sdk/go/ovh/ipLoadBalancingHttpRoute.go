// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage http route for a loadbalancer service
//
// ## Example Usage
//
// Route which redirect all url to https.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh"
//	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ovh.NewIpLoadBalancingHttpRoute(ctx, "httpsredirect", &ovh.IpLoadBalancingHttpRouteArgs{
//				Action: &IpLoadBalancingHttpRouteActionArgs{
//					Status: pulumi.Int(302),
//					Target: pulumi.String(fmt.Sprintf("https://%v%v%v", host, path, arguments)),
//					Type:   pulumi.String("redirect"),
//				},
//				DisplayName: pulumi.String("Redirect to HTTPS"),
//				ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
//				Weight:      pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IpLoadBalancingHttpRoute struct {
	pulumi.CustomResourceState

	// Action triggered when all rules match
	Action IpLoadBalancingHttpRouteActionOutput `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId pulumi.IntOutput `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules IpLoadBalancingHttpRouteRuleTypeArrayOutput `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// HTTP status code for "redirect" and "reject" actions
	Status pulumi.StringOutput `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewIpLoadBalancingHttpRoute registers a new resource with the given unique name, arguments, and options.
func NewIpLoadBalancingHttpRoute(ctx *pulumi.Context,
	name string, args *IpLoadBalancingHttpRouteArgs, opts ...pulumi.ResourceOption) (*IpLoadBalancingHttpRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IpLoadBalancingHttpRoute
	err := ctx.RegisterResource("ovh:index/ipLoadBalancingHttpRoute:IpLoadBalancingHttpRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpLoadBalancingHttpRoute gets an existing IpLoadBalancingHttpRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpLoadBalancingHttpRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpLoadBalancingHttpRouteState, opts ...pulumi.ResourceOption) (*IpLoadBalancingHttpRoute, error) {
	var resource IpLoadBalancingHttpRoute
	err := ctx.ReadResource("ovh:index/ipLoadBalancingHttpRoute:IpLoadBalancingHttpRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpLoadBalancingHttpRoute resources.
type ipLoadBalancingHttpRouteState struct {
	// Action triggered when all rules match
	Action *IpLoadBalancingHttpRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *int `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules []IpLoadBalancingHttpRouteRuleType `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// HTTP status code for "redirect" and "reject" actions
	Status *string `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight *int `pulumi:"weight"`
}

type IpLoadBalancingHttpRouteState struct {
	// Action triggered when all rules match
	Action IpLoadBalancingHttpRouteActionPtrInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.IntPtrInput
	// List of rules to match to trigger action
	Rules IpLoadBalancingHttpRouteRuleTypeArrayInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// HTTP status code for "redirect" and "reject" actions
	Status pulumi.StringPtrInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight pulumi.IntPtrInput
}

func (IpLoadBalancingHttpRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipLoadBalancingHttpRouteState)(nil)).Elem()
}

type ipLoadBalancingHttpRouteArgs struct {
	// Action triggered when all rules match
	Action IpLoadBalancingHttpRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *int `pulumi:"frontendId"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a IpLoadBalancingHttpRoute resource.
type IpLoadBalancingHttpRouteArgs struct {
	// Action triggered when all rules match
	Action IpLoadBalancingHttpRouteActionInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.IntPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight pulumi.IntPtrInput
}

func (IpLoadBalancingHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipLoadBalancingHttpRouteArgs)(nil)).Elem()
}

type IpLoadBalancingHttpRouteInput interface {
	pulumi.Input

	ToIpLoadBalancingHttpRouteOutput() IpLoadBalancingHttpRouteOutput
	ToIpLoadBalancingHttpRouteOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteOutput
}

func (*IpLoadBalancingHttpRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**IpLoadBalancingHttpRoute)(nil)).Elem()
}

func (i *IpLoadBalancingHttpRoute) ToIpLoadBalancingHttpRouteOutput() IpLoadBalancingHttpRouteOutput {
	return i.ToIpLoadBalancingHttpRouteOutputWithContext(context.Background())
}

func (i *IpLoadBalancingHttpRoute) ToIpLoadBalancingHttpRouteOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingHttpRouteOutput)
}

// IpLoadBalancingHttpRouteArrayInput is an input type that accepts IpLoadBalancingHttpRouteArray and IpLoadBalancingHttpRouteArrayOutput values.
// You can construct a concrete instance of `IpLoadBalancingHttpRouteArrayInput` via:
//
//	IpLoadBalancingHttpRouteArray{ IpLoadBalancingHttpRouteArgs{...} }
type IpLoadBalancingHttpRouteArrayInput interface {
	pulumi.Input

	ToIpLoadBalancingHttpRouteArrayOutput() IpLoadBalancingHttpRouteArrayOutput
	ToIpLoadBalancingHttpRouteArrayOutputWithContext(context.Context) IpLoadBalancingHttpRouteArrayOutput
}

type IpLoadBalancingHttpRouteArray []IpLoadBalancingHttpRouteInput

func (IpLoadBalancingHttpRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpLoadBalancingHttpRoute)(nil)).Elem()
}

func (i IpLoadBalancingHttpRouteArray) ToIpLoadBalancingHttpRouteArrayOutput() IpLoadBalancingHttpRouteArrayOutput {
	return i.ToIpLoadBalancingHttpRouteArrayOutputWithContext(context.Background())
}

func (i IpLoadBalancingHttpRouteArray) ToIpLoadBalancingHttpRouteArrayOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingHttpRouteArrayOutput)
}

// IpLoadBalancingHttpRouteMapInput is an input type that accepts IpLoadBalancingHttpRouteMap and IpLoadBalancingHttpRouteMapOutput values.
// You can construct a concrete instance of `IpLoadBalancingHttpRouteMapInput` via:
//
//	IpLoadBalancingHttpRouteMap{ "key": IpLoadBalancingHttpRouteArgs{...} }
type IpLoadBalancingHttpRouteMapInput interface {
	pulumi.Input

	ToIpLoadBalancingHttpRouteMapOutput() IpLoadBalancingHttpRouteMapOutput
	ToIpLoadBalancingHttpRouteMapOutputWithContext(context.Context) IpLoadBalancingHttpRouteMapOutput
}

type IpLoadBalancingHttpRouteMap map[string]IpLoadBalancingHttpRouteInput

func (IpLoadBalancingHttpRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpLoadBalancingHttpRoute)(nil)).Elem()
}

func (i IpLoadBalancingHttpRouteMap) ToIpLoadBalancingHttpRouteMapOutput() IpLoadBalancingHttpRouteMapOutput {
	return i.ToIpLoadBalancingHttpRouteMapOutputWithContext(context.Background())
}

func (i IpLoadBalancingHttpRouteMap) ToIpLoadBalancingHttpRouteMapOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingHttpRouteMapOutput)
}

type IpLoadBalancingHttpRouteOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpLoadBalancingHttpRoute)(nil)).Elem()
}

func (o IpLoadBalancingHttpRouteOutput) ToIpLoadBalancingHttpRouteOutput() IpLoadBalancingHttpRouteOutput {
	return o
}

func (o IpLoadBalancingHttpRouteOutput) ToIpLoadBalancingHttpRouteOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteOutput {
	return o
}

// Action triggered when all rules match
func (o IpLoadBalancingHttpRouteOutput) Action() IpLoadBalancingHttpRouteActionOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRoute) IpLoadBalancingHttpRouteActionOutput { return v.Action }).(IpLoadBalancingHttpRouteActionOutput)
}

// Human readable name for your route, this field is for you
func (o IpLoadBalancingHttpRouteOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRoute) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Route traffic for this frontend
func (o IpLoadBalancingHttpRouteOutput) FrontendId() pulumi.IntOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRoute) pulumi.IntOutput { return v.FrontendId }).(pulumi.IntOutput)
}

// List of rules to match to trigger action
func (o IpLoadBalancingHttpRouteOutput) Rules() IpLoadBalancingHttpRouteRuleTypeArrayOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRoute) IpLoadBalancingHttpRouteRuleTypeArrayOutput { return v.Rules }).(IpLoadBalancingHttpRouteRuleTypeArrayOutput)
}

// The internal name of your IP load balancing
func (o IpLoadBalancingHttpRouteOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRoute) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// HTTP status code for "redirect" and "reject" actions
func (o IpLoadBalancingHttpRouteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRoute) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
func (o IpLoadBalancingHttpRouteOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRoute) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type IpLoadBalancingHttpRouteArrayOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingHttpRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpLoadBalancingHttpRoute)(nil)).Elem()
}

func (o IpLoadBalancingHttpRouteArrayOutput) ToIpLoadBalancingHttpRouteArrayOutput() IpLoadBalancingHttpRouteArrayOutput {
	return o
}

func (o IpLoadBalancingHttpRouteArrayOutput) ToIpLoadBalancingHttpRouteArrayOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteArrayOutput {
	return o
}

func (o IpLoadBalancingHttpRouteArrayOutput) Index(i pulumi.IntInput) IpLoadBalancingHttpRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpLoadBalancingHttpRoute {
		return vs[0].([]*IpLoadBalancingHttpRoute)[vs[1].(int)]
	}).(IpLoadBalancingHttpRouteOutput)
}

type IpLoadBalancingHttpRouteMapOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingHttpRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpLoadBalancingHttpRoute)(nil)).Elem()
}

func (o IpLoadBalancingHttpRouteMapOutput) ToIpLoadBalancingHttpRouteMapOutput() IpLoadBalancingHttpRouteMapOutput {
	return o
}

func (o IpLoadBalancingHttpRouteMapOutput) ToIpLoadBalancingHttpRouteMapOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteMapOutput {
	return o
}

func (o IpLoadBalancingHttpRouteMapOutput) MapIndex(k pulumi.StringInput) IpLoadBalancingHttpRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpLoadBalancingHttpRoute {
		return vs[0].(map[string]*IpLoadBalancingHttpRoute)[vs[1].(string)]
	}).(IpLoadBalancingHttpRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingHttpRouteInput)(nil)).Elem(), &IpLoadBalancingHttpRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingHttpRouteArrayInput)(nil)).Elem(), IpLoadBalancingHttpRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingHttpRouteMapInput)(nil)).Elem(), IpLoadBalancingHttpRouteMap{})
	pulumi.RegisterOutputType(IpLoadBalancingHttpRouteOutput{})
	pulumi.RegisterOutputType(IpLoadBalancingHttpRouteArrayOutput{})
	pulumi.RegisterOutputType(IpLoadBalancingHttpRouteMapOutput{})
}
