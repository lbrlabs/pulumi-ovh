// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an user for a database cluster associated with a public cloud project.
//
// With this resource you can create a user for the following database engine:
//
//   - `cassandra`
//   - `kafka`
//   - `kafkaConnect`
//   - `mysql`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ovh.LookupCloudProjectDatabase(ctx, &GetCloudProjectDatabaseArgs{
//				ServiceName: "XXXX",
//				Engine:      "YYYY",
//				ClusterId:   "ZZZZ",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ovh.NewCloudProjectDatabaseUser(ctx, "user", &ovh.CloudProjectDatabaseUserArgs{
//				ServiceName: pulumi.Any(ovh_cloud_project_database.Db.Service_name),
//				Engine:      pulumi.Any(ovh_cloud_project_database.Db.Engine),
//				ClusterId:   pulumi.Any(ovh_cloud_project_database.Db.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OVHcloud Managed database clusters users can be imported using the `service_name`, `engine`, `cluster_id` and `id` of the user, separated by "/" E.g.,
//
// ```sh
//
//	$ pulumi import ovh:index/cloudProjectDatabaseUser:CloudProjectDatabaseUser my_user <service_name>/<engine>/<cluster_id>/<id>
//
// ```
type CloudProjectDatabaseUser struct {
	pulumi.CustomResourceState

	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Date of the creation of the user.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The engine of the database cluster you want to add. To get a full list of available engine visit :
	// [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).\
	// Available engines for this resource (other have specific resource):
	// * `cassandra`
	// * `kafka`
	// * `kafkaConnect`
	// * `mysql`
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Name of the user.
	Name pulumi.StringOutput `pulumi:"name"`
	// Password of the user.
	Password pulumi.StringOutput `pulumi:"password"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Current status of the user.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewCloudProjectDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewCloudProjectDatabaseUser(ctx *pulumi.Context,
	name string, args *CloudProjectDatabaseUserArgs, opts ...pulumi.ResourceOption) (*CloudProjectDatabaseUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CloudProjectDatabaseUser
	err := ctx.RegisterResource("ovh:index/cloudProjectDatabaseUser:CloudProjectDatabaseUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProjectDatabaseUser gets an existing CloudProjectDatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProjectDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectDatabaseUserState, opts ...pulumi.ResourceOption) (*CloudProjectDatabaseUser, error) {
	var resource CloudProjectDatabaseUser
	err := ctx.ReadResource("ovh:index/cloudProjectDatabaseUser:CloudProjectDatabaseUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProjectDatabaseUser resources.
type cloudProjectDatabaseUserState struct {
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Date of the creation of the user.
	CreatedAt *string `pulumi:"createdAt"`
	// The engine of the database cluster you want to add. To get a full list of available engine visit :
	// [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).\
	// Available engines for this resource (other have specific resource):
	// * `cassandra`
	// * `kafka`
	// * `kafkaConnect`
	// * `mysql`
	Engine *string `pulumi:"engine"`
	// Name of the user.
	Name *string `pulumi:"name"`
	// Password of the user.
	Password *string `pulumi:"password"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName *string `pulumi:"serviceName"`
	// Current status of the user.
	Status *string `pulumi:"status"`
}

type CloudProjectDatabaseUserState struct {
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// Date of the creation of the user.
	CreatedAt pulumi.StringPtrInput
	// The engine of the database cluster you want to add. To get a full list of available engine visit :
	// [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).\
	// Available engines for this resource (other have specific resource):
	// * `cassandra`
	// * `kafka`
	// * `kafkaConnect`
	// * `mysql`
	Engine pulumi.StringPtrInput
	// Name of the user.
	Name pulumi.StringPtrInput
	// Password of the user.
	Password pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringPtrInput
	// Current status of the user.
	Status pulumi.StringPtrInput
}

func (CloudProjectDatabaseUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseUserState)(nil)).Elem()
}

type cloudProjectDatabaseUserArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// The engine of the database cluster you want to add. To get a full list of available engine visit :
	// [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).\
	// Available engines for this resource (other have specific resource):
	// * `cassandra`
	// * `kafka`
	// * `kafkaConnect`
	// * `mysql`
	Engine string `pulumi:"engine"`
	// Name of the user.
	Name *string `pulumi:"name"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a CloudProjectDatabaseUser resource.
type CloudProjectDatabaseUserArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput
	// The engine of the database cluster you want to add. To get a full list of available engine visit :
	// [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).\
	// Available engines for this resource (other have specific resource):
	// * `cassandra`
	// * `kafka`
	// * `kafkaConnect`
	// * `mysql`
	Engine pulumi.StringInput
	// Name of the user.
	Name pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput
}

func (CloudProjectDatabaseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectDatabaseUserArgs)(nil)).Elem()
}

type CloudProjectDatabaseUserInput interface {
	pulumi.Input

	ToCloudProjectDatabaseUserOutput() CloudProjectDatabaseUserOutput
	ToCloudProjectDatabaseUserOutputWithContext(ctx context.Context) CloudProjectDatabaseUserOutput
}

func (*CloudProjectDatabaseUser) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabaseUser)(nil)).Elem()
}

func (i *CloudProjectDatabaseUser) ToCloudProjectDatabaseUserOutput() CloudProjectDatabaseUserOutput {
	return i.ToCloudProjectDatabaseUserOutputWithContext(context.Background())
}

func (i *CloudProjectDatabaseUser) ToCloudProjectDatabaseUserOutputWithContext(ctx context.Context) CloudProjectDatabaseUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectDatabaseUserOutput)
}

// CloudProjectDatabaseUserArrayInput is an input type that accepts CloudProjectDatabaseUserArray and CloudProjectDatabaseUserArrayOutput values.
// You can construct a concrete instance of `CloudProjectDatabaseUserArrayInput` via:
//
//	CloudProjectDatabaseUserArray{ CloudProjectDatabaseUserArgs{...} }
type CloudProjectDatabaseUserArrayInput interface {
	pulumi.Input

	ToCloudProjectDatabaseUserArrayOutput() CloudProjectDatabaseUserArrayOutput
	ToCloudProjectDatabaseUserArrayOutputWithContext(context.Context) CloudProjectDatabaseUserArrayOutput
}

type CloudProjectDatabaseUserArray []CloudProjectDatabaseUserInput

func (CloudProjectDatabaseUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProjectDatabaseUser)(nil)).Elem()
}

func (i CloudProjectDatabaseUserArray) ToCloudProjectDatabaseUserArrayOutput() CloudProjectDatabaseUserArrayOutput {
	return i.ToCloudProjectDatabaseUserArrayOutputWithContext(context.Background())
}

func (i CloudProjectDatabaseUserArray) ToCloudProjectDatabaseUserArrayOutputWithContext(ctx context.Context) CloudProjectDatabaseUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectDatabaseUserArrayOutput)
}

// CloudProjectDatabaseUserMapInput is an input type that accepts CloudProjectDatabaseUserMap and CloudProjectDatabaseUserMapOutput values.
// You can construct a concrete instance of `CloudProjectDatabaseUserMapInput` via:
//
//	CloudProjectDatabaseUserMap{ "key": CloudProjectDatabaseUserArgs{...} }
type CloudProjectDatabaseUserMapInput interface {
	pulumi.Input

	ToCloudProjectDatabaseUserMapOutput() CloudProjectDatabaseUserMapOutput
	ToCloudProjectDatabaseUserMapOutputWithContext(context.Context) CloudProjectDatabaseUserMapOutput
}

type CloudProjectDatabaseUserMap map[string]CloudProjectDatabaseUserInput

func (CloudProjectDatabaseUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProjectDatabaseUser)(nil)).Elem()
}

func (i CloudProjectDatabaseUserMap) ToCloudProjectDatabaseUserMapOutput() CloudProjectDatabaseUserMapOutput {
	return i.ToCloudProjectDatabaseUserMapOutputWithContext(context.Background())
}

func (i CloudProjectDatabaseUserMap) ToCloudProjectDatabaseUserMapOutputWithContext(ctx context.Context) CloudProjectDatabaseUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectDatabaseUserMapOutput)
}

type CloudProjectDatabaseUserOutput struct{ *pulumi.OutputState }

func (CloudProjectDatabaseUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectDatabaseUser)(nil)).Elem()
}

func (o CloudProjectDatabaseUserOutput) ToCloudProjectDatabaseUserOutput() CloudProjectDatabaseUserOutput {
	return o
}

func (o CloudProjectDatabaseUserOutput) ToCloudProjectDatabaseUserOutputWithContext(ctx context.Context) CloudProjectDatabaseUserOutput {
	return o
}

// Cluster ID.
func (o CloudProjectDatabaseUserOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseUser) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Date of the creation of the user.
func (o CloudProjectDatabaseUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseUser) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The engine of the database cluster you want to add. To get a full list of available engine visit :
// [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).\
// Available engines for this resource (other have specific resource):
// * `cassandra`
// * `kafka`
// * `kafkaConnect`
// * `mysql`
func (o CloudProjectDatabaseUserOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseUser) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Name of the user.
func (o CloudProjectDatabaseUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password of the user.
func (o CloudProjectDatabaseUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The id of the public cloud project. If omitted,
// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
func (o CloudProjectDatabaseUserOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseUser) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Current status of the user.
func (o CloudProjectDatabaseUserOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectDatabaseUser) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type CloudProjectDatabaseUserArrayOutput struct{ *pulumi.OutputState }

func (CloudProjectDatabaseUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProjectDatabaseUser)(nil)).Elem()
}

func (o CloudProjectDatabaseUserArrayOutput) ToCloudProjectDatabaseUserArrayOutput() CloudProjectDatabaseUserArrayOutput {
	return o
}

func (o CloudProjectDatabaseUserArrayOutput) ToCloudProjectDatabaseUserArrayOutputWithContext(ctx context.Context) CloudProjectDatabaseUserArrayOutput {
	return o
}

func (o CloudProjectDatabaseUserArrayOutput) Index(i pulumi.IntInput) CloudProjectDatabaseUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudProjectDatabaseUser {
		return vs[0].([]*CloudProjectDatabaseUser)[vs[1].(int)]
	}).(CloudProjectDatabaseUserOutput)
}

type CloudProjectDatabaseUserMapOutput struct{ *pulumi.OutputState }

func (CloudProjectDatabaseUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProjectDatabaseUser)(nil)).Elem()
}

func (o CloudProjectDatabaseUserMapOutput) ToCloudProjectDatabaseUserMapOutput() CloudProjectDatabaseUserMapOutput {
	return o
}

func (o CloudProjectDatabaseUserMapOutput) ToCloudProjectDatabaseUserMapOutputWithContext(ctx context.Context) CloudProjectDatabaseUserMapOutput {
	return o
}

func (o CloudProjectDatabaseUserMapOutput) MapIndex(k pulumi.StringInput) CloudProjectDatabaseUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudProjectDatabaseUser {
		return vs[0].(map[string]*CloudProjectDatabaseUser)[vs[1].(string)]
	}).(CloudProjectDatabaseUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectDatabaseUserInput)(nil)).Elem(), &CloudProjectDatabaseUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectDatabaseUserArrayInput)(nil)).Elem(), CloudProjectDatabaseUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectDatabaseUserMapInput)(nil)).Elem(), CloudProjectDatabaseUserMap{})
	pulumi.RegisterOutputType(CloudProjectDatabaseUserOutput{})
	pulumi.RegisterOutputType(CloudProjectDatabaseUserArrayOutput{})
	pulumi.RegisterOutputType(CloudProjectDatabaseUserMapOutput{})
}
