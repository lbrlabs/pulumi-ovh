// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vrack

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach an IP block to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/Ip"
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/Order"
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/Vrack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mycart, err := Order.GetCart(ctx, &order.GetCartArgs{
//				OvhSubsidiary: "fr",
//				Description:   pulumi.StringRef("my cart"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vrackCartProductPlan, err := Order.GetCartProductPlan(ctx, &order.GetCartProductPlanArgs{
//				CartId:        mycart.Id,
//				PriceCapacity: "renew",
//				Product:       "vrack",
//				PlanCode:      "vrack",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vrackVrack, err := Vrack.NewVrack(ctx, "vrackVrack", &Vrack.VrackArgs{
//				Description:   pulumi.String(mycart.Description),
//				OvhSubsidiary: pulumi.String(mycart.OvhSubsidiary),
//				PaymentMean:   pulumi.String("fidelity"),
//				Plan: &vrack.VrackPlanArgs{
//					Duration:    pulumi.String(vrackCartProductPlan.SelectedPrices[0].Duration),
//					PlanCode:    pulumi.String(vrackCartProductPlan.PlanCode),
//					PricingMode: pulumi.String(vrackCartProductPlan.SelectedPrices[0].PricingMode),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ipblockCartProductPlan, err := Order.GetCartProductPlan(ctx, &order.GetCartProductPlanArgs{
//				CartId:        mycart.Id,
//				PriceCapacity: "renew",
//				Product:       "ip",
//				PlanCode:      "ip-v4-s30-ripe",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ipblockService, err := Ip.NewService(ctx, "ipblockService", &Ip.ServiceArgs{
//				OvhSubsidiary: pulumi.String(mycart.OvhSubsidiary),
//				PaymentMean:   pulumi.String("ovh-account"),
//				Description:   pulumi.String(mycart.Description),
//				Plan: &ip.ServicePlanArgs{
//					Duration:    pulumi.String(ipblockCartProductPlan.SelectedPrices[0].Duration),
//					PlanCode:    pulumi.String(ipblockCartProductPlan.PlanCode),
//					PricingMode: pulumi.String(ipblockCartProductPlan.SelectedPrices[0].PricingMode),
//					Configurations: ip.ServicePlanConfigurationArray{
//						&ip.ServicePlanConfigurationArgs{
//							Label: pulumi.String("country"),
//							Value: pulumi.String("FR"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Vrack.NewIp(ctx, "vrackblock", &Vrack.IpArgs{
//				ServiceName: vrackVrack.ServiceName,
//				Block:       ipblockService.Ip,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Ip struct {
	pulumi.CustomResourceState

	// Your IP block.
	Block pulumi.StringOutput `pulumi:"block"`
	// Your gateway
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Your IP block
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Where you want your block announced on the network
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIp registers a new resource with the given unique name, arguments, and options.
func NewIp(ctx *pulumi.Context,
	name string, args *IpArgs, opts ...pulumi.ResourceOption) (*Ip, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Block == nil {
		return nil, errors.New("invalid value for required argument 'Block'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Ip
	err := ctx.RegisterResource("ovh:Vrack/ip:Ip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIp gets an existing Ip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpState, opts ...pulumi.ResourceOption) (*Ip, error) {
	var resource Ip
	err := ctx.ReadResource("ovh:Vrack/ip:Ip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ip resources.
type ipState struct {
	// Your IP block.
	Block *string `pulumi:"block"`
	// Your gateway
	Gateway *string `pulumi:"gateway"`
	// Your IP block
	Ip *string `pulumi:"ip"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
	// Where you want your block announced on the network
	Zone *string `pulumi:"zone"`
}

type IpState struct {
	// Your IP block.
	Block pulumi.StringPtrInput
	// Your gateway
	Gateway pulumi.StringPtrInput
	// Your IP block
	Ip pulumi.StringPtrInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
	// Where you want your block announced on the network
	Zone pulumi.StringPtrInput
}

func (IpState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipState)(nil)).Elem()
}

type ipArgs struct {
	// Your IP block.
	Block string `pulumi:"block"`
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a Ip resource.
type IpArgs struct {
	// Your IP block.
	Block pulumi.StringInput
	// The internal name of your vrack
	ServiceName pulumi.StringInput
}

func (IpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipArgs)(nil)).Elem()
}

type IpInput interface {
	pulumi.Input

	ToIpOutput() IpOutput
	ToIpOutputWithContext(ctx context.Context) IpOutput
}

func (*Ip) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip)(nil)).Elem()
}

func (i *Ip) ToIpOutput() IpOutput {
	return i.ToIpOutputWithContext(context.Background())
}

func (i *Ip) ToIpOutputWithContext(ctx context.Context) IpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpOutput)
}

// IpArrayInput is an input type that accepts IpArray and IpArrayOutput values.
// You can construct a concrete instance of `IpArrayInput` via:
//
//	IpArray{ IpArgs{...} }
type IpArrayInput interface {
	pulumi.Input

	ToIpArrayOutput() IpArrayOutput
	ToIpArrayOutputWithContext(context.Context) IpArrayOutput
}

type IpArray []IpInput

func (IpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip)(nil)).Elem()
}

func (i IpArray) ToIpArrayOutput() IpArrayOutput {
	return i.ToIpArrayOutputWithContext(context.Background())
}

func (i IpArray) ToIpArrayOutputWithContext(ctx context.Context) IpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpArrayOutput)
}

// IpMapInput is an input type that accepts IpMap and IpMapOutput values.
// You can construct a concrete instance of `IpMapInput` via:
//
//	IpMap{ "key": IpArgs{...} }
type IpMapInput interface {
	pulumi.Input

	ToIpMapOutput() IpMapOutput
	ToIpMapOutputWithContext(context.Context) IpMapOutput
}

type IpMap map[string]IpInput

func (IpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip)(nil)).Elem()
}

func (i IpMap) ToIpMapOutput() IpMapOutput {
	return i.ToIpMapOutputWithContext(context.Background())
}

func (i IpMap) ToIpMapOutputWithContext(ctx context.Context) IpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMapOutput)
}

type IpOutput struct{ *pulumi.OutputState }

func (IpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip)(nil)).Elem()
}

func (o IpOutput) ToIpOutput() IpOutput {
	return o
}

func (o IpOutput) ToIpOutputWithContext(ctx context.Context) IpOutput {
	return o
}

// Your IP block.
func (o IpOutput) Block() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Block }).(pulumi.StringOutput)
}

// Your gateway
func (o IpOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Your IP block
func (o IpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The internal name of your vrack
func (o IpOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Where you want your block announced on the network
func (o IpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type IpArrayOutput struct{ *pulumi.OutputState }

func (IpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip)(nil)).Elem()
}

func (o IpArrayOutput) ToIpArrayOutput() IpArrayOutput {
	return o
}

func (o IpArrayOutput) ToIpArrayOutputWithContext(ctx context.Context) IpArrayOutput {
	return o
}

func (o IpArrayOutput) Index(i pulumi.IntInput) IpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ip {
		return vs[0].([]*Ip)[vs[1].(int)]
	}).(IpOutput)
}

type IpMapOutput struct{ *pulumi.OutputState }

func (IpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip)(nil)).Elem()
}

func (o IpMapOutput) ToIpMapOutput() IpMapOutput {
	return o
}

func (o IpMapOutput) ToIpMapOutputWithContext(ctx context.Context) IpMapOutput {
	return o
}

func (o IpMapOutput) MapIndex(k pulumi.StringInput) IpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ip {
		return vs[0].(map[string]*Ip)[vs[1].(string)]
	}).(IpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpInput)(nil)).Elem(), &Ip{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpArrayInput)(nil)).Elem(), IpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpMapInput)(nil)).Elem(), IpMap{})
	pulumi.RegisterOutputType(IpOutput{})
	pulumi.RegisterOutputType(IpArrayOutput{})
	pulumi.RegisterOutputType(IpMapOutput{})
}
