// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage rules for HTTP route.
//
// ## Example Usage
//
// Route which redirect all url to https for example.com (Vhost).
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			httpsredirect, err := ovh.NewIpLoadBalancingHttpRoute(ctx, "httpsredirect", &ovh.IpLoadBalancingHttpRouteArgs{
//				Action: &IpLoadBalancingHttpRouteActionArgs{
//					Status: pulumi.Int(302),
//					Target: pulumi.String(fmt.Sprintf("https://%v%v%v", host, path, arguments)),
//					Type:   pulumi.String("redirect"),
//				},
//				DisplayName: pulumi.String("Redirect to HTTPS"),
//				FrontendId:  pulumi.Int(11111),
//				ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
//				Weight:      pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ovh.NewIpLoadBalancingHttpRouteRule(ctx, "examplerule", &ovh.IpLoadBalancingHttpRouteRuleArgs{
//				DisplayName: pulumi.String("Match example.com host"),
//				Field:       pulumi.String("host"),
//				Match:       pulumi.String("is"),
//				Negate:      pulumi.Bool(false),
//				Pattern:     pulumi.String("example.com"),
//				RouteId:     httpsredirect.ID(),
//				ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Rule which match a specific header (same effect as the host match above).
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ovh.NewIpLoadBalancingHttpRouteRule(ctx, "examplerule", &ovh.IpLoadBalancingHttpRouteRuleArgs{
//				DisplayName: pulumi.String("Match example.com Host header"),
//				Field:       pulumi.String("headers"),
//				Match:       pulumi.String("is"),
//				Negate:      pulumi.Bool(false),
//				Pattern:     pulumi.String("example.com"),
//				RouteId:     pulumi.Any(ovh_iploadbalancing_http_route.Httpsredirect.Id),
//				ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
//				SubField:    pulumi.String("Host"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IpLoadBalancingHttpRouteRule struct {
	pulumi.CustomResourceState

	// Human readable name for your rule, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field pulumi.StringOutput `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match pulumi.StringOutput `pulumi:"match"`
	// Invert the matching operator effect
	Negate pulumi.BoolOutput `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// The route to apply this rule
	RouteId pulumi.StringOutput `pulumi:"routeId"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrOutput `pulumi:"subField"`
}

// NewIpLoadBalancingHttpRouteRule registers a new resource with the given unique name, arguments, and options.
func NewIpLoadBalancingHttpRouteRule(ctx *pulumi.Context,
	name string, args *IpLoadBalancingHttpRouteRuleArgs, opts ...pulumi.ResourceOption) (*IpLoadBalancingHttpRouteRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IpLoadBalancingHttpRouteRule
	err := ctx.RegisterResource("ovh:index/ipLoadBalancingHttpRouteRule:IpLoadBalancingHttpRouteRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpLoadBalancingHttpRouteRule gets an existing IpLoadBalancingHttpRouteRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpLoadBalancingHttpRouteRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpLoadBalancingHttpRouteRuleState, opts ...pulumi.ResourceOption) (*IpLoadBalancingHttpRouteRule, error) {
	var resource IpLoadBalancingHttpRouteRule
	err := ctx.ReadResource("ovh:index/ipLoadBalancingHttpRouteRule:IpLoadBalancingHttpRouteRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpLoadBalancingHttpRouteRule resources.
type ipLoadBalancingHttpRouteRuleState struct {
	// Human readable name for your rule, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field *string `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match *string `pulumi:"match"`
	// Invert the matching operator effect
	Negate *bool `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern *string `pulumi:"pattern"`
	// The route to apply this rule
	RouteId *string `pulumi:"routeId"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField *string `pulumi:"subField"`
}

type IpLoadBalancingHttpRouteRuleState struct {
	// Human readable name for your rule, this field is for you
	DisplayName pulumi.StringPtrInput
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field pulumi.StringPtrInput
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match pulumi.StringPtrInput
	// Invert the matching operator effect
	Negate pulumi.BoolPtrInput
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrInput
	// The route to apply this rule
	RouteId pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrInput
}

func (IpLoadBalancingHttpRouteRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipLoadBalancingHttpRouteRuleState)(nil)).Elem()
}

type ipLoadBalancingHttpRouteRuleArgs struct {
	// Human readable name for your rule, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field string `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match string `pulumi:"match"`
	// Invert the matching operator effect
	Negate *bool `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern *string `pulumi:"pattern"`
	// The route to apply this rule
	RouteId string `pulumi:"routeId"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField *string `pulumi:"subField"`
}

// The set of arguments for constructing a IpLoadBalancingHttpRouteRule resource.
type IpLoadBalancingHttpRouteRuleArgs struct {
	// Human readable name for your rule, this field is for you
	DisplayName pulumi.StringPtrInput
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field pulumi.StringInput
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match pulumi.StringInput
	// Invert the matching operator effect
	Negate pulumi.BoolPtrInput
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrInput
	// The route to apply this rule
	RouteId pulumi.StringInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrInput
}

func (IpLoadBalancingHttpRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipLoadBalancingHttpRouteRuleArgs)(nil)).Elem()
}

type IpLoadBalancingHttpRouteRuleInput interface {
	pulumi.Input

	ToIpLoadBalancingHttpRouteRuleOutput() IpLoadBalancingHttpRouteRuleOutput
	ToIpLoadBalancingHttpRouteRuleOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteRuleOutput
}

func (*IpLoadBalancingHttpRouteRule) ElementType() reflect.Type {
	return reflect.TypeOf((**IpLoadBalancingHttpRouteRule)(nil)).Elem()
}

func (i *IpLoadBalancingHttpRouteRule) ToIpLoadBalancingHttpRouteRuleOutput() IpLoadBalancingHttpRouteRuleOutput {
	return i.ToIpLoadBalancingHttpRouteRuleOutputWithContext(context.Background())
}

func (i *IpLoadBalancingHttpRouteRule) ToIpLoadBalancingHttpRouteRuleOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingHttpRouteRuleOutput)
}

// IpLoadBalancingHttpRouteRuleArrayInput is an input type that accepts IpLoadBalancingHttpRouteRuleArray and IpLoadBalancingHttpRouteRuleArrayOutput values.
// You can construct a concrete instance of `IpLoadBalancingHttpRouteRuleArrayInput` via:
//
//	IpLoadBalancingHttpRouteRuleArray{ IpLoadBalancingHttpRouteRuleArgs{...} }
type IpLoadBalancingHttpRouteRuleArrayInput interface {
	pulumi.Input

	ToIpLoadBalancingHttpRouteRuleArrayOutput() IpLoadBalancingHttpRouteRuleArrayOutput
	ToIpLoadBalancingHttpRouteRuleArrayOutputWithContext(context.Context) IpLoadBalancingHttpRouteRuleArrayOutput
}

type IpLoadBalancingHttpRouteRuleArray []IpLoadBalancingHttpRouteRuleInput

func (IpLoadBalancingHttpRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpLoadBalancingHttpRouteRule)(nil)).Elem()
}

func (i IpLoadBalancingHttpRouteRuleArray) ToIpLoadBalancingHttpRouteRuleArrayOutput() IpLoadBalancingHttpRouteRuleArrayOutput {
	return i.ToIpLoadBalancingHttpRouteRuleArrayOutputWithContext(context.Background())
}

func (i IpLoadBalancingHttpRouteRuleArray) ToIpLoadBalancingHttpRouteRuleArrayOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingHttpRouteRuleArrayOutput)
}

// IpLoadBalancingHttpRouteRuleMapInput is an input type that accepts IpLoadBalancingHttpRouteRuleMap and IpLoadBalancingHttpRouteRuleMapOutput values.
// You can construct a concrete instance of `IpLoadBalancingHttpRouteRuleMapInput` via:
//
//	IpLoadBalancingHttpRouteRuleMap{ "key": IpLoadBalancingHttpRouteRuleArgs{...} }
type IpLoadBalancingHttpRouteRuleMapInput interface {
	pulumi.Input

	ToIpLoadBalancingHttpRouteRuleMapOutput() IpLoadBalancingHttpRouteRuleMapOutput
	ToIpLoadBalancingHttpRouteRuleMapOutputWithContext(context.Context) IpLoadBalancingHttpRouteRuleMapOutput
}

type IpLoadBalancingHttpRouteRuleMap map[string]IpLoadBalancingHttpRouteRuleInput

func (IpLoadBalancingHttpRouteRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpLoadBalancingHttpRouteRule)(nil)).Elem()
}

func (i IpLoadBalancingHttpRouteRuleMap) ToIpLoadBalancingHttpRouteRuleMapOutput() IpLoadBalancingHttpRouteRuleMapOutput {
	return i.ToIpLoadBalancingHttpRouteRuleMapOutputWithContext(context.Background())
}

func (i IpLoadBalancingHttpRouteRuleMap) ToIpLoadBalancingHttpRouteRuleMapOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingHttpRouteRuleMapOutput)
}

type IpLoadBalancingHttpRouteRuleOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingHttpRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpLoadBalancingHttpRouteRule)(nil)).Elem()
}

func (o IpLoadBalancingHttpRouteRuleOutput) ToIpLoadBalancingHttpRouteRuleOutput() IpLoadBalancingHttpRouteRuleOutput {
	return o
}

func (o IpLoadBalancingHttpRouteRuleOutput) ToIpLoadBalancingHttpRouteRuleOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteRuleOutput {
	return o
}

// Human readable name for your rule, this field is for you
func (o IpLoadBalancingHttpRouteRuleOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRouteRule) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
func (o IpLoadBalancingHttpRouteRuleOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRouteRule) pulumi.StringOutput { return v.Field }).(pulumi.StringOutput)
}

// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
func (o IpLoadBalancingHttpRouteRuleOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRouteRule) pulumi.StringOutput { return v.Match }).(pulumi.StringOutput)
}

// Invert the matching operator effect
func (o IpLoadBalancingHttpRouteRuleOutput) Negate() pulumi.BoolOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRouteRule) pulumi.BoolOutput { return v.Negate }).(pulumi.BoolOutput)
}

// Value to match against this match. Interpretation if this field depends on the match and field
func (o IpLoadBalancingHttpRouteRuleOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRouteRule) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

// The route to apply this rule
func (o IpLoadBalancingHttpRouteRuleOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRouteRule) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

// The internal name of your IP load balancing
func (o IpLoadBalancingHttpRouteRuleOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRouteRule) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
func (o IpLoadBalancingHttpRouteRuleOutput) SubField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingHttpRouteRule) pulumi.StringPtrOutput { return v.SubField }).(pulumi.StringPtrOutput)
}

type IpLoadBalancingHttpRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingHttpRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpLoadBalancingHttpRouteRule)(nil)).Elem()
}

func (o IpLoadBalancingHttpRouteRuleArrayOutput) ToIpLoadBalancingHttpRouteRuleArrayOutput() IpLoadBalancingHttpRouteRuleArrayOutput {
	return o
}

func (o IpLoadBalancingHttpRouteRuleArrayOutput) ToIpLoadBalancingHttpRouteRuleArrayOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteRuleArrayOutput {
	return o
}

func (o IpLoadBalancingHttpRouteRuleArrayOutput) Index(i pulumi.IntInput) IpLoadBalancingHttpRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpLoadBalancingHttpRouteRule {
		return vs[0].([]*IpLoadBalancingHttpRouteRule)[vs[1].(int)]
	}).(IpLoadBalancingHttpRouteRuleOutput)
}

type IpLoadBalancingHttpRouteRuleMapOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingHttpRouteRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpLoadBalancingHttpRouteRule)(nil)).Elem()
}

func (o IpLoadBalancingHttpRouteRuleMapOutput) ToIpLoadBalancingHttpRouteRuleMapOutput() IpLoadBalancingHttpRouteRuleMapOutput {
	return o
}

func (o IpLoadBalancingHttpRouteRuleMapOutput) ToIpLoadBalancingHttpRouteRuleMapOutputWithContext(ctx context.Context) IpLoadBalancingHttpRouteRuleMapOutput {
	return o
}

func (o IpLoadBalancingHttpRouteRuleMapOutput) MapIndex(k pulumi.StringInput) IpLoadBalancingHttpRouteRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpLoadBalancingHttpRouteRule {
		return vs[0].(map[string]*IpLoadBalancingHttpRouteRule)[vs[1].(string)]
	}).(IpLoadBalancingHttpRouteRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingHttpRouteRuleInput)(nil)).Elem(), &IpLoadBalancingHttpRouteRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingHttpRouteRuleArrayInput)(nil)).Elem(), IpLoadBalancingHttpRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingHttpRouteRuleMapInput)(nil)).Elem(), IpLoadBalancingHttpRouteRuleMap{})
	pulumi.RegisterOutputType(IpLoadBalancingHttpRouteRuleOutput{})
	pulumi.RegisterOutputType(IpLoadBalancingHttpRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(IpLoadBalancingHttpRouteRuleMapOutput{})
}
