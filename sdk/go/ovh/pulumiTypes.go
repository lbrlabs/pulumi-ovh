// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GetServerVni struct {
	// VirtualNetworkInterface activation state
	Enabled bool `pulumi:"enabled"`
	// VirtualNetworkInterface mode (public,vrack,vrack_aggregation)
	Mode string `pulumi:"mode"`
	// User defined VirtualNetworkInterface name
	Name string `pulumi:"name"`
	// NetworkInterfaceControllers bound to this VirtualNetworkInterface
	Nics []string `pulumi:"nics"`
	// Server bound to this VirtualNetworkInterface
	ServerName string `pulumi:"serverName"`
	// VirtualNetworkInterface unique id
	Uuid string `pulumi:"uuid"`
	// vRack name
	Vrack string `pulumi:"vrack"`
}

// GetServerVniInput is an input type that accepts GetServerVniArgs and GetServerVniOutput values.
// You can construct a concrete instance of `GetServerVniInput` via:
//
//	GetServerVniArgs{...}
type GetServerVniInput interface {
	pulumi.Input

	ToGetServerVniOutput() GetServerVniOutput
	ToGetServerVniOutputWithContext(context.Context) GetServerVniOutput
}

type GetServerVniArgs struct {
	// VirtualNetworkInterface activation state
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// VirtualNetworkInterface mode (public,vrack,vrack_aggregation)
	Mode pulumi.StringInput `pulumi:"mode"`
	// User defined VirtualNetworkInterface name
	Name pulumi.StringInput `pulumi:"name"`
	// NetworkInterfaceControllers bound to this VirtualNetworkInterface
	Nics pulumi.StringArrayInput `pulumi:"nics"`
	// Server bound to this VirtualNetworkInterface
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// VirtualNetworkInterface unique id
	Uuid pulumi.StringInput `pulumi:"uuid"`
	// vRack name
	Vrack pulumi.StringInput `pulumi:"vrack"`
}

func (GetServerVniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerVni)(nil)).Elem()
}

func (i GetServerVniArgs) ToGetServerVniOutput() GetServerVniOutput {
	return i.ToGetServerVniOutputWithContext(context.Background())
}

func (i GetServerVniArgs) ToGetServerVniOutputWithContext(ctx context.Context) GetServerVniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerVniOutput)
}

// GetServerVniArrayInput is an input type that accepts GetServerVniArray and GetServerVniArrayOutput values.
// You can construct a concrete instance of `GetServerVniArrayInput` via:
//
//	GetServerVniArray{ GetServerVniArgs{...} }
type GetServerVniArrayInput interface {
	pulumi.Input

	ToGetServerVniArrayOutput() GetServerVniArrayOutput
	ToGetServerVniArrayOutputWithContext(context.Context) GetServerVniArrayOutput
}

type GetServerVniArray []GetServerVniInput

func (GetServerVniArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerVni)(nil)).Elem()
}

func (i GetServerVniArray) ToGetServerVniArrayOutput() GetServerVniArrayOutput {
	return i.ToGetServerVniArrayOutputWithContext(context.Background())
}

func (i GetServerVniArray) ToGetServerVniArrayOutputWithContext(ctx context.Context) GetServerVniArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerVniArrayOutput)
}

type GetServerVniOutput struct{ *pulumi.OutputState }

func (GetServerVniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerVni)(nil)).Elem()
}

func (o GetServerVniOutput) ToGetServerVniOutput() GetServerVniOutput {
	return o
}

func (o GetServerVniOutput) ToGetServerVniOutputWithContext(ctx context.Context) GetServerVniOutput {
	return o
}

// VirtualNetworkInterface activation state
func (o GetServerVniOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerVni) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// VirtualNetworkInterface mode (public,vrack,vrack_aggregation)
func (o GetServerVniOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerVni) string { return v.Mode }).(pulumi.StringOutput)
}

// User defined VirtualNetworkInterface name
func (o GetServerVniOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerVni) string { return v.Name }).(pulumi.StringOutput)
}

// NetworkInterfaceControllers bound to this VirtualNetworkInterface
func (o GetServerVniOutput) Nics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServerVni) []string { return v.Nics }).(pulumi.StringArrayOutput)
}

// Server bound to this VirtualNetworkInterface
func (o GetServerVniOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerVni) string { return v.ServerName }).(pulumi.StringOutput)
}

// VirtualNetworkInterface unique id
func (o GetServerVniOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerVni) string { return v.Uuid }).(pulumi.StringOutput)
}

// vRack name
func (o GetServerVniOutput) Vrack() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerVni) string { return v.Vrack }).(pulumi.StringOutput)
}

type GetServerVniArrayOutput struct{ *pulumi.OutputState }

func (GetServerVniArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerVni)(nil)).Elem()
}

func (o GetServerVniArrayOutput) ToGetServerVniArrayOutput() GetServerVniArrayOutput {
	return o
}

func (o GetServerVniArrayOutput) ToGetServerVniArrayOutputWithContext(ctx context.Context) GetServerVniArrayOutput {
	return o
}

func (o GetServerVniArrayOutput) Index(i pulumi.IntInput) GetServerVniOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerVni {
		return vs[0].([]GetServerVni)[vs[1].(int)]
	}).(GetServerVniOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerVniInput)(nil)).Elem(), GetServerVniArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerVniArrayInput)(nil)).Elem(), GetServerVniArray{})
	pulumi.RegisterOutputType(GetServerVniOutput{})
	pulumi.RegisterOutputType(GetServerVniArrayOutput{})
}
