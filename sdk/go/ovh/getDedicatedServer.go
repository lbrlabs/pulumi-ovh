// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about a dedicated server associated with your OVH Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ovh.GetDedicatedServer(ctx, &GetDedicatedServerArgs{
//				ServiceName: "XXXXXX",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDedicatedServer(ctx *pulumi.Context, args *GetDedicatedServerArgs, opts ...pulumi.InvokeOption) (*GetDedicatedServerResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetDedicatedServerResult
	err := ctx.Invoke("ovh:index/getDedicatedServer:getDedicatedServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDedicatedServer.
type GetDedicatedServerArgs struct {
	// The serviceName of your dedicated server.
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getDedicatedServer.
type GetDedicatedServerResult struct {
	// boot id of the server
	BootId int `pulumi:"bootId"`
	// dedicater server commercial range
	CommercialRange string `pulumi:"commercialRange"`
	// dedicated datacenter localisation (bhs1,bhs2,...)
	Datacenter string `pulumi:"datacenter"`
	// List of enabled public VNI uuids
	EnabledPublicVnis []string `pulumi:"enabledPublicVnis"`
	// List of enabled vrackAggregation VNI uuids
	EnabledVrackAggregationVnis []string `pulumi:"enabledVrackAggregationVnis"`
	// List of enabled vrack VNI uuids
	EnabledVrackVnis []string `pulumi:"enabledVrackVnis"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// dedicated server ip (IPv4)
	Ip string `pulumi:"ip"`
	// dedicated server ip blocks
	Ips []string `pulumi:"ips"`
	// link speed of the server
	LinkSpeed int `pulumi:"linkSpeed"`
	// Icmp monitoring state
	Monitoring bool `pulumi:"monitoring"`
	// User defined VirtualNetworkInterface name
	Name string `pulumi:"name"`
	// Operating system
	Os string `pulumi:"os"`
	// Does this server have professional use option
	ProfessionalUse bool `pulumi:"professionalUse"`
	// rack id of the server
	Rack string `pulumi:"rack"`
	// rescue mail of the server
	RescueMail string `pulumi:"rescueMail"`
	// dedicated server reverse
	Reverse string `pulumi:"reverse"`
	// root device of the server
	RootDevice string `pulumi:"rootDevice"`
	// your server id
	ServerId    int    `pulumi:"serverId"`
	ServiceName string `pulumi:"serviceName"`
	// error, hacked, hackedBlocked, ok
	State string `pulumi:"state"`
	// Dedicated server support level (critical, fastpath, gs, pro)
	SupportLevel string `pulumi:"supportLevel"`
	// the list of Virtualnetworkinterface assiociated with this server
	Vnis []GetDedicatedServerVni `pulumi:"vnis"`
}

func GetDedicatedServerOutput(ctx *pulumi.Context, args GetDedicatedServerOutputArgs, opts ...pulumi.InvokeOption) GetDedicatedServerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDedicatedServerResult, error) {
			args := v.(GetDedicatedServerArgs)
			r, err := GetDedicatedServer(ctx, &args, opts...)
			var s GetDedicatedServerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDedicatedServerResultOutput)
}

// A collection of arguments for invoking getDedicatedServer.
type GetDedicatedServerOutputArgs struct {
	// The serviceName of your dedicated server.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (GetDedicatedServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDedicatedServerArgs)(nil)).Elem()
}

// A collection of values returned by getDedicatedServer.
type GetDedicatedServerResultOutput struct{ *pulumi.OutputState }

func (GetDedicatedServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDedicatedServerResult)(nil)).Elem()
}

func (o GetDedicatedServerResultOutput) ToGetDedicatedServerResultOutput() GetDedicatedServerResultOutput {
	return o
}

func (o GetDedicatedServerResultOutput) ToGetDedicatedServerResultOutputWithContext(ctx context.Context) GetDedicatedServerResultOutput {
	return o
}

// boot id of the server
func (o GetDedicatedServerResultOutput) BootId() pulumi.IntOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) int { return v.BootId }).(pulumi.IntOutput)
}

// dedicater server commercial range
func (o GetDedicatedServerResultOutput) CommercialRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.CommercialRange }).(pulumi.StringOutput)
}

// dedicated datacenter localisation (bhs1,bhs2,...)
func (o GetDedicatedServerResultOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.Datacenter }).(pulumi.StringOutput)
}

// List of enabled public VNI uuids
func (o GetDedicatedServerResultOutput) EnabledPublicVnis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) []string { return v.EnabledPublicVnis }).(pulumi.StringArrayOutput)
}

// List of enabled vrackAggregation VNI uuids
func (o GetDedicatedServerResultOutput) EnabledVrackAggregationVnis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) []string { return v.EnabledVrackAggregationVnis }).(pulumi.StringArrayOutput)
}

// List of enabled vrack VNI uuids
func (o GetDedicatedServerResultOutput) EnabledVrackVnis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) []string { return v.EnabledVrackVnis }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDedicatedServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// dedicated server ip (IPv4)
func (o GetDedicatedServerResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.Ip }).(pulumi.StringOutput)
}

// dedicated server ip blocks
func (o GetDedicatedServerResultOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// link speed of the server
func (o GetDedicatedServerResultOutput) LinkSpeed() pulumi.IntOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) int { return v.LinkSpeed }).(pulumi.IntOutput)
}

// Icmp monitoring state
func (o GetDedicatedServerResultOutput) Monitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) bool { return v.Monitoring }).(pulumi.BoolOutput)
}

// User defined VirtualNetworkInterface name
func (o GetDedicatedServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.Name }).(pulumi.StringOutput)
}

// Operating system
func (o GetDedicatedServerResultOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.Os }).(pulumi.StringOutput)
}

// Does this server have professional use option
func (o GetDedicatedServerResultOutput) ProfessionalUse() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) bool { return v.ProfessionalUse }).(pulumi.BoolOutput)
}

// rack id of the server
func (o GetDedicatedServerResultOutput) Rack() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.Rack }).(pulumi.StringOutput)
}

// rescue mail of the server
func (o GetDedicatedServerResultOutput) RescueMail() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.RescueMail }).(pulumi.StringOutput)
}

// dedicated server reverse
func (o GetDedicatedServerResultOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.Reverse }).(pulumi.StringOutput)
}

// root device of the server
func (o GetDedicatedServerResultOutput) RootDevice() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.RootDevice }).(pulumi.StringOutput)
}

// your server id
func (o GetDedicatedServerResultOutput) ServerId() pulumi.IntOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) int { return v.ServerId }).(pulumi.IntOutput)
}

func (o GetDedicatedServerResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// error, hacked, hackedBlocked, ok
func (o GetDedicatedServerResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.State }).(pulumi.StringOutput)
}

// Dedicated server support level (critical, fastpath, gs, pro)
func (o GetDedicatedServerResultOutput) SupportLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) string { return v.SupportLevel }).(pulumi.StringOutput)
}

// the list of Virtualnetworkinterface assiociated with this server
func (o GetDedicatedServerResultOutput) Vnis() GetDedicatedServerVniArrayOutput {
	return o.ApplyT(func(v GetDedicatedServerResult) []GetDedicatedServerVni { return v.Vnis }).(GetDedicatedServerVniArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDedicatedServerResultOutput{})
}
