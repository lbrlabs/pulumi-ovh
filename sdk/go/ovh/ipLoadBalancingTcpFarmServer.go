// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a backend server entry linked to loadbalancing group (farm)
type IpLoadBalancingTcpFarmServer struct {
	pulumi.CustomResourceState

	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringOutput `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrOutput   `pulumi:"backup"`
	Chain  pulumi.StringPtrOutput `pulumi:"chain"`
	// Label for the server
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId pulumi.IntOutput `pulumi:"farmId"`
	// Port that backend will respond on
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrOutput `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrOutput `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrOutput `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status pulumi.StringOutput `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewIpLoadBalancingTcpFarmServer registers a new resource with the given unique name, arguments, and options.
func NewIpLoadBalancingTcpFarmServer(ctx *pulumi.Context,
	name string, args *IpLoadBalancingTcpFarmServerArgs, opts ...pulumi.ResourceOption) (*IpLoadBalancingTcpFarmServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.FarmId == nil {
		return nil, errors.New("invalid value for required argument 'FarmId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IpLoadBalancingTcpFarmServer
	err := ctx.RegisterResource("ovh:index/ipLoadBalancingTcpFarmServer:IpLoadBalancingTcpFarmServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpLoadBalancingTcpFarmServer gets an existing IpLoadBalancingTcpFarmServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpLoadBalancingTcpFarmServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpLoadBalancingTcpFarmServerState, opts ...pulumi.ResourceOption) (*IpLoadBalancingTcpFarmServer, error) {
	var resource IpLoadBalancingTcpFarmServer
	err := ctx.ReadResource("ovh:index/ipLoadBalancingTcpFarmServer:IpLoadBalancingTcpFarmServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpLoadBalancingTcpFarmServer resources.
type ipLoadBalancingTcpFarmServerState struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address *string `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup *bool   `pulumi:"backup"`
	Chain  *string `pulumi:"chain"`
	// Label for the server
	DisplayName *string `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId *int `pulumi:"farmId"`
	// Port that backend will respond on
	Port *int `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe *bool `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl *bool `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status *string `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight *int `pulumi:"weight"`
}

type IpLoadBalancingTcpFarmServerState struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringPtrInput
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrInput
	Chain  pulumi.StringPtrInput
	// Label for the server
	DisplayName pulumi.StringPtrInput
	// ID of the farm this server is attached to
	FarmId pulumi.IntPtrInput
	// Port that backend will respond on
	Port pulumi.IntPtrInput
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrInput
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrInput
	// backend status - `active` or `inactive`
	Status pulumi.StringPtrInput
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrInput
}

func (IpLoadBalancingTcpFarmServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipLoadBalancingTcpFarmServerState)(nil)).Elem()
}

type ipLoadBalancingTcpFarmServerArgs struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address string `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup *bool   `pulumi:"backup"`
	Chain  *string `pulumi:"chain"`
	// Label for the server
	DisplayName *string `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId int `pulumi:"farmId"`
	// Port that backend will respond on
	Port *int `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe *bool `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl *bool `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status string `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a IpLoadBalancingTcpFarmServer resource.
type IpLoadBalancingTcpFarmServerArgs struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringInput
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrInput
	Chain  pulumi.StringPtrInput
	// Label for the server
	DisplayName pulumi.StringPtrInput
	// ID of the farm this server is attached to
	FarmId pulumi.IntInput
	// Port that backend will respond on
	Port pulumi.IntPtrInput
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrInput
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrInput
	// backend status - `active` or `inactive`
	Status pulumi.StringInput
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrInput
}

func (IpLoadBalancingTcpFarmServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipLoadBalancingTcpFarmServerArgs)(nil)).Elem()
}

type IpLoadBalancingTcpFarmServerInput interface {
	pulumi.Input

	ToIpLoadBalancingTcpFarmServerOutput() IpLoadBalancingTcpFarmServerOutput
	ToIpLoadBalancingTcpFarmServerOutputWithContext(ctx context.Context) IpLoadBalancingTcpFarmServerOutput
}

func (*IpLoadBalancingTcpFarmServer) ElementType() reflect.Type {
	return reflect.TypeOf((**IpLoadBalancingTcpFarmServer)(nil)).Elem()
}

func (i *IpLoadBalancingTcpFarmServer) ToIpLoadBalancingTcpFarmServerOutput() IpLoadBalancingTcpFarmServerOutput {
	return i.ToIpLoadBalancingTcpFarmServerOutputWithContext(context.Background())
}

func (i *IpLoadBalancingTcpFarmServer) ToIpLoadBalancingTcpFarmServerOutputWithContext(ctx context.Context) IpLoadBalancingTcpFarmServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingTcpFarmServerOutput)
}

// IpLoadBalancingTcpFarmServerArrayInput is an input type that accepts IpLoadBalancingTcpFarmServerArray and IpLoadBalancingTcpFarmServerArrayOutput values.
// You can construct a concrete instance of `IpLoadBalancingTcpFarmServerArrayInput` via:
//
//	IpLoadBalancingTcpFarmServerArray{ IpLoadBalancingTcpFarmServerArgs{...} }
type IpLoadBalancingTcpFarmServerArrayInput interface {
	pulumi.Input

	ToIpLoadBalancingTcpFarmServerArrayOutput() IpLoadBalancingTcpFarmServerArrayOutput
	ToIpLoadBalancingTcpFarmServerArrayOutputWithContext(context.Context) IpLoadBalancingTcpFarmServerArrayOutput
}

type IpLoadBalancingTcpFarmServerArray []IpLoadBalancingTcpFarmServerInput

func (IpLoadBalancingTcpFarmServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpLoadBalancingTcpFarmServer)(nil)).Elem()
}

func (i IpLoadBalancingTcpFarmServerArray) ToIpLoadBalancingTcpFarmServerArrayOutput() IpLoadBalancingTcpFarmServerArrayOutput {
	return i.ToIpLoadBalancingTcpFarmServerArrayOutputWithContext(context.Background())
}

func (i IpLoadBalancingTcpFarmServerArray) ToIpLoadBalancingTcpFarmServerArrayOutputWithContext(ctx context.Context) IpLoadBalancingTcpFarmServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingTcpFarmServerArrayOutput)
}

// IpLoadBalancingTcpFarmServerMapInput is an input type that accepts IpLoadBalancingTcpFarmServerMap and IpLoadBalancingTcpFarmServerMapOutput values.
// You can construct a concrete instance of `IpLoadBalancingTcpFarmServerMapInput` via:
//
//	IpLoadBalancingTcpFarmServerMap{ "key": IpLoadBalancingTcpFarmServerArgs{...} }
type IpLoadBalancingTcpFarmServerMapInput interface {
	pulumi.Input

	ToIpLoadBalancingTcpFarmServerMapOutput() IpLoadBalancingTcpFarmServerMapOutput
	ToIpLoadBalancingTcpFarmServerMapOutputWithContext(context.Context) IpLoadBalancingTcpFarmServerMapOutput
}

type IpLoadBalancingTcpFarmServerMap map[string]IpLoadBalancingTcpFarmServerInput

func (IpLoadBalancingTcpFarmServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpLoadBalancingTcpFarmServer)(nil)).Elem()
}

func (i IpLoadBalancingTcpFarmServerMap) ToIpLoadBalancingTcpFarmServerMapOutput() IpLoadBalancingTcpFarmServerMapOutput {
	return i.ToIpLoadBalancingTcpFarmServerMapOutputWithContext(context.Background())
}

func (i IpLoadBalancingTcpFarmServerMap) ToIpLoadBalancingTcpFarmServerMapOutputWithContext(ctx context.Context) IpLoadBalancingTcpFarmServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingTcpFarmServerMapOutput)
}

type IpLoadBalancingTcpFarmServerOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingTcpFarmServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpLoadBalancingTcpFarmServer)(nil)).Elem()
}

func (o IpLoadBalancingTcpFarmServerOutput) ToIpLoadBalancingTcpFarmServerOutput() IpLoadBalancingTcpFarmServerOutput {
	return o
}

func (o IpLoadBalancingTcpFarmServerOutput) ToIpLoadBalancingTcpFarmServerOutputWithContext(ctx context.Context) IpLoadBalancingTcpFarmServerOutput {
	return o
}

// Address of the backend server (IP from either internal or OVH network)
func (o IpLoadBalancingTcpFarmServerOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// is it a backup server used in case of failure of all the non-backup backends
func (o IpLoadBalancingTcpFarmServerOutput) Backup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.BoolPtrOutput { return v.Backup }).(pulumi.BoolPtrOutput)
}

func (o IpLoadBalancingTcpFarmServerOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.StringPtrOutput { return v.Chain }).(pulumi.StringPtrOutput)
}

// Label for the server
func (o IpLoadBalancingTcpFarmServerOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// ID of the farm this server is attached to
func (o IpLoadBalancingTcpFarmServerOutput) FarmId() pulumi.IntOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.IntOutput { return v.FarmId }).(pulumi.IntOutput)
}

// Port that backend will respond on
func (o IpLoadBalancingTcpFarmServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// defines if backend will be probed to determine health and keep as active in farm if healthy
func (o IpLoadBalancingTcpFarmServerOutput) Probe() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.BoolPtrOutput { return v.Probe }).(pulumi.BoolPtrOutput)
}

// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
func (o IpLoadBalancingTcpFarmServerOutput) ProxyProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.StringPtrOutput { return v.ProxyProtocolVersion }).(pulumi.StringPtrOutput)
}

// The internal name of your IP load balancing
func (o IpLoadBalancingTcpFarmServerOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// is the connection ciphered with SSL (TLS)
func (o IpLoadBalancingTcpFarmServerOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.BoolPtrOutput { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// backend status - `active` or `inactive`
func (o IpLoadBalancingTcpFarmServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// used in loadbalancing algorithm
func (o IpLoadBalancingTcpFarmServerOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpLoadBalancingTcpFarmServer) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

type IpLoadBalancingTcpFarmServerArrayOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingTcpFarmServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpLoadBalancingTcpFarmServer)(nil)).Elem()
}

func (o IpLoadBalancingTcpFarmServerArrayOutput) ToIpLoadBalancingTcpFarmServerArrayOutput() IpLoadBalancingTcpFarmServerArrayOutput {
	return o
}

func (o IpLoadBalancingTcpFarmServerArrayOutput) ToIpLoadBalancingTcpFarmServerArrayOutputWithContext(ctx context.Context) IpLoadBalancingTcpFarmServerArrayOutput {
	return o
}

func (o IpLoadBalancingTcpFarmServerArrayOutput) Index(i pulumi.IntInput) IpLoadBalancingTcpFarmServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpLoadBalancingTcpFarmServer {
		return vs[0].([]*IpLoadBalancingTcpFarmServer)[vs[1].(int)]
	}).(IpLoadBalancingTcpFarmServerOutput)
}

type IpLoadBalancingTcpFarmServerMapOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingTcpFarmServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpLoadBalancingTcpFarmServer)(nil)).Elem()
}

func (o IpLoadBalancingTcpFarmServerMapOutput) ToIpLoadBalancingTcpFarmServerMapOutput() IpLoadBalancingTcpFarmServerMapOutput {
	return o
}

func (o IpLoadBalancingTcpFarmServerMapOutput) ToIpLoadBalancingTcpFarmServerMapOutputWithContext(ctx context.Context) IpLoadBalancingTcpFarmServerMapOutput {
	return o
}

func (o IpLoadBalancingTcpFarmServerMapOutput) MapIndex(k pulumi.StringInput) IpLoadBalancingTcpFarmServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpLoadBalancingTcpFarmServer {
		return vs[0].(map[string]*IpLoadBalancingTcpFarmServer)[vs[1].(string)]
	}).(IpLoadBalancingTcpFarmServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingTcpFarmServerInput)(nil)).Elem(), &IpLoadBalancingTcpFarmServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingTcpFarmServerArrayInput)(nil)).Elem(), IpLoadBalancingTcpFarmServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingTcpFarmServerMapInput)(nil)).Elem(), IpLoadBalancingTcpFarmServerMap{})
	pulumi.RegisterOutputType(IpLoadBalancingTcpFarmServerOutput{})
	pulumi.RegisterOutputType(IpLoadBalancingTcpFarmServerArrayOutput{})
	pulumi.RegisterOutputType(IpLoadBalancingTcpFarmServerMapOutput{})
}
