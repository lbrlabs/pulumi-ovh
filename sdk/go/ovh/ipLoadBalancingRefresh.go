// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Applies changes from other ovh_iploadbalancing_* resourcesto the production configuration of loadbalancers.
type IpLoadBalancingRefresh struct {
	pulumi.CustomResourceState

	// List of values traccked to trigger refresh, used also to form implicit dependencies
	Keepers pulumi.StringArrayOutput `pulumi:"keepers"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewIpLoadBalancingRefresh registers a new resource with the given unique name, arguments, and options.
func NewIpLoadBalancingRefresh(ctx *pulumi.Context,
	name string, args *IpLoadBalancingRefreshArgs, opts ...pulumi.ResourceOption) (*IpLoadBalancingRefresh, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Keepers == nil {
		return nil, errors.New("invalid value for required argument 'Keepers'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IpLoadBalancingRefresh
	err := ctx.RegisterResource("ovh:index/ipLoadBalancingRefresh:IpLoadBalancingRefresh", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpLoadBalancingRefresh gets an existing IpLoadBalancingRefresh resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpLoadBalancingRefresh(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpLoadBalancingRefreshState, opts ...pulumi.ResourceOption) (*IpLoadBalancingRefresh, error) {
	var resource IpLoadBalancingRefresh
	err := ctx.ReadResource("ovh:index/ipLoadBalancingRefresh:IpLoadBalancingRefresh", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpLoadBalancingRefresh resources.
type ipLoadBalancingRefreshState struct {
	// List of values traccked to trigger refresh, used also to form implicit dependencies
	Keepers []string `pulumi:"keepers"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
}

type IpLoadBalancingRefreshState struct {
	// List of values traccked to trigger refresh, used also to form implicit dependencies
	Keepers pulumi.StringArrayInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
}

func (IpLoadBalancingRefreshState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipLoadBalancingRefreshState)(nil)).Elem()
}

type ipLoadBalancingRefreshArgs struct {
	// List of values traccked to trigger refresh, used also to form implicit dependencies
	Keepers []string `pulumi:"keepers"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a IpLoadBalancingRefresh resource.
type IpLoadBalancingRefreshArgs struct {
	// List of values traccked to trigger refresh, used also to form implicit dependencies
	Keepers pulumi.StringArrayInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
}

func (IpLoadBalancingRefreshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipLoadBalancingRefreshArgs)(nil)).Elem()
}

type IpLoadBalancingRefreshInput interface {
	pulumi.Input

	ToIpLoadBalancingRefreshOutput() IpLoadBalancingRefreshOutput
	ToIpLoadBalancingRefreshOutputWithContext(ctx context.Context) IpLoadBalancingRefreshOutput
}

func (*IpLoadBalancingRefresh) ElementType() reflect.Type {
	return reflect.TypeOf((**IpLoadBalancingRefresh)(nil)).Elem()
}

func (i *IpLoadBalancingRefresh) ToIpLoadBalancingRefreshOutput() IpLoadBalancingRefreshOutput {
	return i.ToIpLoadBalancingRefreshOutputWithContext(context.Background())
}

func (i *IpLoadBalancingRefresh) ToIpLoadBalancingRefreshOutputWithContext(ctx context.Context) IpLoadBalancingRefreshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingRefreshOutput)
}

// IpLoadBalancingRefreshArrayInput is an input type that accepts IpLoadBalancingRefreshArray and IpLoadBalancingRefreshArrayOutput values.
// You can construct a concrete instance of `IpLoadBalancingRefreshArrayInput` via:
//
//	IpLoadBalancingRefreshArray{ IpLoadBalancingRefreshArgs{...} }
type IpLoadBalancingRefreshArrayInput interface {
	pulumi.Input

	ToIpLoadBalancingRefreshArrayOutput() IpLoadBalancingRefreshArrayOutput
	ToIpLoadBalancingRefreshArrayOutputWithContext(context.Context) IpLoadBalancingRefreshArrayOutput
}

type IpLoadBalancingRefreshArray []IpLoadBalancingRefreshInput

func (IpLoadBalancingRefreshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpLoadBalancingRefresh)(nil)).Elem()
}

func (i IpLoadBalancingRefreshArray) ToIpLoadBalancingRefreshArrayOutput() IpLoadBalancingRefreshArrayOutput {
	return i.ToIpLoadBalancingRefreshArrayOutputWithContext(context.Background())
}

func (i IpLoadBalancingRefreshArray) ToIpLoadBalancingRefreshArrayOutputWithContext(ctx context.Context) IpLoadBalancingRefreshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingRefreshArrayOutput)
}

// IpLoadBalancingRefreshMapInput is an input type that accepts IpLoadBalancingRefreshMap and IpLoadBalancingRefreshMapOutput values.
// You can construct a concrete instance of `IpLoadBalancingRefreshMapInput` via:
//
//	IpLoadBalancingRefreshMap{ "key": IpLoadBalancingRefreshArgs{...} }
type IpLoadBalancingRefreshMapInput interface {
	pulumi.Input

	ToIpLoadBalancingRefreshMapOutput() IpLoadBalancingRefreshMapOutput
	ToIpLoadBalancingRefreshMapOutputWithContext(context.Context) IpLoadBalancingRefreshMapOutput
}

type IpLoadBalancingRefreshMap map[string]IpLoadBalancingRefreshInput

func (IpLoadBalancingRefreshMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpLoadBalancingRefresh)(nil)).Elem()
}

func (i IpLoadBalancingRefreshMap) ToIpLoadBalancingRefreshMapOutput() IpLoadBalancingRefreshMapOutput {
	return i.ToIpLoadBalancingRefreshMapOutputWithContext(context.Background())
}

func (i IpLoadBalancingRefreshMap) ToIpLoadBalancingRefreshMapOutputWithContext(ctx context.Context) IpLoadBalancingRefreshMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpLoadBalancingRefreshMapOutput)
}

type IpLoadBalancingRefreshOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingRefreshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpLoadBalancingRefresh)(nil)).Elem()
}

func (o IpLoadBalancingRefreshOutput) ToIpLoadBalancingRefreshOutput() IpLoadBalancingRefreshOutput {
	return o
}

func (o IpLoadBalancingRefreshOutput) ToIpLoadBalancingRefreshOutputWithContext(ctx context.Context) IpLoadBalancingRefreshOutput {
	return o
}

// List of values traccked to trigger refresh, used also to form implicit dependencies
func (o IpLoadBalancingRefreshOutput) Keepers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpLoadBalancingRefresh) pulumi.StringArrayOutput { return v.Keepers }).(pulumi.StringArrayOutput)
}

// The internal name of your IP load balancing
func (o IpLoadBalancingRefreshOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpLoadBalancingRefresh) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type IpLoadBalancingRefreshArrayOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingRefreshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpLoadBalancingRefresh)(nil)).Elem()
}

func (o IpLoadBalancingRefreshArrayOutput) ToIpLoadBalancingRefreshArrayOutput() IpLoadBalancingRefreshArrayOutput {
	return o
}

func (o IpLoadBalancingRefreshArrayOutput) ToIpLoadBalancingRefreshArrayOutputWithContext(ctx context.Context) IpLoadBalancingRefreshArrayOutput {
	return o
}

func (o IpLoadBalancingRefreshArrayOutput) Index(i pulumi.IntInput) IpLoadBalancingRefreshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpLoadBalancingRefresh {
		return vs[0].([]*IpLoadBalancingRefresh)[vs[1].(int)]
	}).(IpLoadBalancingRefreshOutput)
}

type IpLoadBalancingRefreshMapOutput struct{ *pulumi.OutputState }

func (IpLoadBalancingRefreshMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpLoadBalancingRefresh)(nil)).Elem()
}

func (o IpLoadBalancingRefreshMapOutput) ToIpLoadBalancingRefreshMapOutput() IpLoadBalancingRefreshMapOutput {
	return o
}

func (o IpLoadBalancingRefreshMapOutput) ToIpLoadBalancingRefreshMapOutputWithContext(ctx context.Context) IpLoadBalancingRefreshMapOutput {
	return o
}

func (o IpLoadBalancingRefreshMapOutput) MapIndex(k pulumi.StringInput) IpLoadBalancingRefreshOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpLoadBalancingRefresh {
		return vs[0].(map[string]*IpLoadBalancingRefresh)[vs[1].(string)]
	}).(IpLoadBalancingRefreshOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingRefreshInput)(nil)).Elem(), &IpLoadBalancingRefresh{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingRefreshArrayInput)(nil)).Elem(), IpLoadBalancingRefreshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpLoadBalancingRefreshMapInput)(nil)).Elem(), IpLoadBalancingRefreshMap{})
	pulumi.RegisterOutputType(IpLoadBalancingRefreshOutput{})
	pulumi.RegisterOutputType(IpLoadBalancingRefreshArrayOutput{})
	pulumi.RegisterOutputType(IpLoadBalancingRefreshMapOutput{})
}
