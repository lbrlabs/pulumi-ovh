// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a dedicated server to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ovh.NewVrackDedicatedServer(ctx, "vds", &ovh.VrackDedicatedServerArgs{
//				ServerId:    pulumi.String("67890"),
//				ServiceName: pulumi.String("XXXX"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VrackDedicatedServer struct {
	pulumi.CustomResourceState

	// The id of the dedicated server.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVrackDedicatedServer registers a new resource with the given unique name, arguments, and options.
func NewVrackDedicatedServer(ctx *pulumi.Context,
	name string, args *VrackDedicatedServerArgs, opts ...pulumi.ResourceOption) (*VrackDedicatedServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VrackDedicatedServer
	err := ctx.RegisterResource("ovh:index/vrackDedicatedServer:VrackDedicatedServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackDedicatedServer gets an existing VrackDedicatedServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackDedicatedServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackDedicatedServerState, opts ...pulumi.ResourceOption) (*VrackDedicatedServer, error) {
	var resource VrackDedicatedServer
	err := ctx.ReadResource("ovh:index/vrackDedicatedServer:VrackDedicatedServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackDedicatedServer resources.
type vrackDedicatedServerState struct {
	// The id of the dedicated server.
	ServerId *string `pulumi:"serverId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName *string `pulumi:"serviceName"`
}

type VrackDedicatedServerState struct {
	// The id of the dedicated server.
	ServerId pulumi.StringPtrInput
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringPtrInput
}

func (VrackDedicatedServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackDedicatedServerState)(nil)).Elem()
}

type vrackDedicatedServerArgs struct {
	// The id of the dedicated server.
	ServerId string `pulumi:"serverId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackDedicatedServer resource.
type VrackDedicatedServerArgs struct {
	// The id of the dedicated server.
	ServerId pulumi.StringInput
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput
}

func (VrackDedicatedServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackDedicatedServerArgs)(nil)).Elem()
}

type VrackDedicatedServerInput interface {
	pulumi.Input

	ToVrackDedicatedServerOutput() VrackDedicatedServerOutput
	ToVrackDedicatedServerOutputWithContext(ctx context.Context) VrackDedicatedServerOutput
}

func (*VrackDedicatedServer) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackDedicatedServer)(nil)).Elem()
}

func (i *VrackDedicatedServer) ToVrackDedicatedServerOutput() VrackDedicatedServerOutput {
	return i.ToVrackDedicatedServerOutputWithContext(context.Background())
}

func (i *VrackDedicatedServer) ToVrackDedicatedServerOutputWithContext(ctx context.Context) VrackDedicatedServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerOutput)
}

// VrackDedicatedServerArrayInput is an input type that accepts VrackDedicatedServerArray and VrackDedicatedServerArrayOutput values.
// You can construct a concrete instance of `VrackDedicatedServerArrayInput` via:
//
//	VrackDedicatedServerArray{ VrackDedicatedServerArgs{...} }
type VrackDedicatedServerArrayInput interface {
	pulumi.Input

	ToVrackDedicatedServerArrayOutput() VrackDedicatedServerArrayOutput
	ToVrackDedicatedServerArrayOutputWithContext(context.Context) VrackDedicatedServerArrayOutput
}

type VrackDedicatedServerArray []VrackDedicatedServerInput

func (VrackDedicatedServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrackDedicatedServer)(nil)).Elem()
}

func (i VrackDedicatedServerArray) ToVrackDedicatedServerArrayOutput() VrackDedicatedServerArrayOutput {
	return i.ToVrackDedicatedServerArrayOutputWithContext(context.Background())
}

func (i VrackDedicatedServerArray) ToVrackDedicatedServerArrayOutputWithContext(ctx context.Context) VrackDedicatedServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerArrayOutput)
}

// VrackDedicatedServerMapInput is an input type that accepts VrackDedicatedServerMap and VrackDedicatedServerMapOutput values.
// You can construct a concrete instance of `VrackDedicatedServerMapInput` via:
//
//	VrackDedicatedServerMap{ "key": VrackDedicatedServerArgs{...} }
type VrackDedicatedServerMapInput interface {
	pulumi.Input

	ToVrackDedicatedServerMapOutput() VrackDedicatedServerMapOutput
	ToVrackDedicatedServerMapOutputWithContext(context.Context) VrackDedicatedServerMapOutput
}

type VrackDedicatedServerMap map[string]VrackDedicatedServerInput

func (VrackDedicatedServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrackDedicatedServer)(nil)).Elem()
}

func (i VrackDedicatedServerMap) ToVrackDedicatedServerMapOutput() VrackDedicatedServerMapOutput {
	return i.ToVrackDedicatedServerMapOutputWithContext(context.Background())
}

func (i VrackDedicatedServerMap) ToVrackDedicatedServerMapOutputWithContext(ctx context.Context) VrackDedicatedServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerMapOutput)
}

type VrackDedicatedServerOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackDedicatedServer)(nil)).Elem()
}

func (o VrackDedicatedServerOutput) ToVrackDedicatedServerOutput() VrackDedicatedServerOutput {
	return o
}

func (o VrackDedicatedServerOutput) ToVrackDedicatedServerOutputWithContext(ctx context.Context) VrackDedicatedServerOutput {
	return o
}

// The id of the dedicated server.
func (o VrackDedicatedServerOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackDedicatedServer) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The id of the vrack. If omitted,
// the `OVH_VRACK_SERVICE` environment variable is used.
func (o VrackDedicatedServerOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackDedicatedServer) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type VrackDedicatedServerArrayOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrackDedicatedServer)(nil)).Elem()
}

func (o VrackDedicatedServerArrayOutput) ToVrackDedicatedServerArrayOutput() VrackDedicatedServerArrayOutput {
	return o
}

func (o VrackDedicatedServerArrayOutput) ToVrackDedicatedServerArrayOutputWithContext(ctx context.Context) VrackDedicatedServerArrayOutput {
	return o
}

func (o VrackDedicatedServerArrayOutput) Index(i pulumi.IntInput) VrackDedicatedServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VrackDedicatedServer {
		return vs[0].([]*VrackDedicatedServer)[vs[1].(int)]
	}).(VrackDedicatedServerOutput)
}

type VrackDedicatedServerMapOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrackDedicatedServer)(nil)).Elem()
}

func (o VrackDedicatedServerMapOutput) ToVrackDedicatedServerMapOutput() VrackDedicatedServerMapOutput {
	return o
}

func (o VrackDedicatedServerMapOutput) ToVrackDedicatedServerMapOutputWithContext(ctx context.Context) VrackDedicatedServerMapOutput {
	return o
}

func (o VrackDedicatedServerMapOutput) MapIndex(k pulumi.StringInput) VrackDedicatedServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VrackDedicatedServer {
		return vs[0].(map[string]*VrackDedicatedServer)[vs[1].(string)]
	}).(VrackDedicatedServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrackDedicatedServerInput)(nil)).Elem(), &VrackDedicatedServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrackDedicatedServerArrayInput)(nil)).Elem(), VrackDedicatedServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrackDedicatedServerMapInput)(nil)).Elem(), VrackDedicatedServerMap{})
	pulumi.RegisterOutputType(VrackDedicatedServerOutput{})
	pulumi.RegisterOutputType(VrackDedicatedServerArrayOutput{})
	pulumi.RegisterOutputType(VrackDedicatedServerMapOutput{})
}
