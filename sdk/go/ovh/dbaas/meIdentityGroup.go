// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbaas

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an identity group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/Dbaas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dbaas.NewMeIdentityGroup(ctx, "myGroup", &Dbaas.MeIdentityGroupArgs{
//				Description: pulumi.String("Some custom description"),
//				Role:        pulumi.String("NONE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MeIdentityGroup struct {
	pulumi.CustomResourceState

	// Creation date of this group.
	Creation pulumi.StringOutput `pulumi:"creation"`
	// Is the group a default and immutable one.
	DefaultGroup pulumi.BoolOutput `pulumi:"defaultGroup"`
	// Group description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Date of the last update of this group.
	LastUpdate pulumi.StringOutput `pulumi:"lastUpdate"`
	// Group name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Role associated with the group. Valid roles are ADMIN, REGULAR, UNPRIVILEGED, and NONE.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// URN of the user group, used when writing IAM policies
	Urn pulumi.StringOutput `pulumi:"urn"`
}

// NewMeIdentityGroup registers a new resource with the given unique name, arguments, and options.
func NewMeIdentityGroup(ctx *pulumi.Context,
	name string, args *MeIdentityGroupArgs, opts ...pulumi.ResourceOption) (*MeIdentityGroup, error) {
	if args == nil {
		args = &MeIdentityGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MeIdentityGroup
	err := ctx.RegisterResource("ovh:Dbaas/meIdentityGroup:MeIdentityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeIdentityGroup gets an existing MeIdentityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeIdentityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeIdentityGroupState, opts ...pulumi.ResourceOption) (*MeIdentityGroup, error) {
	var resource MeIdentityGroup
	err := ctx.ReadResource("ovh:Dbaas/meIdentityGroup:MeIdentityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeIdentityGroup resources.
type meIdentityGroupState struct {
	// Creation date of this group.
	Creation *string `pulumi:"creation"`
	// Is the group a default and immutable one.
	DefaultGroup *bool `pulumi:"defaultGroup"`
	// Group description.
	Description *string `pulumi:"description"`
	// Date of the last update of this group.
	LastUpdate *string `pulumi:"lastUpdate"`
	// Group name.
	Name *string `pulumi:"name"`
	// Role associated with the group. Valid roles are ADMIN, REGULAR, UNPRIVILEGED, and NONE.
	Role *string `pulumi:"role"`
	// URN of the user group, used when writing IAM policies
	Urn *string `pulumi:"urn"`
}

type MeIdentityGroupState struct {
	// Creation date of this group.
	Creation pulumi.StringPtrInput
	// Is the group a default and immutable one.
	DefaultGroup pulumi.BoolPtrInput
	// Group description.
	Description pulumi.StringPtrInput
	// Date of the last update of this group.
	LastUpdate pulumi.StringPtrInput
	// Group name.
	Name pulumi.StringPtrInput
	// Role associated with the group. Valid roles are ADMIN, REGULAR, UNPRIVILEGED, and NONE.
	Role pulumi.StringPtrInput
	// URN of the user group, used when writing IAM policies
	Urn pulumi.StringPtrInput
}

func (MeIdentityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*meIdentityGroupState)(nil)).Elem()
}

type meIdentityGroupArgs struct {
	// Group description.
	Description *string `pulumi:"description"`
	// Group name.
	Name *string `pulumi:"name"`
	// Role associated with the group. Valid roles are ADMIN, REGULAR, UNPRIVILEGED, and NONE.
	Role *string `pulumi:"role"`
}

// The set of arguments for constructing a MeIdentityGroup resource.
type MeIdentityGroupArgs struct {
	// Group description.
	Description pulumi.StringPtrInput
	// Group name.
	Name pulumi.StringPtrInput
	// Role associated with the group. Valid roles are ADMIN, REGULAR, UNPRIVILEGED, and NONE.
	Role pulumi.StringPtrInput
}

func (MeIdentityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meIdentityGroupArgs)(nil)).Elem()
}

type MeIdentityGroupInput interface {
	pulumi.Input

	ToMeIdentityGroupOutput() MeIdentityGroupOutput
	ToMeIdentityGroupOutputWithContext(ctx context.Context) MeIdentityGroupOutput
}

func (*MeIdentityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**MeIdentityGroup)(nil)).Elem()
}

func (i *MeIdentityGroup) ToMeIdentityGroupOutput() MeIdentityGroupOutput {
	return i.ToMeIdentityGroupOutputWithContext(context.Background())
}

func (i *MeIdentityGroup) ToMeIdentityGroupOutputWithContext(ctx context.Context) MeIdentityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeIdentityGroupOutput)
}

// MeIdentityGroupArrayInput is an input type that accepts MeIdentityGroupArray and MeIdentityGroupArrayOutput values.
// You can construct a concrete instance of `MeIdentityGroupArrayInput` via:
//
//	MeIdentityGroupArray{ MeIdentityGroupArgs{...} }
type MeIdentityGroupArrayInput interface {
	pulumi.Input

	ToMeIdentityGroupArrayOutput() MeIdentityGroupArrayOutput
	ToMeIdentityGroupArrayOutputWithContext(context.Context) MeIdentityGroupArrayOutput
}

type MeIdentityGroupArray []MeIdentityGroupInput

func (MeIdentityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeIdentityGroup)(nil)).Elem()
}

func (i MeIdentityGroupArray) ToMeIdentityGroupArrayOutput() MeIdentityGroupArrayOutput {
	return i.ToMeIdentityGroupArrayOutputWithContext(context.Background())
}

func (i MeIdentityGroupArray) ToMeIdentityGroupArrayOutputWithContext(ctx context.Context) MeIdentityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeIdentityGroupArrayOutput)
}

// MeIdentityGroupMapInput is an input type that accepts MeIdentityGroupMap and MeIdentityGroupMapOutput values.
// You can construct a concrete instance of `MeIdentityGroupMapInput` via:
//
//	MeIdentityGroupMap{ "key": MeIdentityGroupArgs{...} }
type MeIdentityGroupMapInput interface {
	pulumi.Input

	ToMeIdentityGroupMapOutput() MeIdentityGroupMapOutput
	ToMeIdentityGroupMapOutputWithContext(context.Context) MeIdentityGroupMapOutput
}

type MeIdentityGroupMap map[string]MeIdentityGroupInput

func (MeIdentityGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeIdentityGroup)(nil)).Elem()
}

func (i MeIdentityGroupMap) ToMeIdentityGroupMapOutput() MeIdentityGroupMapOutput {
	return i.ToMeIdentityGroupMapOutputWithContext(context.Background())
}

func (i MeIdentityGroupMap) ToMeIdentityGroupMapOutputWithContext(ctx context.Context) MeIdentityGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeIdentityGroupMapOutput)
}

type MeIdentityGroupOutput struct{ *pulumi.OutputState }

func (MeIdentityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeIdentityGroup)(nil)).Elem()
}

func (o MeIdentityGroupOutput) ToMeIdentityGroupOutput() MeIdentityGroupOutput {
	return o
}

func (o MeIdentityGroupOutput) ToMeIdentityGroupOutputWithContext(ctx context.Context) MeIdentityGroupOutput {
	return o
}

// Creation date of this group.
func (o MeIdentityGroupOutput) Creation() pulumi.StringOutput {
	return o.ApplyT(func(v *MeIdentityGroup) pulumi.StringOutput { return v.Creation }).(pulumi.StringOutput)
}

// Is the group a default and immutable one.
func (o MeIdentityGroupOutput) DefaultGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v *MeIdentityGroup) pulumi.BoolOutput { return v.DefaultGroup }).(pulumi.BoolOutput)
}

// Group description.
func (o MeIdentityGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MeIdentityGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Date of the last update of this group.
func (o MeIdentityGroupOutput) LastUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v *MeIdentityGroup) pulumi.StringOutput { return v.LastUpdate }).(pulumi.StringOutput)
}

// Group name.
func (o MeIdentityGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MeIdentityGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Role associated with the group. Valid roles are ADMIN, REGULAR, UNPRIVILEGED, and NONE.
func (o MeIdentityGroupOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MeIdentityGroup) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// URN of the user group, used when writing IAM policies
func (o MeIdentityGroupOutput) Urn() pulumi.StringOutput {
	return o.ApplyT(func(v *MeIdentityGroup) pulumi.StringOutput { return v.Urn }).(pulumi.StringOutput)
}

type MeIdentityGroupArrayOutput struct{ *pulumi.OutputState }

func (MeIdentityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeIdentityGroup)(nil)).Elem()
}

func (o MeIdentityGroupArrayOutput) ToMeIdentityGroupArrayOutput() MeIdentityGroupArrayOutput {
	return o
}

func (o MeIdentityGroupArrayOutput) ToMeIdentityGroupArrayOutputWithContext(ctx context.Context) MeIdentityGroupArrayOutput {
	return o
}

func (o MeIdentityGroupArrayOutput) Index(i pulumi.IntInput) MeIdentityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MeIdentityGroup {
		return vs[0].([]*MeIdentityGroup)[vs[1].(int)]
	}).(MeIdentityGroupOutput)
}

type MeIdentityGroupMapOutput struct{ *pulumi.OutputState }

func (MeIdentityGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeIdentityGroup)(nil)).Elem()
}

func (o MeIdentityGroupMapOutput) ToMeIdentityGroupMapOutput() MeIdentityGroupMapOutput {
	return o
}

func (o MeIdentityGroupMapOutput) ToMeIdentityGroupMapOutputWithContext(ctx context.Context) MeIdentityGroupMapOutput {
	return o
}

func (o MeIdentityGroupMapOutput) MapIndex(k pulumi.StringInput) MeIdentityGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MeIdentityGroup {
		return vs[0].(map[string]*MeIdentityGroup)[vs[1].(string)]
	}).(MeIdentityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MeIdentityGroupInput)(nil)).Elem(), &MeIdentityGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeIdentityGroupArrayInput)(nil)).Elem(), MeIdentityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeIdentityGroupMapInput)(nil)).Elem(), MeIdentityGroupMap{})
	pulumi.RegisterOutputType(MeIdentityGroupOutput{})
	pulumi.RegisterOutputType(MeIdentityGroupArrayOutput{})
	pulumi.RegisterOutputType(MeIdentityGroupMapOutput{})
}
