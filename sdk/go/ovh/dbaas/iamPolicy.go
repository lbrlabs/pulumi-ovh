// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an IAM policy.
//
// ## Important
//
// > Using this resource requires that the account is enrolled in the OVHcloud [IAM beta](https://labs.ovhcloud.com/en/iam/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/Dbaas"
//	"github.com/lbrlabs/pulumi-ovh/sdk/go/ovh/Me"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			account, err := Me.GetMe(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			myGroup, err := Dbaas.NewMeIdentityGroup(ctx, "myGroup", &Dbaas.MeIdentityGroupArgs{
//				Description: pulumi.String("my_group created in Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Dbaas.NewIamPolicy(ctx, "manager", &Dbaas.IamPolicyArgs{
//				Description: pulumi.String("Users are allowed to use the OVH manager"),
//				Identities: pulumi.StringArray{
//					myGroup.Urn,
//				},
//				Resources: pulumi.StringArray{
//					*pulumi.String(account.Urn),
//				},
//				Allows: pulumi.StringArray{
//					pulumi.String("account:apiovh:me/get"),
//					pulumi.String("account:apiovh:me/supportLevel/get"),
//					pulumi.String("account:apiovh:me/certificates/get"),
//					pulumi.String("account:apiovh:me/tag/get"),
//					pulumi.String("account:apiovh:services/get"),
//					pulumi.String("account:apiovh:*"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IamPolicy struct {
	pulumi.CustomResourceState

	// List of actions allowed on resources by identities
	Allows pulumi.StringArrayOutput `pulumi:"allows"`
	// Creation date of this group.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the policy
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of overrides of action that must not be allowed even if they are caught by allow. Only makes sens if allow contains wildcards.
	Excepts pulumi.StringArrayOutput `pulumi:"excepts"`
	// List of identities affected by the policy
	Identities pulumi.StringArrayOutput `pulumi:"identities"`
	// Name of the policy, must be unique
	Name pulumi.StringOutput `pulumi:"name"`
	// Owner of the policy.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Indicates that the policy is a default one.
	ReadOnly pulumi.BoolOutput `pulumi:"readOnly"`
	// List of resources affected by the policy
	Resources pulumi.StringArrayOutput `pulumi:"resources"`
	// Date of the last update of this group.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewIamPolicy(ctx *pulumi.Context,
	name string, args *IamPolicyArgs, opts ...pulumi.ResourceOption) (*IamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identities == nil {
		return nil, errors.New("invalid value for required argument 'Identities'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamPolicy
	err := ctx.RegisterResource("ovh:Dbaas/iamPolicy:IamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamPolicy gets an existing IamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamPolicyState, opts ...pulumi.ResourceOption) (*IamPolicy, error) {
	var resource IamPolicy
	err := ctx.ReadResource("ovh:Dbaas/iamPolicy:IamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamPolicy resources.
type iamPolicyState struct {
	// List of actions allowed on resources by identities
	Allows []string `pulumi:"allows"`
	// Creation date of this group.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the policy
	Description *string `pulumi:"description"`
	// List of overrides of action that must not be allowed even if they are caught by allow. Only makes sens if allow contains wildcards.
	Excepts []string `pulumi:"excepts"`
	// List of identities affected by the policy
	Identities []string `pulumi:"identities"`
	// Name of the policy, must be unique
	Name *string `pulumi:"name"`
	// Owner of the policy.
	Owner *string `pulumi:"owner"`
	// Indicates that the policy is a default one.
	ReadOnly *bool `pulumi:"readOnly"`
	// List of resources affected by the policy
	Resources []string `pulumi:"resources"`
	// Date of the last update of this group.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type IamPolicyState struct {
	// List of actions allowed on resources by identities
	Allows pulumi.StringArrayInput
	// Creation date of this group.
	CreatedAt pulumi.StringPtrInput
	// Description of the policy
	Description pulumi.StringPtrInput
	// List of overrides of action that must not be allowed even if they are caught by allow. Only makes sens if allow contains wildcards.
	Excepts pulumi.StringArrayInput
	// List of identities affected by the policy
	Identities pulumi.StringArrayInput
	// Name of the policy, must be unique
	Name pulumi.StringPtrInput
	// Owner of the policy.
	Owner pulumi.StringPtrInput
	// Indicates that the policy is a default one.
	ReadOnly pulumi.BoolPtrInput
	// List of resources affected by the policy
	Resources pulumi.StringArrayInput
	// Date of the last update of this group.
	UpdatedAt pulumi.StringPtrInput
}

func (IamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamPolicyState)(nil)).Elem()
}

type iamPolicyArgs struct {
	// List of actions allowed on resources by identities
	Allows []string `pulumi:"allows"`
	// Description of the policy
	Description *string `pulumi:"description"`
	// List of overrides of action that must not be allowed even if they are caught by allow. Only makes sens if allow contains wildcards.
	Excepts []string `pulumi:"excepts"`
	// List of identities affected by the policy
	Identities []string `pulumi:"identities"`
	// Name of the policy, must be unique
	Name *string `pulumi:"name"`
	// List of resources affected by the policy
	Resources []string `pulumi:"resources"`
}

// The set of arguments for constructing a IamPolicy resource.
type IamPolicyArgs struct {
	// List of actions allowed on resources by identities
	Allows pulumi.StringArrayInput
	// Description of the policy
	Description pulumi.StringPtrInput
	// List of overrides of action that must not be allowed even if they are caught by allow. Only makes sens if allow contains wildcards.
	Excepts pulumi.StringArrayInput
	// List of identities affected by the policy
	Identities pulumi.StringArrayInput
	// Name of the policy, must be unique
	Name pulumi.StringPtrInput
	// List of resources affected by the policy
	Resources pulumi.StringArrayInput
}

func (IamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamPolicyArgs)(nil)).Elem()
}

type IamPolicyInput interface {
	pulumi.Input

	ToIamPolicyOutput() IamPolicyOutput
	ToIamPolicyOutputWithContext(ctx context.Context) IamPolicyOutput
}

func (*IamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicy)(nil)).Elem()
}

func (i *IamPolicy) ToIamPolicyOutput() IamPolicyOutput {
	return i.ToIamPolicyOutputWithContext(context.Background())
}

func (i *IamPolicy) ToIamPolicyOutputWithContext(ctx context.Context) IamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyOutput)
}

// IamPolicyArrayInput is an input type that accepts IamPolicyArray and IamPolicyArrayOutput values.
// You can construct a concrete instance of `IamPolicyArrayInput` via:
//
//	IamPolicyArray{ IamPolicyArgs{...} }
type IamPolicyArrayInput interface {
	pulumi.Input

	ToIamPolicyArrayOutput() IamPolicyArrayOutput
	ToIamPolicyArrayOutputWithContext(context.Context) IamPolicyArrayOutput
}

type IamPolicyArray []IamPolicyInput

func (IamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamPolicy)(nil)).Elem()
}

func (i IamPolicyArray) ToIamPolicyArrayOutput() IamPolicyArrayOutput {
	return i.ToIamPolicyArrayOutputWithContext(context.Background())
}

func (i IamPolicyArray) ToIamPolicyArrayOutputWithContext(ctx context.Context) IamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyArrayOutput)
}

// IamPolicyMapInput is an input type that accepts IamPolicyMap and IamPolicyMapOutput values.
// You can construct a concrete instance of `IamPolicyMapInput` via:
//
//	IamPolicyMap{ "key": IamPolicyArgs{...} }
type IamPolicyMapInput interface {
	pulumi.Input

	ToIamPolicyMapOutput() IamPolicyMapOutput
	ToIamPolicyMapOutputWithContext(context.Context) IamPolicyMapOutput
}

type IamPolicyMap map[string]IamPolicyInput

func (IamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamPolicy)(nil)).Elem()
}

func (i IamPolicyMap) ToIamPolicyMapOutput() IamPolicyMapOutput {
	return i.ToIamPolicyMapOutputWithContext(context.Background())
}

func (i IamPolicyMap) ToIamPolicyMapOutputWithContext(ctx context.Context) IamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyMapOutput)
}

type IamPolicyOutput struct{ *pulumi.OutputState }

func (IamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicy)(nil)).Elem()
}

func (o IamPolicyOutput) ToIamPolicyOutput() IamPolicyOutput {
	return o
}

func (o IamPolicyOutput) ToIamPolicyOutputWithContext(ctx context.Context) IamPolicyOutput {
	return o
}

// List of actions allowed on resources by identities
func (o IamPolicyOutput) Allows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringArrayOutput { return v.Allows }).(pulumi.StringArrayOutput)
}

// Creation date of this group.
func (o IamPolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the policy
func (o IamPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of overrides of action that must not be allowed even if they are caught by allow. Only makes sens if allow contains wildcards.
func (o IamPolicyOutput) Excepts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringArrayOutput { return v.Excepts }).(pulumi.StringArrayOutput)
}

// List of identities affected by the policy
func (o IamPolicyOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringArrayOutput { return v.Identities }).(pulumi.StringArrayOutput)
}

// Name of the policy, must be unique
func (o IamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Owner of the policy.
func (o IamPolicyOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Indicates that the policy is a default one.
func (o IamPolicyOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.BoolOutput { return v.ReadOnly }).(pulumi.BoolOutput)
}

// List of resources affected by the policy
func (o IamPolicyOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringArrayOutput { return v.Resources }).(pulumi.StringArrayOutput)
}

// Date of the last update of this group.
func (o IamPolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type IamPolicyArrayOutput struct{ *pulumi.OutputState }

func (IamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamPolicy)(nil)).Elem()
}

func (o IamPolicyArrayOutput) ToIamPolicyArrayOutput() IamPolicyArrayOutput {
	return o
}

func (o IamPolicyArrayOutput) ToIamPolicyArrayOutputWithContext(ctx context.Context) IamPolicyArrayOutput {
	return o
}

func (o IamPolicyArrayOutput) Index(i pulumi.IntInput) IamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamPolicy {
		return vs[0].([]*IamPolicy)[vs[1].(int)]
	}).(IamPolicyOutput)
}

type IamPolicyMapOutput struct{ *pulumi.OutputState }

func (IamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamPolicy)(nil)).Elem()
}

func (o IamPolicyMapOutput) ToIamPolicyMapOutput() IamPolicyMapOutput {
	return o
}

func (o IamPolicyMapOutput) ToIamPolicyMapOutputWithContext(ctx context.Context) IamPolicyMapOutput {
	return o
}

func (o IamPolicyMapOutput) MapIndex(k pulumi.StringInput) IamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamPolicy {
		return vs[0].(map[string]*IamPolicy)[vs[1].(string)]
	}).(IamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyInput)(nil)).Elem(), &IamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyArrayInput)(nil)).Elem(), IamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyMapInput)(nil)).Elem(), IamPolicyMap{})
	pulumi.RegisterOutputType(IamPolicyOutput{})
	pulumi.RegisterOutputType(IamPolicyArrayOutput{})
	pulumi.RegisterOutputType(IamPolicyMapOutput{})
}
